Kubernetes Cluster K8S-EC2 (create-debug)

$ time { bash -x k8s-cluster --create-cluster=prototype.emvaldes.name --verbose ; };

++ basename k8s-cluster
+ script_name=k8s-cluster
+ export clusters_path=/tmp/clusters
+ clusters_path=/tmp/clusters
+ export CALLER_SCRIPT=/tmp/clusters/k8s-cluster/logger/k8s-cluster.log
+ CALLER_SCRIPT=/tmp/clusters/k8s-cluster/logger/k8s-cluster.log
++ dirname /tmp/clusters/k8s-cluster/logger/k8s-cluster.log
+ mkdir -p /tmp/clusters/k8s-cluster/logger
+ mkdir -p /tmp/clusters/k8s-cluster/docker /tmp/clusters/k8s-cluster/configs
+ usr_local=/Users/emvaldes
+ mkdir -p /Users/emvaldes
+ local_bin=/Users/emvaldes/bin
+ mkdir -p /Users/emvaldes/bin
+ local_etc=/Users/emvaldes/etc
+ mkdir -p /Users/emvaldes/etc
+ local_tmp=/tmp
+ mkdir -p /tmp
+ xfiles=(devops-cloud.variables devops-tools.variables devops-cloud.functions devops-tools.functions)
+ declare -a xfiles
+ for xfile in "${xfiles[@]}"
+ shared_cloud=devops-cloud.variables
+ shared_module=/Users/emvaldes/etc/variables/devops-cloud.variables
+ [[ ! -e /Users/emvaldes/etc/variables/devops-cloud.variables ]]
+ source /Users/emvaldes/etc/variables/devops-cloud.variables
++ export continue_response=false
++ continue_response=false
++ export github_server=https://github.com
++ github_server=https://github.com
++ export github_apis=https://api.github.com
++ github_apis=https://api.github.com
++ export github_content=https://raw.githubusercontent.com
++ github_content=https://raw.githubusercontent.com
++ export googleapis_storage=https://storage.googleapis.com
++ googleapis_storage=https://storage.googleapis.com
++ [[ darwin19.5.0 == \d\a\r\w\i\n* ]]
++ export default_context=docker-desktop
++ default_context=docker-desktop
++ export TARGET_DOMAIN=emvaldes.name
++ TARGET_DOMAIN=emvaldes.name
++ export AWS_REGION=us-east-1
++ AWS_REGION=us-east-1
++ export AWS_ZONES=us-east-1a,us-east-1b,us-east-1c
++ AWS_ZONES=us-east-1a,us-east-1b,us-east-1c
++ export AWS_ACCOUNT=
++ AWS_ACCOUNT=
++ export AWS_ACCOUNT_LENGTH=12
++ AWS_ACCOUNT_LENGTH=12
++ export ADMINISTRATOR_ACCESS=arn:aws:iam::aws:policy/AdministratorAccess
++ ADMINISTRATOR_ACCESS=arn:aws:iam::aws:policy/AdministratorAccess
++ export USER_KUBERNETES=kubernetes
++ USER_KUBERNETES=kubernetes
++ export PROFILE_KUBERNETES=kubernetes
++ PROFILE_KUBERNETES=kubernetes
++ export GROUP_KUBERNETES=kubernetes
++ GROUP_KUBERNETES=kubernetes
++ export ROLE_KUBERNETES=kubernetes
++ ROLE_KUBERNETES=kubernetes
++ export POLICY_KUBERNETES=arn:aws:iam::aws:policy/AdministratorAccess
++ POLICY_KUBERNETES=arn:aws:iam::aws:policy/AdministratorAccess
++ export AWS_DEFAULT_PROFILE=default
++ AWS_DEFAULT_PROFILE=default
++ export AWS_PROFILE=default
++ AWS_PROFILE=default
++ export AWS_GROUP=default
++ AWS_GROUP=default
++ export SAML_PROFILE=devops
++ SAML_PROFILE=devops
++ export CLUSTER_NAME=kubernetes
++ CLUSTER_NAME=kubernetes
++ export KOPS_CLUSTER_NAME=emvaldes.emvaldes.name
++ KOPS_CLUSTER_NAME=emvaldes.emvaldes.name
++ export CONFIG_FILE=/Users/emvaldes/.aws/config
++ CONFIG_FILE=/Users/emvaldes/.aws/config
++ export CREDENTIALS_FILE=/Users/emvaldes/.aws/credentials
++ CREDENTIALS_FILE=/Users/emvaldes/.aws/credentials
++ export KUBEHOME=/Users/emvaldes/.kube
++ KUBEHOME=/Users/emvaldes/.kube
++ export KUBECONFIG=/Users/emvaldes/.kube/config
++ KUBECONFIG=/Users/emvaldes/.kube/config
++ export EKSCLUSTER_VERSION=1.15
++ EKSCLUSTER_VERSION=1.15
++ export KUBERNETES_SSHKEY=kubernetes.pub
++ KUBERNETES_SSHKEY=kubernetes.pub
++ export KUBERNETES_SSHKEY=kubernetes.pub
++ KUBERNETES_SSHKEY=kubernetes.pub
++ export TERRAFORM_SSHKEY=terraform.pub
++ TERRAFORM_SSHKEY=terraform.pub
++ export monitoring_account=tiller
++ monitoring_account=tiller
++ export monitoring_application=prometheus
++ monitoring_application=prometheus
++ export monitoring_operator=stable/prometheus-operator
++ monitoring_operator=stable/prometheus-operator
++ export namespace_default=default
++ namespace_default=default
++ export namespace_kubesystem=kube-system
++ namespace_kubesystem=kube-system
++ export namespace_monitoring=prometheus
++ namespace_monitoring=prometheus
++ export namespace_cloudwatch=amazon-cloudwatch
++ namespace_cloudwatch=amazon-cloudwatch
++ export include_everything=everything
++ include_everything=everything
++ export TARGET_DOCKERFILE=
++ TARGET_DOCKERFILE=
++ export DOCKERFILE_DEFAULT=/Users/emvaldes/etc/configs/docker
++ DOCKERFILE_DEFAULT=/Users/emvaldes/etc/configs/docker
++ export docker_application=helloworld
++ docker_application=helloworld
++ export cloudwatch_agent=cloudwatch-agent
++ cloudwatch_agent=cloudwatch-agent
++ export target_podname=
++ target_podname=
+ for xfile in "${xfiles[@]}"
+ shared_cloud=devops-tools.variables
+ shared_module=/Users/emvaldes/etc/variables/devops-tools.variables
+ [[ ! -e /Users/emvaldes/etc/variables/devops-tools.variables ]]
+ source /Users/emvaldes/etc/variables/devops-tools.variables
++ export openshift_server=https://mirror.openshift.com
++ openshift_server=https://mirror.openshift.com
++ export openshift_latest=https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest
++ openshift_latest=https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest
++ case "${OSTYPE}" in
++ system_platform=linux
++ which curl
++ result=0
++ [[ 0 != 0 ]]
++ alias system-config=system_config
+ for xfile in "${xfiles[@]}"
+ shared_cloud=devops-cloud.functions
+ shared_module=/Users/emvaldes/etc/functions/devops-cloud.functions
+ [[ ! -e /Users/emvaldes/etc/functions/devops-cloud.functions ]]
+ source /Users/emvaldes/etc/functions/devops-cloud.functions
++ alias change-recordset=change_recordset
++ alias cloudwatch-namespace=cloudwatch_namespace
++ alias cluster-application=cluster_application
++ alias cluster-configuration=cluster_configuration
++ alias cluster-contexts=cluster_contexts
++ alias cluster-deployments=cluster_deployments
++ alias cluster-info=cluster_info
++ alias cluster-networks=cluster_networks
++ alias cluster-podname=cluster_podname
++ alias cluster-replicationsets=cluster_replicationsets
++ alias cluster-services=cluster_services
++ alias cluster-validation=cluster_validation
++ alias configmap-clusterinfo=configmap_clusterinfo
++ alias configmap-cwagent=configmap_cwagent
++ alias configure-k8spod=configure_k8spod
++ alias create-accesskey=create_accesskey
++ alias create-ecrrepo=create_ecrrepo
++ alias create-hostedzone=create_hostedzone
++ alias create-iamgroup=create_iamgroup
++ alias create-iamuser=create_iamuser
++ alias create-namespace=create_namespace
++ alias cwagent-daemonset=cwagent_daemonset
++ alias cwagent-fluentd=cwagent_fluentd
++ alias cwagent-serviceaccount=cwagent_serviceaccount
++ alias delete-accesskey=delete_accesskey
++ alias delete-services=delete_services
++ alias deploy-dashboard=deploy_dashboard
++ alias deploy-prometheus=deploy_prometheus
++ alias deploy-prototype=deploy_prototype
++ alias describe-cluster=describe_cluster
++ alias describe-podname=describe_podname
++ alias display-apiservice=display_apiservice
++ alias display-hostedzone=display_hostedzone
++ alias display-labels=display_labels
++ alias display-namespaces=display_namespaces
++ alias display-nodes=display_nodes
++ alias display-podlog=display_podlog
++ alias display-pods=display_pods
++ alias domain-recordsets=domain_recordsets
++ alias enable-cloudwatch=enable_cloudwatch
++ alias export-kubeconfig=export_kubeconfig
++ alias extract-deployment=extract_deployment
++ alias fetch-awsaccount=fetch_awsaccount
++ alias group-policy=group_policy
++ alias hostedzone-exists=hostedzone_exists
++ alias hostedzone-index=hostedzone_index
++ alias login-ecrrepo=login_ecrrepo
++ alias monitoring-services=monitoring_services
++ alias openshift-platform=openshift_platform
++ alias publish-container=publish_container
++ alias recordset-exists=recordset_exists
++ alias rollout-deployment=rollout_deployment
++ alias service-account=service_account
++ alias setup-monitoring=setup_monitoring
++ alias update-deployment=update_deployment
++ export route53_hostrecord=
++ route53_hostrecord=
++ alias validate-hostrecord=validate_hostrecord
++ alias validate-iamgroup=validate_iamgroup
++ alias validate-iamuser=validate_iamuser
+ for xfile in "${xfiles[@]}"
+ shared_cloud=devops-tools.functions
+ shared_module=/Users/emvaldes/etc/functions/devops-tools.functions
+ [[ ! -e /Users/emvaldes/etc/functions/devops-tools.functions ]]
+ source /Users/emvaldes/etc/functions/devops-tools.functions
++ alias active-interfaces=active_interfaces
++ alias add-path=add2path
++ alias amazon-credentials=amazon_credentials
++ alias includes=contains
++ alias continue-process=continue_process
++ alias course-content=course_content
++ alias decode=decode64
++ alias deploy-module=deploy_module
++ alias devops-functions=devops_functions
++ alias display-message=display_message
++ alias display-progress=display_progress
++ alias bash-completion=bash_completion
++ alias eksctl-console=eksctl_console
++ alias enable-rvmtools=enable_rvmtools
++ alias encode=encode64
++ alias execute-command=execute_command
++ alias export-credential=export_credential
++ alias fetch-credential=fetch_credential
++ alias kops-console=kops_console
++ alias kubectl-console=kubectl_console
++ alias listenv-path=listenv_path
++ alias listing-virtualization=listing_virtualization
++ alias logging-process=logging_process
++ alias load-devops=load_devops
++ alias openshift-environment=openshift_environment
++ alias primary-interface=primary_interface
++ alias public-ipaddr=public_ipaddr
++ alias remove-comments=remove_comments
++ alias remove-thisfile=remove_thisfile
++ alias reset-networking=reset_networking
++ alias services-console=services_console
++ alias sleep-until=sleep_until
++ alias update-credentials=update_credentials
++ alias update-repos=update_repos
++ alias validate_saml2aws=validate-saml2aws
++ alias vault-credentials=vault_credentials
+ xfiles=(k8s-cluster.functions k8s-cluster.variables k8s-cluster.help k8s-cluster.create.help k8s-cluster.delete.help)
+ declare -a xfiles
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/k8s-cluster/k8s-cluster.functions
+ [[ -e /Users/emvaldes/etc/k8s-cluster/k8s-cluster.functions ]]
+ source /Users/emvaldes/etc/k8s-cluster/k8s-cluster.functions
++ alias cluster-storage=cluster_storage
++ alias create-k8scluster=create_k8scluster
++ alias delete-k8scluster=delete_k8scluster
++ alias k8s-env=k8s_env
++ alias k8s-vars=k8s_vars
++ alias route53-configs=route53_configs
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/k8s-cluster/k8s-cluster.variables
+ [[ -e /Users/emvaldes/etc/k8s-cluster/k8s-cluster.variables ]]
+ source /Users/emvaldes/etc/k8s-cluster/k8s-cluster.variables
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/k8s-cluster/k8s-cluster.help
+ [[ -e /Users/emvaldes/etc/k8s-cluster/k8s-cluster.help ]]
+ source /Users/emvaldes/etc/k8s-cluster/k8s-cluster.help
+++ basename k8s-cluster
++ script_name=k8s-cluster
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/k8s-cluster/k8s-cluster.create.help
+ [[ -e /Users/emvaldes/etc/k8s-cluster/k8s-cluster.create.help ]]
+ source /Users/emvaldes/etc/k8s-cluster/k8s-cluster.create.help
+++ basename k8s-cluster
++ script_name=k8s-cluster
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/k8s-cluster/k8s-cluster.delete.help
+ [[ -e /Users/emvaldes/etc/k8s-cluster/k8s-cluster.delete.help ]]
+ source /Users/emvaldes/etc/k8s-cluster/k8s-cluster.delete.help
+++ basename k8s-cluster
++ script_name=k8s-cluster
+ xfiles=(devops-tools.functions devops-install.functions)
+ declare -a xfiles
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/functions/devops-tools.functions
+ [[ -e /Users/emvaldes/etc/functions/devops-tools.functions ]]
+ source /Users/emvaldes/etc/functions/devops-tools.functions
++ alias active-interfaces=active_interfaces
++ alias add-path=add2path
++ alias amazon-credentials=amazon_credentials
++ alias includes=contains
++ alias continue-process=continue_process
++ alias course-content=course_content
++ alias decode=decode64
++ alias deploy-module=deploy_module
++ alias devops-functions=devops_functions
++ alias display-message=display_message
++ alias display-progress=display_progress
++ alias bash-completion=bash_completion
++ alias eksctl-console=eksctl_console
++ alias enable-rvmtools=enable_rvmtools
++ alias encode=encode64
++ alias execute-command=execute_command
++ alias export-credential=export_credential
++ alias fetch-credential=fetch_credential
++ alias kops-console=kops_console
++ alias kubectl-console=kubectl_console
++ alias listenv-path=listenv_path
++ alias listing-virtualization=listing_virtualization
++ alias logging-process=logging_process
++ alias load-devops=load_devops
++ alias openshift-environment=openshift_environment
++ alias primary-interface=primary_interface
++ alias public-ipaddr=public_ipaddr
++ alias remove-comments=remove_comments
++ alias remove-thisfile=remove_thisfile
++ alias reset-networking=reset_networking
++ alias services-console=services_console
++ alias sleep-until=sleep_until
++ alias update-credentials=update_credentials
++ alias update-repos=update_repos
++ alias validate_saml2aws=validate-saml2aws
++ alias vault-credentials=vault_credentials
+ for xfile in "${xfiles[@]}"
+ target=/Users/emvaldes/etc/functions/devops-install.functions
+ [[ -e /Users/emvaldes/etc/functions/devops-install.functions ]]
+ source /Users/emvaldes/etc/functions/devops-install.functions
++ alias install-authenticator=install_authenticator
++ alias install-awscli=install_awscli
++ alias install-consul=install_consul
++ alias install-curl=install_curl
++ alias install-eksctl=install_eksctl
++ alias install-golang=install_golang
++ alias install-helm2=install_helm2
++ alias install-homebrew=install_homebrew
++ alias install-jq=install_jq
++ alias install-kops=install_kops
++ alias install-kubectl=install_kubectl
++ alias install-metricsserver=install_metricsserver
++ alias install-minikube=install_minikube
++ alias install-nomad=install_nomad
++ alias install-openshift=install_openshift
++ alias install-packer=install_packer
++ alias install-pip=install_pip
++ alias install-python=install_python
++ alias install-saml2aws=install_saml2aws
++ alias install-terraform=install_terraform
++ alias install-tree=install_tree
++ alias install-vault=install_vault
++ alias install-virtualenv=install_virtualenv
++ alias install-watch=install_watch
++ alias install-wget=install_wget
++ alias unpack-install=unpack_install
+ k8s_cluster --create-cluster=prototype.emvaldes.name --verbose
+ tracking_process k8s_cluster --create-cluster=prototype.emvaldes.name --verbose
+ [[ -n k8s_cluster ]]
+ local 'func_params=k8s_cluster --create-cluster=prototype.emvaldes.name --verbose'
+ local func_name=k8s_cluster
+ logging_process k8s_cluster --create-cluster=prototype.emvaldes.name --verbose
+ [[ -n k8s_cluster ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180350
+ [[ 48 -eq 0 ]]
+ [[ '' == true ]]
+ return 0
+ return 0
+ oIFS='
'
+ for xitem in "${@}"
+ IFS==
++ echo -e --create-cluster=prototype.emvaldes.name
++ sed -e s/--//g
+ set create-cluster prototype.emvaldes.name
+ [[ create-cluster = \a\c\c\e\s\s\-\p\u\b\k\e\y ]]
+ [[ create-cluster = \c\l\u\s\t\e\r\-\n\a\m\e ]]
+ [[ create-cluster = \c\r\e\a\t\e\-\c\l\u\s\t\e\r ]]
+ export target_cluster=prototype.emvaldes.name
+ target_cluster=prototype.emvaldes.name
+ deploy_cluster=true
+ [[ create-cluster = \d\e\b\u\g ]]
+ [[ create-cluster = \d\e\l\e\t\e\-\c\l\u\s\t\e\r ]]
+ [[ create-cluster = \d\e\p\l\o\y\-\c\l\u\s\t\e\r ]]
+ [[ create-cluster = \d\e\p\l\o\y\-\d\a\s\h\b\o\a\r\d ]]
+ [[ create-cluster = \d\e\p\l\o\y\-\p\r\o\m\e\t\h\e\u\s ]]
+ [[ create-cluster = \d\e\p\l\o\y\-\p\r\o\t\o\t\y\p\e ]]
+ [[ create-cluster = \d\e\s\c\r\i\b\e\-\c\l\u\s\t\e\r ]]
+ [[ create-cluster = \d\o\m\a\i\n\-\n\a\m\e ]]
+ [[ create-cluster = \e\n\a\b\l\e\-\c\l\o\u\d\w\a\t\c\h ]]
+ [[ create-cluster = \h\e\l\p\-\c\r\e\a\t\e ]]
+ [[ create-cluster = \h\e\l\p\-\d\e\l\e\t\e ]]
+ [[ create-cluster = \i\n\t\e\r\a\c\t\i\v\e ]]
+ [[ create-cluster = \k\u\b\e\c\o\n\f\i\g ]]
+ [[ create-cluster = \p\r\o\f\i\l\e ]]
+ [[ create-cluster = \r\e\g\i\o\n ]]
+ [[ create-cluster = \t\a\r\g\e\t\-\c\l\u\s\t\e\r ]]
+ [[ create-cluster = \z\o\n\e\s ]]
+ [[ create-cluster = \v\e\r\b\o\s\e ]]
+ [[ create-cluster = \h\e\l\p ]]
+ for xitem in "${@}"
+ IFS==
++ echo -e --verbose
++ sed -e s/--//g
+ set verbose
+ [[ verbose = \a\c\c\e\s\s\-\p\u\b\k\e\y ]]
+ [[ verbose = \c\l\u\s\t\e\r\-\n\a\m\e ]]
+ [[ verbose = \c\r\e\a\t\e\-\c\l\u\s\t\e\r ]]
+ [[ verbose = \d\e\b\u\g ]]
+ [[ verbose = \d\e\l\e\t\e\-\c\l\u\s\t\e\r ]]
+ [[ verbose = \d\e\p\l\o\y\-\c\l\u\s\t\e\r ]]
+ [[ verbose = \d\e\p\l\o\y\-\d\a\s\h\b\o\a\r\d ]]
+ [[ verbose = \d\e\p\l\o\y\-\p\r\o\m\e\t\h\e\u\s ]]
+ [[ verbose = \d\e\p\l\o\y\-\p\r\o\t\o\t\y\p\e ]]
+ [[ verbose = \d\e\s\c\r\i\b\e\-\c\l\u\s\t\e\r ]]
+ [[ verbose = \d\o\m\a\i\n\-\n\a\m\e ]]
+ [[ verbose = \e\n\a\b\l\e\-\c\l\o\u\d\w\a\t\c\h ]]
+ [[ verbose = \h\e\l\p\-\c\r\e\a\t\e ]]
+ [[ verbose = \h\e\l\p\-\d\e\l\e\t\e ]]
+ [[ verbose = \i\n\t\e\r\a\c\t\i\v\e ]]
+ [[ verbose = \k\u\b\e\c\o\n\f\i\g ]]
+ [[ verbose = \p\r\o\f\i\l\e ]]
+ [[ verbose = \r\e\g\i\o\n ]]
+ [[ verbose = \t\a\r\g\e\t\-\c\l\u\s\t\e\r ]]
+ [[ verbose = \z\o\n\e\s ]]
+ [[ verbose = \v\e\r\b\o\s\e ]]
+ export verbose=true
+ verbose=true
+ [[ verbose = \h\e\l\p ]]
+ IFS='
'
+ [[ 0 -eq 0 ]]
+ export delete_cluster=false
+ delete_cluster=false
+ [[ 0 -eq 0 ]]
+ export create_cluster=false
+ create_cluster=false
+ [[ 4 -eq 0 ]]
+ [[ 0 -eq 0 ]]
+ export deploy_dashboard=false
+ deploy_dashboard=false
+ [[ 0 -eq 0 ]]
+ export deploy_prometheus=false
+ deploy_prometheus=false
+ [[ 0 -eq 0 ]]
+ export deploy_prototype=false
+ deploy_prototype=false
+ [[ 0 -eq 0 ]]
+ export describe_cluster=false
+ describe_cluster=false
+ [[ 0 -eq 0 ]]
+ export describe_create=false
+ describe_create=false
+ [[ 0 -eq 0 ]]
+ export describe_delete=false
+ describe_delete=false
+ [[ 0 -eq 0 ]]
+ export enable_cloudwatch=false
+ enable_cloudwatch=false
+ [[ 0 -eq 0 ]]
+ export interactive_mode=false
+ interactive_mode=false
+ [[ 23 -gt 0 ]]
+ regex='(.*)\.(.*)\.(.*)'
+ [[ prototype.emvaldes.name =~ (.*)\.(.*)\.(.*) ]]
+ export cluster_name=prototype
+ cluster_name=prototype
+ export domain_name=emvaldes.name
+ domain_name=emvaldes.name
+ [[ 0 -eq 0 ]]
+ export debug_mode=false
+ debug_mode=false
+ [[ 4 -eq 0 ]]
+ [[ 0 -eq 0 ]]
+ export access_pubkey=/Users/emvaldes/.ssh/kubernetes.pub
+ access_pubkey=/Users/emvaldes/.ssh/kubernetes.pub
+ [[ 0 -eq 0 ]]
+ export default_profile=kubernetes
+ default_profile=kubernetes
+ default_user=emvaldes
+ [[ false == true ]]
+ debug_mode=3
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ 0 -eq 0 ]]
+ export default_region=us-east-1
+ default_region=us-east-1
+ [[ 0 -eq 0 ]]
+ export default_zones=us-east-1a,us-east-1b,us-east-1c
+ default_zones=us-east-1a,us-east-1b,us-east-1c
+ [[ '' == true ]]
+ [[ 9 -eq 0 ]]
+ [[ 13 -eq 0 ]]
+ export cluster_context=prototype.emvaldes.name
+ cluster_context=prototype.emvaldes.name
+ export docker_build=emvaldes.name/prototype
+ docker_build=emvaldes.name/prototype
+ export TARGET_DOCKERFILE=/tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ TARGET_DOCKERFILE=/tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ mkdir -p /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ case ${delete_cluster} in
+ script_request=create
++ dirname /tmp/clusters/k8s-cluster/logger/k8s-cluster.log
+ export CALLER_SCRIPT=/tmp/clusters/k8s-cluster/logger/prototype.emvaldes.name--create.log
+ CALLER_SCRIPT=/tmp/clusters/k8s-cluster/logger/prototype.emvaldes.name--create.log
+ cat /dev/null
+ logging_process 'Processing: prototype.emvaldes.name'
+ [[ -n Processing: prototype.emvaldes.name ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180350
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180350 = Processing: prototype.emvaldes.name'
+ return 0
+ [[ 0 -eq 0 ]]
+ fetch_awsaccount
+ tracking_process fetch_awsaccount
+ [[ -n fetch_awsaccount ]]
+ local func_params=fetch_awsaccount
+ local func_name=fetch_awsaccount
+ logging_process fetch_awsaccount
+ [[ -n fetch_awsaccount ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180350
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180350 = fetch_awsaccount'
+ return 0
+ return 0
++ services_console '--profile default             --region us-east-1             sts get-caller-identity             --query '\''Account'\'' --output text'
++ [[ -n --profile default             --region us-east-1             sts get-caller-identity             --query 'Account' --output text ]]
++ local 'command_params=--profile default             --region us-east-1             sts get-caller-identity             --query '\''Account'\'' --output text'
++ execute_command 'aws --profile default             --region us-east-1             sts get-caller-identity             --query '\''Account'\'' --output text'
++ [[ -n aws --profile default             --region us-east-1             sts get-caller-identity             --query 'Account' --output text ]]
+++ echo -e aws --profile default --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile default --region us-east-1 sts get-caller-identity --query '\''Account'\'' --output text'
++ logging_process aws --profile default --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180350
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180350 = aws' --profile default --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
++ return 0
++ eval aws --profile default --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
+++ aws --profile default --region us-east-1 sts get-caller-identity --query Account --output text
+ export AWS_ACCOUNT=123456789012
+ AWS_ACCOUNT=123456789012
+ [[ 12 -eq 0 ]]
+ print 123456789012
+ inline '123456789012\n'
+ echo -en '123456789012\n'
123456789012
+ return 0
+ [[ 12 -ne 12 ]]
+ create_iamgroup kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ tracking_process create_iamgroup kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ [[ -n create_iamgroup ]]
+ local 'func_params=create_iamgroup kubernetes arn:aws:iam::aws:policy/AdministratorAccess'
+ local func_name=create_iamgroup
+ logging_process create_iamgroup kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ [[ -n create_iamgroup ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180351
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180351 = create_iamgroup' kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ return 0
+ return 0
+ [[ -n kubernetes ]]
+ local group_name=kubernetes
+ AWS_PROFILE=default
+ validate_iamgroup kubernetes
+ tracking_process validate_iamgroup kubernetes
+ [[ -n validate_iamgroup ]]
+ local 'func_params=validate_iamgroup kubernetes'
+ local func_name=validate_iamgroup
+ logging_process validate_iamgroup kubernetes
+ [[ -n validate_iamgroup ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180351
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180351 = validate_iamgroup' kubernetes
+ return 0
+ return 0
+ [[ -n kubernetes ]]
+ local group_name=kubernetes
+ display_message 'Validating IAM Group: kubernetes'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Validating IAM Group: kubernetes'
+ inline 'Validating IAM Group: kubernetes\n'
+ echo -en 'Validating IAM Group: kubernetes\n'
Validating IAM Group: kubernetes
++ services_console '--profile default                     iam get-group                     --group-name kubernetes                     --query '\''Group.GroupName'\''                     --output text'
+ local group_exists=kubernetes
+ [[ kubernetes != kubernetes ]]
+ return 0
+ local group_exists=0
+ case "${group_exists}" in
+ [[ -n arn:aws:iam::aws:policy/AdministratorAccess ]]
+ local policy_name=arn:aws:iam::aws:policy/AdministratorAccess
+ group_policy kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ tracking_process group_policy kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ [[ -n group_policy ]]
+ local 'func_params=group_policy kubernetes arn:aws:iam::aws:policy/AdministratorAccess'
+ local func_name=group_policy
+ logging_process group_policy kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ [[ -n group_policy ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180352
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180352 = group_policy' kubernetes arn:aws:iam::aws:policy/AdministratorAccess
+ return 0
+ return 0
+ [[ -n kubernetes ]]
+ [[ -n arn:aws:iam::aws:policy/AdministratorAccess ]]
+ local group_name=kubernetes
+ local policy_name=arn:aws:iam::aws:policy/AdministratorAccess
+ services_console '--profile default                 iam attach-group-policy                 --group-name kubernetes                 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess'
+ [[ -n --profile default                 iam attach-group-policy                 --group-name kubernetes                 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess ]]
+ local 'command_params=--profile default                 iam attach-group-policy                 --group-name kubernetes                 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess'
+ execute_command 'aws --profile default                 iam attach-group-policy                 --group-name kubernetes                 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess'
+ [[ -n aws --profile default                 iam attach-group-policy                 --group-name kubernetes                 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess ]]
++ echo -e aws --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess'
+ logging_process aws --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180352
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180352 = aws' --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
+ return 0
+ eval aws --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
++ aws --profile default iam attach-group-policy --group-name kubernetes --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
+ services_console '--profile default                 iam list-attached-group-policies                 --group-name kubernetes'
+ [[ -n --profile default                 iam list-attached-group-policies                 --group-name kubernetes ]]
+ local 'command_params=--profile default                 iam list-attached-group-policies                 --group-name kubernetes'
+ execute_command 'aws --profile default                 iam list-attached-group-policies                 --group-name kubernetes'
+ [[ -n aws --profile default                 iam list-attached-group-policies                 --group-name kubernetes ]]
++ echo -e aws --profile default iam list-attached-group-policies --group-name kubernetes
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default iam list-attached-group-policies --group-name kubernetes'
+ logging_process aws --profile default iam list-attached-group-policies --group-name kubernetes
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180354
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180354 = aws' --profile default iam list-attached-group-policies --group-name kubernetes
+ return 0
+ eval aws --profile default iam list-attached-group-policies --group-name kubernetes
++ aws --profile default iam list-attached-group-policies --group-name kubernetes
{
    "AttachedPolicies": [
        {
            "PolicyName": "AdministratorAccess",
            "PolicyArn": "arn:aws:iam::aws:policy/AdministratorAccess"
        }
    ]
}
+ return 0
+ return 0
+ create_iamuser kubernetes kubernetes
+ tracking_process create_iamuser kubernetes kubernetes
+ [[ -n create_iamuser ]]
+ local 'func_params=create_iamuser kubernetes kubernetes'
+ local func_name=create_iamuser
+ logging_process create_iamuser kubernetes kubernetes
+ [[ -n create_iamuser ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180355
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180355 = create_iamuser' kubernetes kubernetes
+ return 0
+ return 0
+ [[ -n kubernetes ]]
+ local user_name=kubernetes
+ AWS_PROFILE=default
+ validate_iamuser kubernetes
+ tracking_process validate_iamuser kubernetes
+ [[ -n validate_iamuser ]]
+ local 'func_params=validate_iamuser kubernetes'
+ local func_name=validate_iamuser
+ logging_process validate_iamuser kubernetes
+ [[ -n validate_iamuser ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180355
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180355 = validate_iamuser' kubernetes
+ return 0
+ return 0
+ [[ -n kubernetes ]]
+ local user_name=kubernetes
+ display_message 'Validating IAM User: kubernetes'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Validating IAM User: kubernetes'
+ inline 'Validating IAM User: kubernetes\n'
+ echo -en 'Validating IAM User: kubernetes\n'
Validating IAM User: kubernetes
++ services_console '--profile default                     iam get-user                     --user-name kubernetes                     --query '\''User.UserName'\''                     --output text'
+ local user_exists=kubernetes
+ [[ kubernetes != kubernetes ]]
+ return 0
+ local user_exists=0
+ case "${user_exists}" in
+ [[ -n kubernetes ]]
+ local group_name=kubernetes
+ services_console '--profile default                 iam add-user-to-group                 --user-name kubernetes                 --group-name kubernetes'
+ [[ -n --profile default                 iam add-user-to-group                 --user-name kubernetes                 --group-name kubernetes ]]
+ local 'command_params=--profile default                 iam add-user-to-group                 --user-name kubernetes                 --group-name kubernetes'
+ execute_command 'aws --profile default                 iam add-user-to-group                 --user-name kubernetes                 --group-name kubernetes'
+ [[ -n aws --profile default                 iam add-user-to-group                 --user-name kubernetes                 --group-name kubernetes ]]
++ echo -e aws --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes'
+ logging_process aws --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180356
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180356 = aws' --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes
+ return 0
+ eval aws --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes
++ aws --profile default iam add-user-to-group --user-name kubernetes --group-name kubernetes
+ services_console '--profile default                 iam get-group                 --group-name kubernetes'
+ [[ -n --profile default                 iam get-group                 --group-name kubernetes ]]
+ local 'command_params=--profile default                 iam get-group                 --group-name kubernetes'
+ execute_command 'aws --profile default                 iam get-group                 --group-name kubernetes'
+ [[ -n aws --profile default                 iam get-group                 --group-name kubernetes ]]
++ echo -e aws --profile default iam get-group --group-name kubernetes
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default iam get-group --group-name kubernetes'
+ logging_process aws --profile default iam get-group --group-name kubernetes
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180357
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180357 = aws' --profile default iam get-group --group-name kubernetes
+ return 0
+ eval aws --profile default iam get-group --group-name kubernetes
++ aws --profile default iam get-group --group-name kubernetes
{
    "Users": [
        {
            "Path": "/",
            "UserName": "kubernetes",
            "UserId": "AIDA2XV4BKOYCPXHQKTVU",
            "Arn": "arn:aws:iam::123456789012:user/kubernetes",
            "CreateDate": "2020-04-03T03:29:23+00:00"
        }
    ],
    "Group": {
        "Path": "/",
        "GroupName": "kubernetes",
        "GroupId": "AGPA2XV4BKOYH67DC5EXH",
        "Arn": "arn:aws:iam::123456789012:group/kubernetes",
        "CreateDate": "2020-04-03T03:27:48+00:00"
    }
}
+ services_console '--profile default         iam list-groups-for-user         --user-name kubernetes'
+ [[ -n --profile default         iam list-groups-for-user         --user-name kubernetes ]]
+ local 'command_params=--profile default         iam list-groups-for-user         --user-name kubernetes'
+ execute_command 'aws --profile default         iam list-groups-for-user         --user-name kubernetes'
+ [[ -n aws --profile default         iam list-groups-for-user         --user-name kubernetes ]]
++ echo -e aws --profile default iam list-groups-for-user --user-name kubernetes
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default iam list-groups-for-user --user-name kubernetes'
+ logging_process aws --profile default iam list-groups-for-user --user-name kubernetes
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180358
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180358 = aws' --profile default iam list-groups-for-user --user-name kubernetes
+ return 0
+ eval aws --profile default iam list-groups-for-user --user-name kubernetes
++ aws --profile default iam list-groups-for-user --user-name kubernetes
{
    "Groups": [
        {
            "Path": "/",
            "GroupName": "kubernetes",
            "GroupId": "AGPA2XV4BKOYH67DC5EXH",
            "Arn": "arn:aws:iam::123456789012:group/kubernetes",
            "CreateDate": "2020-04-03T03:27:48+00:00"
        }
    ]
}
+ return 0
+ k8s_env prototype emvaldes.name
+ tracking_process k8s_env prototype emvaldes.name
+ [[ -n k8s_env ]]
+ local 'func_params=k8s_env prototype emvaldes.name'
+ local func_name=k8s_env
+ logging_process k8s_env prototype emvaldes.name
+ [[ -n k8s_env ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180359
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180359 = k8s_env' prototype emvaldes.name
+ return 0
+ return 0
+ [[ 9 -gt 0 ]]
+ CLUSTER_NAME=prototype
+ [[ 13 -gt 0 ]]
+ DOMAIN_NAME=emvaldes.name
+ [[ 0 -gt 0 ]]
+ case "${DOMAIN_NAME}" in
+ export TARGET_PATH=/tmp/clusters/k8s-cluster/configs
+ TARGET_PATH=/tmp/clusters/k8s-cluster/configs
+ mkdir -p /tmp/clusters/k8s-cluster/configs
+ [[ 9 -eq 0 ]]
+ export AWS_PROFILE=kubernetes
+ AWS_PROFILE=kubernetes
+ export AWS_DEFAULT_PROFILE=kubernetes
+ AWS_DEFAULT_PROFILE=kubernetes
+ export ACCOUNT_NUMBER=123456789012
+ ACCOUNT_NUMBER=123456789012
+ export TARGET_DOMAIN=emvaldes.name
+ TARGET_DOMAIN=emvaldes.name
+ export MASTER_ZONES=us-east-1a,us-east-1b,us-east-1c
+ MASTER_ZONES=us-east-1a,us-east-1b,us-east-1c
+ export NODE_ZONES=us-east-1a,us-east-1b,us-east-1c
+ NODE_ZONES=us-east-1a,us-east-1b,us-east-1c
+ export MASTER_SIZE=t3a.xlarge
+ MASTER_SIZE=t3a.xlarge
+ export NODE_SIZE=t3a.large
+ NODE_SIZE=t3a.large
+ export S3_BUCKET_NAME=kubernetes-states--123456789012
+ S3_BUCKET_NAME=kubernetes-states--123456789012
+ [[ true == true ]]
+ display_message 'Exporting prototype.emvaldes.name: ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Exporting prototype.emvaldes.name: ...'
+ inline 'Exporting prototype.emvaldes.name: ...\n'
+ echo -en 'Exporting prototype.emvaldes.name: ...\n'
Exporting prototype.emvaldes.name: ...
+ display_message 'Environment:
      SSH Public Key:      id_rsa.pub
      AWS Profile:         kubernetes
      AWS Default Profile: kubernetes
      AWS Account Number:  123456789012
      Target TLDN:         emvaldes.name
      Master-Node Size:    t3a.xlarge
      Master-Node Zones:   us-east-1a,us-east-1b,us-east-1c
      Cluster Nodes Size:  t3a.large
      Cluster Nodes Zones: us-east-1a,us-east-1b,us-east-1c
      S3 Bucket Name:      kubernetes-states--123456789012'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Environment:
      SSH Public Key:      id_rsa.pub
      AWS Profile:         kubernetes
      AWS Default Profile: kubernetes
      AWS Account Number:  123456789012
      Target TLDN:         emvaldes.name
      Master-Node Size:    t3a.xlarge
      Master-Node Zones:   us-east-1a,us-east-1b,us-east-1c
      Cluster Nodes Size:  t3a.large
      Cluster Nodes Zones: us-east-1a,us-east-1b,us-east-1c
      S3 Bucket Name:      kubernetes-states--123456789012'
+ inline 'Environment:
      SSH Public Key:      id_rsa.pub
      AWS Profile:         kubernetes
      AWS Default Profile: kubernetes
      AWS Account Number:  123456789012
      Target TLDN:         emvaldes.name
      Master-Node Size:    t3a.xlarge
      Master-Node Zones:   us-east-1a,us-east-1b,us-east-1c
      Cluster Nodes Size:  t3a.large
      Cluster Nodes Zones: us-east-1a,us-east-1b,us-east-1c
      S3 Bucket Name:      kubernetes-states--123456789012\n'
+ echo -en 'Environment:
      SSH Public Key:      id_rsa.pub
      AWS Profile:         kubernetes
      AWS Default Profile: kubernetes
      AWS Account Number:  123456789012
      Target TLDN:         emvaldes.name
      Master-Node Size:    t3a.xlarge
      Master-Node Zones:   us-east-1a,us-east-1b,us-east-1c
      Cluster Nodes Size:  t3a.large
      Cluster Nodes Zones: us-east-1a,us-east-1b,us-east-1c
      S3 Bucket Name:      kubernetes-states--123456789012\n'
Environment:
      SSH Public Key:      id_rsa.pub
      AWS Profile:         kubernetes
      AWS Default Profile: kubernetes
      AWS Account Number:  123456789012
      Target TLDN:         emvaldes.name
      Master-Node Size:    t3a.xlarge
      Master-Node Zones:   us-east-1a,us-east-1b,us-east-1c
      Cluster Nodes Size:  t3a.large
      Cluster Nodes Zones: us-east-1a,us-east-1b,us-east-1c
      S3 Bucket Name:      kubernetes-states--123456789012
+ k8s_vars
+ tracking_process k8s_vars
+ [[ -n k8s_vars ]]
+ local func_params=k8s_vars
+ local func_name=k8s_vars
+ logging_process k8s_vars
+ [[ -n k8s_vars ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180359
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180359 = k8s_vars'
+ return 0
+ return 0
+ export AWS_DEFAULT_PROFILE=kubernetes
+ AWS_DEFAULT_PROFILE=kubernetes
+ export AWS_CONFIG_FILE=/Users/emvaldes/.aws/config
+ AWS_CONFIG_FILE=/Users/emvaldes/.aws/config
+ export AWS_DEFAULT_OUTPUT=json
+ AWS_DEFAULT_OUTPUT=json
+ export AWS_DEFAULT_REGION=us-east-1
+ AWS_DEFAULT_REGION=us-east-1
+ export AWS_SHARED_CREDENTIALS_FILE=/Users/emvaldes/.aws/credentials
+ AWS_SHARED_CREDENTIALS_FILE=/Users/emvaldes/.aws/credentials
+ export 'PATH=/usr/local/bin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/Users/emvaldes/Library/Python/3.8/bin:/opt/local/bin:/opt/local/sbin:/Users/emvaldes/bin:/Users/emvaldes/etc:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/Apple/usr/bin:/usr/local/Cellar/python/3.7.4/bin:/Users/emvaldes/Library/Python/3.7/bin:/Users/emvaldes/go/bin'
+ PATH='/usr/local/bin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/Users/emvaldes/Library/Python/3.8/bin:/opt/local/bin:/opt/local/sbin:/Users/emvaldes/bin:/Users/emvaldes/etc:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/Apple/usr/bin:/usr/local/Cellar/python/3.7.4/bin:/Users/emvaldes/Library/Python/3.7/bin:/Users/emvaldes/go/bin'
+ export KOPS_CLUSTER_NAME=prototype.emvaldes.name
+ KOPS_CLUSTER_NAME=prototype.emvaldes.name
+ export KOPS_STATE_STORE=s3://kubernetes-states--123456789012
+ KOPS_STATE_STORE=s3://kubernetes-states--123456789012
+ export KOPS_FEATURE_FLAGS=SpecOverrideFlag
+ KOPS_FEATURE_FLAGS=SpecOverrideFlag
+ export KUBERNETES_PROVIDER=aws
+ KUBERNETES_PROVIDER=aws
+ [[ true == true ]]
+ display_message 'AWS Configurations
      AWS Default Region: us-east-1
      Default Profile:    kubernetes
      Config File:        /Users/emvaldes/.aws/config
      Default Output:     json
      Default Region:     us-east-1
      SAML2 AWS Profile:  devops
      Shared Credentials: /Users/emvaldes/.aws/credentials
      Availability Zones: us-east-1a,us-east-1b,us-east-1c'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'AWS Configurations
      AWS Default Region: us-east-1
      Default Profile:    kubernetes
      Config File:        /Users/emvaldes/.aws/config
      Default Output:     json
      Default Region:     us-east-1
      SAML2 AWS Profile:  devops
      Shared Credentials: /Users/emvaldes/.aws/credentials
      Availability Zones: us-east-1a,us-east-1b,us-east-1c'
+ inline 'AWS Configurations
      AWS Default Region: us-east-1
      Default Profile:    kubernetes
      Config File:        /Users/emvaldes/.aws/config
      Default Output:     json
      Default Region:     us-east-1
      SAML2 AWS Profile:  devops
      Shared Credentials: /Users/emvaldes/.aws/credentials
      Availability Zones: us-east-1a,us-east-1b,us-east-1c\n'
+ echo -en 'AWS Configurations
      AWS Default Region: us-east-1
      Default Profile:    kubernetes
      Config File:        /Users/emvaldes/.aws/config
      Default Output:     json
      Default Region:     us-east-1
      SAML2 AWS Profile:  devops
      Shared Credentials: /Users/emvaldes/.aws/credentials
      Availability Zones: us-east-1a,us-east-1b,us-east-1c\n'
AWS Configurations
      AWS Default Region: us-east-1
      Default Profile:    kubernetes
      Config File:        /Users/emvaldes/.aws/config
      Default Output:     json
      Default Region:     us-east-1
      SAML2 AWS Profile:  devops
      Shared Credentials: /Users/emvaldes/.aws/credentials
      Availability Zones: us-east-1a,us-east-1b,us-east-1c
+ display_message 'KOPS Configurations
      KOPS Cluster Name:   prototype.emvaldes.name
      KOPS State Store:    s3://kubernetes-states--123456789012
      KOPS Feature Flags:  SpecOverrideFlag
      Kubernetes Provider: aws'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'KOPS Configurations
      KOPS Cluster Name:   prototype.emvaldes.name
      KOPS State Store:    s3://kubernetes-states--123456789012
      KOPS Feature Flags:  SpecOverrideFlag
      Kubernetes Provider: aws'
+ inline 'KOPS Configurations
      KOPS Cluster Name:   prototype.emvaldes.name
      KOPS State Store:    s3://kubernetes-states--123456789012
      KOPS Feature Flags:  SpecOverrideFlag
      Kubernetes Provider: aws\n'
+ echo -en 'KOPS Configurations
      KOPS Cluster Name:   prototype.emvaldes.name
      KOPS State Store:    s3://kubernetes-states--123456789012
      KOPS Feature Flags:  SpecOverrideFlag
      Kubernetes Provider: aws\n'
KOPS Configurations
      KOPS Cluster Name:   prototype.emvaldes.name
      KOPS State Store:    s3://kubernetes-states--123456789012
      KOPS Feature Flags:  SpecOverrideFlag
      Kubernetes Provider: aws
+ return 0
+ return 0
+ export configs_path=/tmp/clusters/configs
+ configs_path=/tmp/clusters/configs
+ mkdir -p /tmp/clusters/configs
+ export KOPS_STATE_BACKUP=/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype
+ KOPS_STATE_BACKUP=/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype
+ mkdir -p /Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype
+ export KUBECONFIG=/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config
+ KUBECONFIG=/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config
+ touch /Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config
+ export service_platform=k8s-ec2
+ service_platform=k8s-ec2
++ services_console '--profile kubernetes             --region us-east-1             sts get-caller-identity             --query '\''Account'\''             --output text'
++ [[ -n --profile kubernetes             --region us-east-1             sts get-caller-identity             --query 'Account'             --output text ]]
++ local 'command_params=--profile kubernetes             --region us-east-1             sts get-caller-identity             --query '\''Account'\''             --output text'
++ execute_command 'aws --profile kubernetes             --region us-east-1             sts get-caller-identity             --query '\''Account'\''             --output text'
++ [[ -n aws --profile kubernetes             --region us-east-1             sts get-caller-identity             --query 'Account'             --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 sts get-caller-identity --query '\''Account'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180359
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180359 = aws' --profile kubernetes --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 sts get-caller-identity --query ''\''Account'\''' --output text
+++ aws --profile kubernetes --region us-east-1 sts get-caller-identity --query Account --output text
+ export account_number=123456789012
+ account_number=123456789012
+ [[ false == true ]]
+ [[ true == true ]]
+ enable_cloudwatch=true
+ deploy_prometheus=true
+ deploy_dashboard=true
+ deploy_prototype=true
+ describe_cluster=true
+ continue_process 'Deploy Kubernetes AWS-Cluster (Y/n) ?: '
+ [[ 39 -eq 0 ]]
+ message='Deploy Kubernetes AWS-Cluster (Y/n) ?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ [[ true == true ]]
+ route53_configs
+ tracking_process route53_configs
+ [[ -n route53_configs ]]
+ local func_params=route53_configs
+ local func_name=route53_configs
+ logging_process route53_configs
+ [[ -n route53_configs ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180400
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180400 = route53_configs'
+ return 0
+ return 0
+ display_message 'Inquiring emvaldes.name Name Servers:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Inquiring emvaldes.name Name Servers:'
+ inline 'Inquiring emvaldes.name Name Servers:\n'
+ echo -en 'Inquiring emvaldes.name Name Servers:\n'
Inquiring emvaldes.name Name Servers:
+ host -t NS emvaldes.name
emvaldes.name name server ns-1638.awsdns-12.co.uk.
emvaldes.name name server ns-748.awsdns-29.net.
emvaldes.name name server ns-1311.awsdns-35.org.
emvaldes.name name server ns-134.awsdns-16.com.
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Inquiring emvaldes.name SOA:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Inquiring emvaldes.name SOA:'
+ inline 'Inquiring emvaldes.name SOA:\n'
+ echo -en 'Inquiring emvaldes.name SOA:\n'
Inquiring emvaldes.name SOA:
+ host -t SOA emvaldes.name
emvaldes.name has SOA record ns-134.awsdns-16.com. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ create_hostedzone prototype.emvaldes.name
+ tracking_process create_hostedzone prototype.emvaldes.name
+ [[ -n create_hostedzone ]]
+ local 'func_params=create_hostedzone prototype.emvaldes.name'
+ local func_name=create_hostedzone
+ logging_process create_hostedzone prototype.emvaldes.name
+ [[ -n create_hostedzone ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180401
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180401 = create_hostedzone' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n '' ]]
+ validate_hostrecord prototype.emvaldes.name
+ tracking_process validate_hostrecord prototype.emvaldes.name
+ [[ -n validate_hostrecord ]]
+ local 'func_params=validate_hostrecord prototype.emvaldes.name'
+ local func_name=validate_hostrecord
+ logging_process validate_hostrecord prototype.emvaldes.name
+ [[ -n validate_hostrecord ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180401
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180401 = validate_hostrecord' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ ! -z prototype.emvaldes.name ]]
++ inline prototype.emvaldes.name
++ echo -en prototype.emvaldes.name
++ tr '[[:upper:]]' '[[:lower:]]'
++ sed -e 's|\([[:punct:]]\)\{1,\}|.|g' -e 's|^\(\.\)\(.*\)\(\.$\)|\2|' -e 's|\.$||'
+ export route53_hostrecord=prototype.emvaldes.name
+ route53_hostrecord=prototype.emvaldes.name
+ return 0
+ local hostedzone_name=prototype.emvaldes.name
+ [[ -n '' ]]
+ hostedzone_comment='Kubernetes Cluster HostedZone'
+ display_message 'Creating Route53 Hosted-Zone [prototype.emvaldes.name] ( Kubernetes Cluster HostedZone ) ... '
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Creating Route53 Hosted-Zone [prototype.emvaldes.name] ( Kubernetes Cluster HostedZone ) ... '
+ inline 'Creating Route53 Hosted-Zone [prototype.emvaldes.name] ( Kubernetes Cluster HostedZone ) ... \n'
+ echo -en 'Creating Route53 Hosted-Zone [prototype.emvaldes.name] ( Kubernetes Cluster HostedZone ) ... \n'
Creating Route53 Hosted-Zone [prototype.emvaldes.name] ( Kubernetes Cluster HostedZone ) ...
+ hostedzone_exists prototype.emvaldes.name
+ tracking_process hostedzone_exists prototype.emvaldes.name
+ [[ -n hostedzone_exists ]]
+ local 'func_params=hostedzone_exists prototype.emvaldes.name'
+ local func_name=hostedzone_exists
+ logging_process hostedzone_exists prototype.emvaldes.name
+ [[ -n hostedzone_exists ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180401
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180401 = hostedzone_exists' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n '' ]]
+ local hostedzone_name=prototype.emvaldes.name
+ [[ -z '' ]]
+ local verbose=true
+ [[ true == true ]]
+ display_message 'Validating Route53 Hosted-Zone [prototype.emvaldes.name] ... '
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Validating Route53 Hosted-Zone [prototype.emvaldes.name] ... '
+ inline 'Validating Route53 Hosted-Zone [prototype.emvaldes.name] ... \n'
+ echo -en 'Validating Route53 Hosted-Zone [prototype.emvaldes.name] ... \n'
Validating Route53 Hosted-Zone [prototype.emvaldes.name] ...
++ services_console '--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ [[ -n --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Name'             --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ [[ -n aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Name'             --output text ]]
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++ echo -e aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180401
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180401 = aws' --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Name' --output text
+ local target_hostedzone=
+ [[ '' == \p\r\o\t\o\t\y\p\e\.\e\m\v\a\l\d\e\s\.\n\a\m\e\. ]]
+ return 1
+ local result=1
+ [[ 1 -gt 0 ]]
+++ date +%Y%m%d%H%M%S
++ services_console '--profile kubernetes                       --region us-east-1                       route53 create-hosted-zone                       --name prototype.emvaldes.name                       --caller-reference 20200812180402                       --hosted-zone-config Comment='\''Kubernetes Cluster HostedZone'\'''
++ [[ -n --profile kubernetes                       --region us-east-1                       route53 create-hosted-zone                       --name prototype.emvaldes.name                       --caller-reference 20200812180402                       --hosted-zone-config Comment='Kubernetes Cluster HostedZone' ]]
++ local 'command_params=--profile kubernetes                       --region us-east-1                       route53 create-hosted-zone                       --name prototype.emvaldes.name                       --caller-reference 20200812180402                       --hosted-zone-config Comment='\''Kubernetes Cluster HostedZone'\'''
++ execute_command 'aws --profile kubernetes                       --region us-east-1                       route53 create-hosted-zone                       --name prototype.emvaldes.name                       --caller-reference 20200812180402                       --hosted-zone-config Comment='\''Kubernetes Cluster HostedZone'\'''
++ [[ -n aws --profile kubernetes                       --region us-east-1                       route53 create-hosted-zone                       --name prototype.emvaldes.name                       --caller-reference 20200812180402                       --hosted-zone-config Comment='Kubernetes Cluster HostedZone' ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config 'Comment='\''Kubernetes' Cluster 'HostedZone'\'''
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config Comment='\''Kubernetes Cluster HostedZone'\'''
++ logging_process aws --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config 'Comment='\''Kubernetes' Cluster 'HostedZone'\'''
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180402
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180402 = aws' --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config 'Comment='\''Kubernetes' Cluster 'HostedZone'\'''
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config 'Comment='\''Kubernetes' Cluster 'HostedZone'\'''
+++ aws --profile kubernetes --region us-east-1 route53 create-hosted-zone --name prototype.emvaldes.name --caller-reference 20200812180402 --hosted-zone-config 'Comment=Kubernetes Cluster HostedZone'
+ local 'console_output={
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}'
+ print '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}'
+ python -m json.tool
+ inline '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}\n'
+ echo -en '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}\n'
{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}
++ print '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}'
++ jq .ChangeInfo.Id --raw-output
++ inline '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}\n'
++ echo -en '{
    "Location": "https://route53.amazonaws.com/2013-04-01/hostedzone/Z078482910DDL61ZGZW9V",
    "HostedZone": {
        "Id": "/hostedzone/Z078482910DDL61ZGZW9V",
        "Name": "prototype.emvaldes.name.",
        "CallerReference": "20200812180402",
        "Config": {
            "Comment": "Kubernetes Cluster HostedZone",
            "PrivateZone": false
        },
        "ResourceRecordSetCount": 2
    },
    "ChangeInfo": {
        "Id": "/change/C0907599LI1BNMIFF32H",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:04:04.091000+00:00"
    },
    "DelegationSet": {
        "NameServers": [
            "ns-1403.awsdns-47.org",
            "ns-45.awsdns-05.com",
            "ns-552.awsdns-05.net",
            "ns-1955.awsdns-52.co.uk"
        ]
    }
}\n'
+ local hostedzone_changeinfo=/change/C0907599LI1BNMIFF32H
++ services_console '--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
++ local 'command_params=--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ execute_command 'aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180404
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180404 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
++ local 'command_params=--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ execute_command 'aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180420
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180420 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
++ local 'command_params=--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ execute_command 'aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180437
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180437 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
++ local 'command_params=--profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ execute_command 'aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query '\''ChangeInfo.Status'\''                       --output text'
++ [[ -n aws --profile kubernetes                       --region us-east-1                       route53 get-change                       --id /change/C0907599LI1BNMIFF32H                       --query 'ChangeInfo.Status'                       --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180454
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180454 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C0907599LI1BNMIFF32H --query ChangeInfo.Status --output text
+ [[ INSYNC != \I\N\S\Y\N\C ]]
+ print '. done! '
+ inline '. done! \n'
+ echo -en '. done! \n'
. done!
+ change_recordset prototype.emvaldes.name
+ tracking_process change_recordset prototype.emvaldes.name
+ [[ -n change_recordset ]]
+ local 'func_params=change_recordset prototype.emvaldes.name'
+ local func_name=change_recordset
+ logging_process change_recordset prototype.emvaldes.name
+ [[ -n change_recordset ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180456
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180456 = change_recordset' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n '' ]]
+ local hostedzone_name=prototype.emvaldes.name
+ [[ -z '' ]]
+ local change_action=CREATE
+ [[ -z '' ]]
+ local record_config=false
+ [[ -z '' ]]
+ local nameservers=false
+ [[ -z '' ]]
+ local verbose=true
+ [[ prototype.emvaldes.name == false ]]
+ [[ false == false ]]
+ local record_type=NS
+ local record_span=300
+ local target_hostedzone=emvaldes.name
+ local custom_domain=prototype.emvaldes.name
++ domain_recordsets prototype.emvaldes.name silent
++ tracking_process domain_recordsets prototype.emvaldes.name silent
++ [[ -n domain_recordsets ]]
++ tr '\n' ' '
++ local 'func_params=domain_recordsets prototype.emvaldes.name silent'
++ local func_name=domain_recordsets
++ logging_process domain_recordsets prototype.emvaldes.name silent
++ [[ -n domain_recordsets ]]
++ content=("${@}")
++ local content
++ sed -e 's|\([[:blank:]]\)\{1,\}||g'
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180456
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180456 = domain_recordsets' prototype.emvaldes.name silent
++ return 0
++ return 0
++ [[ -n '' ]]
++ local hostedzone_name=prototype.emvaldes.name
++ [[ -z silent ]]
++ local verbose=false
+++ tr '\n' ' '
+++ sed -e 's|\([[:blank:]]\)\{1,\}||g'
++++ hostedzone_index prototype.emvaldes.name silent
++++ tracking_process hostedzone_index prototype.emvaldes.name silent
++++ [[ -n hostedzone_index ]]
++++ local 'func_params=hostedzone_index prototype.emvaldes.name silent'
++++ local func_name=hostedzone_index
++++ logging_process hostedzone_index prototype.emvaldes.name silent
++++ [[ -n hostedzone_index ]]
++++ content=("${@}")
++++ local content
+++++ date +%Y%m%d%H%M%S
++++ local timestamp=20200812180456
++++ [[ 68 -eq 0 ]]
++++ [[ false == true ]]
++++ return 0
++++ return 0
++++ [[ -n '' ]]
++++ local hostedzone_name=prototype.emvaldes.name
++++ [[ -z silent ]]
++++ local verbose=false
++++ [[ false == true ]]
+++++ services_console '--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''             --output text'
+++++ [[ -n --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Id'             --output text ]]
+++++ local 'command_params=--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''             --output text'
+++++ execute_command 'aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''             --output text'
+++++ cut -d/ -f3
+++++ [[ -n aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name prototype.emvaldes.name             --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Id'             --output text ]]
++++++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++++++ echo -e aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''' --output text
+++++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query '\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\'' --output text'
+++++ logging_process aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''' --output text
+++++ [[ -n aws ]]
+++++ content=("${@}")
+++++ local content
++++++ date +%Y%m%d%H%M%S
+++++ local timestamp=20200812180456
+++++ [[ 68 -eq 0 ]]
+++++ [[ false == true ]]
+++++ return 0
+++++ eval aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query ''\''HostedZones[?Name==`prototype.emvaldes.name.`].Id'\''' --output text
++++++ aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name prototype.emvaldes.name --query 'HostedZones[?Name==`prototype.emvaldes.name.`].Id' --output text
++++ local target_index=Z078482910DDL61ZGZW9V
++++ [[ 21 -gt 0 ]]
++++ print Z078482910DDL61ZGZW9V
++++ inline 'Z078482910DDL61ZGZW9V\n'
++++ echo -en 'Z078482910DDL61ZGZW9V\n'
++++ return 0
+++ services_console '--profile kubernetes           --region us-east-1           route53 list-resource-record-sets           --hosted-zone-id Z078482910DDL61ZGZW9V           --query '\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ [[ -n --profile kubernetes           --region us-east-1           route53 list-resource-record-sets           --hosted-zone-id Z078482910DDL61ZGZW9V           --query 'ResourceRecordSets[?Type==`NS`].ResourceRecords[]' ]]
+++ local 'command_params=--profile kubernetes           --region us-east-1           route53 list-resource-record-sets           --hosted-zone-id Z078482910DDL61ZGZW9V           --query '\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ execute_command 'aws --profile kubernetes           --region us-east-1           route53 list-resource-record-sets           --hosted-zone-id Z078482910DDL61ZGZW9V           --query '\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ [[ -n aws --profile kubernetes           --region us-east-1           route53 list-resource-record-sets           --hosted-zone-id Z078482910DDL61ZGZW9V           --query 'ResourceRecordSets[?Type==`NS`].ResourceRecords[]' ]]
++++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++++ echo -e aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id Z078482910DDL61ZGZW9V --query ''\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id Z078482910DDL61ZGZW9V --query '\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ logging_process aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id Z078482910DDL61ZGZW9V --query ''\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
+++ [[ -n aws ]]
+++ content=("${@}")
+++ local content
++++ date +%Y%m%d%H%M%S
+++ local timestamp=20200812180457
+++ [[ 68 -eq 0 ]]
+++ [[ false == true ]]
+++ return 0
+++ eval aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id Z078482910DDL61ZGZW9V --query ''\''ResourceRecordSets[?Type==`NS`].ResourceRecords[]'\'''
++++ aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id Z078482910DDL61ZGZW9V --query 'ResourceRecordSets[?Type==`NS`].ResourceRecords[]'
++ local 'nameserver_records=[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]'
++ print '[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]'
++ inline '[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]\n'
++ echo -en '[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]\n'
++ [[ false == true ]]
++ return 0
+ local 'nameserver_records=[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]'
+ [[ 140 -gt 0 ]]
+ recordset_exists prototype.emvaldes.name
+ tracking_process recordset_exists prototype.emvaldes.name
+ [[ -n recordset_exists ]]
+ local 'func_params=recordset_exists prototype.emvaldes.name'
+ local func_name=recordset_exists
+ logging_process recordset_exists prototype.emvaldes.name
+ [[ -n recordset_exists ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180459
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180459 = recordset_exists' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n '' ]]
+ local recordset_name=prototype.emvaldes.name
+ [[ -z '' ]]
+ local verbose=true
+ [[ true == true ]]
+ print 'Route53 Record Set [prototype.emvaldes.name] ... '
+ inline 'Route53 Record Set [prototype.emvaldes.name] ... \n'
+ echo -en 'Route53 Record Set [prototype.emvaldes.name] ... \n'
Route53 Record Set [prototype.emvaldes.name] ...
+++ hostedzone_index emvaldes.name silent
+++ tracking_process hostedzone_index emvaldes.name silent
+++ [[ -n hostedzone_index ]]
+++ local 'func_params=hostedzone_index emvaldes.name silent'
+++ local func_name=hostedzone_index
+++ logging_process hostedzone_index emvaldes.name silent
+++ [[ -n hostedzone_index ]]
+++ content=("${@}")
+++ local content
++++ date +%Y%m%d%H%M%S
+++ local timestamp=20200812180459
+++ [[ 68 -eq 0 ]]
+++ [[ true == true ]]
+++ [[ 68 -gt 0 ]]
+++ echo -e '20200812180459 = hostedzone_index' emvaldes.name silent
+++ return 0
+++ return 0
+++ [[ -n '' ]]
+++ local hostedzone_name=emvaldes.name
+++ [[ -z silent ]]
+++ local verbose=false
+++ [[ false == true ]]
++++ services_console '--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ [[ -n --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query 'HostedZones[?Name==`emvaldes.name.`].Id'             --output text ]]
++++ cut -d/ -f3
++++ local 'command_params=--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ execute_command 'aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ [[ -n aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query 'HostedZones[?Name==`emvaldes.name.`].Id'             --output text ]]
+++++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++++ echo -e aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
++++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\'' --output text'
++++ logging_process aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
++++ [[ -n aws ]]
++++ content=("${@}")
++++ local content
+++++ date +%Y%m%d%H%M%S
++++ local timestamp=20200812180459
++++ [[ 68 -eq 0 ]]
++++ [[ false == true ]]
++++ return 0
++++ eval aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
+++++ aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query 'HostedZones[?Name==`emvaldes.name.`].Id' --output text
+++ local target_index=ZWP6121H1HTKX
+++ [[ 13 -gt 0 ]]
+++ print ZWP6121H1HTKX
+++ inline 'ZWP6121H1HTKX\n'
+++ echo -en 'ZWP6121H1HTKX\n'
+++ return 0
++ services_console '--profile kubernetes --region us-east-1             route53 list-resource-record-sets             --hosted-zone-id ZWP6121H1HTKX             --query '\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ [[ -n --profile kubernetes --region us-east-1             route53 list-resource-record-sets             --hosted-zone-id ZWP6121H1HTKX             --query 'ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'             --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1             route53 list-resource-record-sets             --hosted-zone-id ZWP6121H1HTKX             --query '\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1             route53 list-resource-record-sets             --hosted-zone-id ZWP6121H1HTKX             --query '\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''             --output text'
++ [[ -n aws --profile kubernetes --region us-east-1             route53 list-resource-record-sets             --hosted-zone-id ZWP6121H1HTKX             --query 'ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'             --output text ]]
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++ echo -e aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query ''\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query '\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query ''\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180500
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180500 = aws' --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query ''\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query ''\''ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 list-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --query 'ResourceRecordSets[?Name==`prototype.emvaldes.name.`].Name' --output text
+ local target_recordset=
+ [[ 0 -ne 0 ]]
+ record_status='does not exist! \n'
+ display_message 'Record Set prototype.emvaldes.name does not exist! \n'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Record Set prototype.emvaldes.name does not exist! \n'
+ inline 'Record Set prototype.emvaldes.name does not exist! \n\n'
+ echo -en 'Record Set prototype.emvaldes.name does not exist! \n\n'
Record Set prototype.emvaldes.name does not exist!

+ [[ 0 -eq 0 ]]
+ return 1
+ local result=1
+ case ${result} in
+ change_action=CREATE
+ change_comment=Creating
+++ hostedzone_index emvaldes.name silent
+++ tracking_process hostedzone_index emvaldes.name silent
+++ [[ -n hostedzone_index ]]
+++ local 'func_params=hostedzone_index emvaldes.name silent'
+++ local func_name=hostedzone_index
+++ logging_process hostedzone_index emvaldes.name silent
+++ [[ -n hostedzone_index ]]
+++ content=("${@}")
+++ local content
++++ date +%Y%m%d%H%M%S
+++ local timestamp=20200812180501
+++ [[ 68 -eq 0 ]]
+++ [[ true == true ]]
+++ [[ 68 -gt 0 ]]
+++ echo -e '20200812180501 = hostedzone_index' emvaldes.name silent
+++ return 0
+++ return 0
+++ [[ -n '' ]]
+++ local hostedzone_name=emvaldes.name
+++ [[ -z silent ]]
+++ local verbose=false
+++ [[ false == true ]]
++++ services_console '--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ [[ -n --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query 'HostedZones[?Name==`emvaldes.name.`].Id'             --output text ]]
++++ cut -d/ -f3
++++ local 'command_params=--profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ execute_command 'aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\''             --output text'
++++ [[ -n aws --profile kubernetes --region us-east-1             route53 list-hosted-zones-by-name             --dns-name emvaldes.name             --query 'HostedZones[?Name==`emvaldes.name.`].Id'             --output text ]]
+++++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++++ echo -e aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
++++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query '\''HostedZones[?Name==`emvaldes.name.`].Id'\'' --output text'
++++ logging_process aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
++++ [[ -n aws ]]
++++ content=("${@}")
++++ local content
+++++ date +%Y%m%d%H%M%S
++++ local timestamp=20200812180501
++++ [[ 68 -eq 0 ]]
++++ [[ false == true ]]
++++ return 0
++++ eval aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query ''\''HostedZones[?Name==`emvaldes.name.`].Id'\''' --output text
+++++ aws --profile kubernetes --region us-east-1 route53 list-hosted-zones-by-name --dns-name emvaldes.name --query 'HostedZones[?Name==`emvaldes.name.`].Id' --output text
+++ local target_index=ZWP6121H1HTKX
+++ [[ 13 -gt 0 ]]
+++ print ZWP6121H1HTKX
+++ inline 'ZWP6121H1HTKX\n'
+++ echo -en 'ZWP6121H1HTKX\n'
+++ return 0
++ services_console '--profile kubernetes --region us-east-1                     route53 change-resource-record-sets                     --hosted-zone-id ZWP6121H1HTKX                     --change-batch '\''{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ [[ -n --profile kubernetes --region us-east-1                     route53 change-resource-record-sets                     --hosted-zone-id ZWP6121H1HTKX                     --change-batch '{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}' ]]
++ local 'command_params=--profile kubernetes --region us-east-1                     route53 change-resource-record-sets                     --hosted-zone-id ZWP6121H1HTKX                     --change-batch '\''{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ execute_command 'aws --profile kubernetes --region us-east-1                     route53 change-resource-record-sets                     --hosted-zone-id ZWP6121H1HTKX                     --change-batch '\''{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ [[ -n aws --profile kubernetes --region us-east-1                     route53 change-resource-record-sets                     --hosted-zone-id ZWP6121H1HTKX                     --change-batch '{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}' ]]
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++ echo -e aws --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch ''\''{"Comment":"Creating' 'Record-Set","Changes":[{"Action":' '"CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type":' '"NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch '\''{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ logging_process aws --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch ''\''{"Comment":"Creating' 'Record-Set","Changes":[{"Action":' '"CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type":' '"NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180502
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180502 = aws' --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch ''\''{"Comment":"Creating' 'Record-Set","Changes":[{"Action":' '"CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type":' '"NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch ''\''{"Comment":"Creating' 'Record-Set","Changes":[{"Action":' '"CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type":' '"NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'\'''
+++ aws --profile kubernetes --region us-east-1 route53 change-resource-record-sets --hosted-zone-id ZWP6121H1HTKX --change-batch '{"Comment":"Creating Record-Set","Changes":[{"Action": "CREATE","ResourceRecordSet":{"Name":"prototype.emvaldes.name","Type": "NS","TTL":300,"ResourceRecords":[{"Value":"ns-1403.awsdns-47.org."},{"Value":"ns-45.awsdns-05.com."},{"Value":"ns-552.awsdns-05.net."},{"Value":"ns-1955.awsdns-52.co.uk."}]}}]}'
+ local 'console_output={
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}'
+ print '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}'
+ python -m json.tool
+ inline '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}\n'
+ echo -en '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}\n'
{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}
++ print '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}'
++ jq .ChangeInfo.Id --raw-output
++ inline '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}\n'
++ echo -en '{
    "ChangeInfo": {
        "Id": "/change/C01891275GDNP9J4RB87",
        "Status": "PENDING",
        "SubmittedAt": "2020-08-13T01:05:04.247000+00:00",
        "Comment": "Creating Record-Set"
    }
}\n'
+ local hostedzone_changeinfo=/change/C01891275GDNP9J4RB87
++ services_console '--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180504
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180504 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180520
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180520 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180537
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180537 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ChangeInfo.Status --output text
+ [[ PENDING != \I\N\S\Y\N\C ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ services_console '--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
++ local 'command_params=--profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ execute_command 'aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query '\''ChangeInfo.Status'\''                     --output text'
++ [[ -n aws --profile kubernetes --region us-east-1                     route53 get-change                     --id /change/C01891275GDNP9J4RB87                     --query 'ChangeInfo.Status'                     --output text ]]
+++ echo -e aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query '\''ChangeInfo.Status'\'' --output text'
++ logging_process aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812180554
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812180554 = aws' --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
++ return 0
++ eval aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ''\''ChangeInfo.Status'\''' --output text
+++ aws --profile kubernetes --region us-east-1 route53 get-change --id /change/C01891275GDNP9J4RB87 --query ChangeInfo.Status --output text
+ [[ INSYNC != \I\N\S\Y\N\C ]]
+ print '. done! '
+ inline '. done! \n'
+ echo -en '. done! \n'
. done!
+ return 0
+ return 0
+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ display_message 'Inquiring prototype.emvaldes.name Name Servers:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Inquiring prototype.emvaldes.name Name Servers:'
+ inline 'Inquiring prototype.emvaldes.name Name Servers:\n'
+ echo -en 'Inquiring prototype.emvaldes.name Name Servers:\n'
Inquiring prototype.emvaldes.name Name Servers:
+ host -t NS prototype.emvaldes.name
prototype.emvaldes.name name server ns-1955.awsdns-52.co.uk.
prototype.emvaldes.name name server ns-45.awsdns-05.com.
prototype.emvaldes.name name server ns-552.awsdns-05.net.
prototype.emvaldes.name name server ns-1403.awsdns-47.org.
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Inquiring prototype.emvaldes.name SOA:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Inquiring prototype.emvaldes.name SOA:'
+ inline 'Inquiring prototype.emvaldes.name SOA:\n'
+ echo -en 'Inquiring prototype.emvaldes.name SOA:\n'
Inquiring prototype.emvaldes.name SOA:
+ host -t SOA prototype.emvaldes.name
prototype.emvaldes.name has SOA record ns-1403.awsdns-47.org. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cluster_storage
+ tracking_process cluster_storage
+ [[ -n cluster_storage ]]
+ local func_params=cluster_storage
+ local func_name=cluster_storage
+ logging_process cluster_storage
+ [[ -n cluster_storage ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180613
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180613 = cluster_storage'
+ return 0
+ return 0
+ mkdir -p /tmp/clusters/k8s-cluster/configs
+ S3_BUCKET_POLICY=/tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
+ cat /dev/null
+ POLICY_ID=PolicyK8SS3Bucket
+ POLICY_STMT=StmtK8SS3Bucket
+ display_message 'Creating S3 Bucket: kubernetes-states--123456789012 ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Creating S3 Bucket: kubernetes-states--123456789012 ...'
+ inline 'Creating S3 Bucket: kubernetes-states--123456789012 ...\n'
+ echo -en 'Creating S3 Bucket: kubernetes-states--123456789012 ...\n'
Creating S3 Bucket: kubernetes-states--123456789012 ...
+ services_console 's3api create-bucket       --bucket kubernetes-states--123456789012       --region us-east-1'
+ [[ -n s3api create-bucket       --bucket kubernetes-states--123456789012       --region us-east-1 ]]
+ local 'command_params=s3api create-bucket       --bucket kubernetes-states--123456789012       --region us-east-1'
+ execute_command 'aws s3api create-bucket       --bucket kubernetes-states--123456789012       --region us-east-1'
+ [[ -n aws s3api create-bucket       --bucket kubernetes-states--123456789012       --region us-east-1 ]]
++ echo -e aws s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1'
+ logging_process aws s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180613
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180613 = aws' s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1
+ return 0
+ eval aws s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1
++ aws s3api create-bucket --bucket kubernetes-states--123456789012 --region us-east-1
{
    "Location": "/kubernetes-states--123456789012"
}
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Placing Bucket-Versioning Policy ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Placing Bucket-Versioning Policy ...'
+ inline 'Placing Bucket-Versioning Policy ...\n'
+ echo -en 'Placing Bucket-Versioning Policy ...\n'
Placing Bucket-Versioning Policy ...
+ services_console 's3api put-bucket-versioning       --bucket kubernetes-states--123456789012       --versioning-configuration Status=Enabled'
+ [[ -n s3api put-bucket-versioning       --bucket kubernetes-states--123456789012       --versioning-configuration Status=Enabled ]]
+ local 'command_params=s3api put-bucket-versioning       --bucket kubernetes-states--123456789012       --versioning-configuration Status=Enabled'
+ execute_command 'aws s3api put-bucket-versioning       --bucket kubernetes-states--123456789012       --versioning-configuration Status=Enabled'
+ [[ -n aws s3api put-bucket-versioning       --bucket kubernetes-states--123456789012       --versioning-configuration Status=Enabled ]]
++ echo -e aws s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled'
+ logging_process aws s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180614
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180614 = aws' s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled
+ return 0
+ eval aws s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled
++ aws s3api put-bucket-versioning --bucket kubernetes-states--123456789012 --versioning-configuration Status=Enabled
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Configuring Public-Access settings ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Configuring Public-Access settings ...'
+ inline 'Configuring Public-Access settings ...\n'
+ echo -en 'Configuring Public-Access settings ...\n'
Configuring Public-Access settings ...
+ services_console 's3api put-public-access-block       --bucket kubernetes-states--123456789012       --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true'
+ [[ -n s3api put-public-access-block       --bucket kubernetes-states--123456789012       --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true ]]
+ local 'command_params=s3api put-public-access-block       --bucket kubernetes-states--123456789012       --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true'
+ execute_command 'aws s3api put-public-access-block       --bucket kubernetes-states--123456789012       --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true'
+ [[ -n aws s3api put-public-access-block       --bucket kubernetes-states--123456789012       --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true ]]
++ echo -e aws s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true'
+ logging_process aws s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180616
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180616 = aws' s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true
+ return 0
+ eval aws s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true
++ aws s3api put-public-access-block --bucket kubernetes-states--123456789012 --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=true,RestrictPublicBuckets=true
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ inline '{"Id":"Policy{{POLICY_ID}}","Statement":[{"Action":"s3:*","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::{{ACCOUNT_NUMBER}}:user/{{AWS_PROFILE}}"},"Resource":"arn:aws:s3:::{{S3_BUCKET_NAME}}/*","Sid":"Stmt{{POLICY_STMT}}"}],"Version":"2012-10-17"}'
+ echo -en '{"Id":"Policy{{POLICY_ID}}","Statement":[{"Action":"s3:*","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::{{ACCOUNT_NUMBER}}:user/{{AWS_PROFILE}}"},"Resource":"arn:aws:s3:::{{S3_BUCKET_NAME}}/*","Sid":"Stmt{{POLICY_STMT}}"}],"Version":"2012-10-17"}'
+ sed -i '' -e 's|{{POLICY_ID}}|PolicyK8SS3Bucket|g' -e 's|{{USER}}|emvaldes|g' -e 's|{{AWS_PROFILE}}|kubernetes|g' -e 's|{{ACCOUNT_NUMBER}}|123456789012|g' -e 's|{{S3_BUCKET_NAME}}|kubernetes-states--123456789012|g' -e 's|{{POLICY_STMT}}|StmtK8SS3Bucket|g' /tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Applying S3 Bucket Policy ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Applying S3 Bucket Policy ...'
+ inline 'Applying S3 Bucket Policy ...\n'
+ echo -en 'Applying S3 Bucket Policy ...\n'
Applying S3 Bucket Policy ...
+ services_console 's3api put-bucket-policy       --bucket kubernetes-states--123456789012       --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json'
+ [[ -n s3api put-bucket-policy       --bucket kubernetes-states--123456789012       --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json ]]
+ local 'command_params=s3api put-bucket-policy       --bucket kubernetes-states--123456789012       --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json'
+ execute_command 'aws s3api put-bucket-policy       --bucket kubernetes-states--123456789012       --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json'
+ [[ -n aws s3api put-bucket-policy       --bucket kubernetes-states--123456789012       --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json ]]
++ echo -e aws s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json'
+ logging_process aws s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180617
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180617 = aws' s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
+ return 0
+ eval aws s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
++ aws s3api put-bucket-policy --bucket kubernetes-states--123456789012 --policy file:///tmp/clusters/k8s-cluster/configs/s3bucket-policy.json
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ create_k8scluster
+ tracking_process create_k8scluster
+ [[ -n create_k8scluster ]]
+ local func_params=create_k8scluster
+ local func_name=create_k8scluster
+ logging_process create_k8scluster
+ [[ -n create_k8scluster ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180618
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180618 = create_k8scluster'
+ return 0
+ return 0
+ display_message 'Creating Kubernetes Cluster: prototype.emvaldes.name ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Creating Kubernetes Cluster: prototype.emvaldes.name ...'
+ inline 'Creating Kubernetes Cluster: prototype.emvaldes.name ...\n'
+ echo -en 'Creating Kubernetes Cluster: prototype.emvaldes.name ...\n'
Creating Kubernetes Cluster: prototype.emvaldes.name ...
+ dig prototype.emvaldes.name

; <<>> DiG 9.10.6 <<>> prototype.emvaldes.name
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 53151
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;prototype.emvaldes.name.	IN	A

;; AUTHORITY SECTION:
prototype.emvaldes.name. 900	IN	SOA	ns-1403.awsdns-47.org. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400

;; Query time: 219 msec
;; SERVER: 2001:578:3f::30#53(2001:578:3f::30)
;; WHEN: Wed Aug 12 18:06:18 MST 2020
;; MSG SIZE  rcvd: 126

+ kops_console 'create cluster     --name=prototype.emvaldes.name     --dns-zone=prototype.emvaldes.name     --state=s3://kubernetes-states--123456789012     --zones=us-east-1a,us-east-1b,us-east-1c     --master-zones=us-east-1a,us-east-1b,us-east-1c     --node-count=3     --node-size=t3a.large     --master-count=3     --master-size=t3a.xlarge     --networking=weave     --topology=public     --bastion=false     --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub     --v 1     --yes'
+ [[ -n create cluster     --name=prototype.emvaldes.name     --dns-zone=prototype.emvaldes.name     --state=s3://kubernetes-states--123456789012     --zones=us-east-1a,us-east-1b,us-east-1c     --master-zones=us-east-1a,us-east-1b,us-east-1c     --node-count=3     --node-size=t3a.large     --master-count=3     --master-size=t3a.xlarge     --networking=weave     --topology=public     --bastion=false     --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub     --v 1     --yes ]]
+ local 'command_params=create cluster     --name=prototype.emvaldes.name     --dns-zone=prototype.emvaldes.name     --state=s3://kubernetes-states--123456789012     --zones=us-east-1a,us-east-1b,us-east-1c     --master-zones=us-east-1a,us-east-1b,us-east-1c     --node-count=3     --node-size=t3a.large     --master-count=3     --master-size=t3a.xlarge     --networking=weave     --topology=public     --bastion=false     --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub     --v 1     --yes'
+ execute_command 'kops create cluster     --name=prototype.emvaldes.name     --dns-zone=prototype.emvaldes.name     --state=s3://kubernetes-states--123456789012     --zones=us-east-1a,us-east-1b,us-east-1c     --master-zones=us-east-1a,us-east-1b,us-east-1c     --node-count=3     --node-size=t3a.large     --master-count=3     --master-size=t3a.xlarge     --networking=weave     --topology=public     --bastion=false     --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub     --v 1     --yes'
+ [[ -n kops create cluster     --name=prototype.emvaldes.name     --dns-zone=prototype.emvaldes.name     --state=s3://kubernetes-states--123456789012     --zones=us-east-1a,us-east-1b,us-east-1c     --master-zones=us-east-1a,us-east-1b,us-east-1c     --node-count=3     --node-size=t3a.large     --master-count=3     --master-size=t3a.xlarge     --networking=weave     --topology=public     --bastion=false     --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub     --v 1     --yes ]]
++ echo -e kops create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kops create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes'
+ logging_process kops create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes
+ [[ -n kops ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812180618
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812180618 = kops' create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes
+ return 0
+ eval kops create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes
++ kops create cluster --name=prototype.emvaldes.name --dns-zone=prototype.emvaldes.name --state=s3://kubernetes-states--123456789012 --zones=us-east-1a,us-east-1b,us-east-1c --master-zones=us-east-1a,us-east-1b,us-east-1c --node-count=3 --node-size=t3a.large --master-count=3 --master-size=t3a.xlarge --networking=weave --topology=public --bastion=false --ssh-public-key /Users/emvaldes/.ssh/kubernetes.pub --v 1 --yes
I0812 18:06:19.738629    2891 featureflag.go:154] FeatureFlag "SpecOverrideFlag"=true
I0812 18:06:19.761324    2891 create_cluster.go:1547] Using SSH public key: /Users/emvaldes/.ssh/kubernetes.pub
I0812 18:06:21.519564    2891 create_cluster.go:557] Inferred --cloud=aws from zone "us-east-1a"
I0812 18:06:21.871909    2891 subnets.go:184] Assigned CIDR 172.20.32.0/19 to subnet us-east-1a
I0812 18:06:21.871960    2891 subnets.go:184] Assigned CIDR 172.20.64.0/19 to subnet us-east-1b
I0812 18:06:21.871983    2891 subnets.go:184] Assigned CIDR 172.20.96.0/19 to subnet us-east-1c
I0812 18:06:22.176541    2891 kubelet.go:137] Cloud Provider: aws
I0812 18:06:22.176990    2891 kubelet.go:137] Cloud Provider: aws
I0812 18:06:22.177583    2891 spec_builder.go:49] options: {
  "channel": "stable",
  "configBase": "s3://kubernetes-states--123456789012/prototype.emvaldes.name",
  "cloudProvider": "aws",
  "containerRuntime": "docker",
  "kubernetesVersion": "1.18.6",
  "subnets": [
    {
      "name": "us-east-1a",
      "cidr": "172.20.32.0/19",
      "zone": "us-east-1a",
      "type": "Public"
    },
    {
      "name": "us-east-1b",
      "cidr": "172.20.64.0/19",
      "zone": "us-east-1b",
      "type": "Public"
    },
    {
      "name": "us-east-1c",
      "cidr": "172.20.96.0/19",
      "zone": "us-east-1c",
      "type": "Public"
    }
  ],
  "masterPublicName": "api.prototype.emvaldes.name",
  "masterInternalName": "api.internal.prototype.emvaldes.name",
  "networkCIDR": "172.20.0.0/16",
  "topology": {
    "masters": "public",
    "nodes": "public",
    "dns": {
      "type": "Public"
    }
  },
  "secretStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/secrets",
  "keyStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/pki",
  "configStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name",
  "dnsZone": "prototype.emvaldes.name",
  "clusterDNSDomain": "cluster.local",
  "serviceClusterIPRange": "100.64.0.0/13",
  "nonMasqueradeCIDR": "100.64.0.0/10",
  "sshAccess": [
    "0.0.0.0/0"
  ],
  "kubernetesApiAccess": [
    "0.0.0.0/0"
  ],
  "etcdClusters": [
    {
      "name": "main",
      "provider": "Manager",
      "etcdMembers": [
        {
          "name": "a",
          "instanceGroup": "master-us-east-1a"
        },
        {
          "name": "b",
          "instanceGroup": "master-us-east-1b"
        },
        {
          "name": "c",
          "instanceGroup": "master-us-east-1c"
        }
      ],
      "enableEtcdTLS": true,
      "enableTLSAuth": true,
      "version": "3.4.3",
      "backups": {
        "backupStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/backups/etcd/main"
      },
      "manager": {},
      "memoryRequest": "100Mi",
      "cpuRequest": "200m"
    },
    {
      "name": "events",
      "provider": "Manager",
      "etcdMembers": [
        {
          "name": "a",
          "instanceGroup": "master-us-east-1a"
        },
        {
          "name": "b",
          "instanceGroup": "master-us-east-1b"
        },
        {
          "name": "c",
          "instanceGroup": "master-us-east-1c"
        }
      ],
      "enableEtcdTLS": true,
      "enableTLSAuth": true,
      "version": "3.4.3",
      "backups": {
        "backupStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/backups/etcd/events"
      },
      "manager": {},
      "memoryRequest": "100Mi",
      "cpuRequest": "100m"
    }
  ],
  "containerd": {
    "configOverride": "disabled_plugins = [\"cri\"]\n",
    "logLevel": "info",
    "version": "1.2.13"
  },
  "docker": {
    "ipMasq": false,
    "ipTables": false,
    "logDriver": "json-file",
    "logLevel": "warn",
    "logOpt": [
      "max-size=10m",
      "max-file=5"
    ],
    "storage": "overlay2,overlay,aufs",
    "version": "19.03.11"
  },
  "kubeDNS": {
    "cacheMaxSize": 1000,
    "cacheMaxConcurrent": 150,
    "domain": "cluster.local",
    "replicas": 2,
    "serverIP": "100.64.0.10",
    "memoryRequest": "70Mi",
    "cpuRequest": "100m",
    "memoryLimit": "170Mi"
  },
  "kubeAPIServer": {
    "image": "k8s.gcr.io/kube-apiserver:v1.18.6",
    "logLevel": 2,
    "cloudProvider": "aws",
    "securePort": 443,
    "bindAddress": "0.0.0.0",
    "insecureBindAddress": "127.0.0.1",
    "enableAdmissionPlugins": [
      "NamespaceLifecycle",
      "LimitRanger",
      "ServiceAccount",
      "PersistentVolumeLabel",
      "DefaultStorageClass",
      "DefaultTolerationSeconds",
      "MutatingAdmissionWebhook",
      "ValidatingAdmissionWebhook",
      "NodeRestriction",
      "ResourceQuota"
    ],
    "serviceClusterIPRange": "100.64.0.0/13",
    "etcdServers": [
      "http://127.0.0.1:4001"
    ],
    "etcdServersOverrides": [
      "/events#http://127.0.0.1:4002"
    ],
    "allowPrivileged": true,
    "apiServerCount": 3,
    "anonymousAuth": false,
    "kubeletPreferredAddressTypes": [
      "InternalIP",
      "Hostname",
      "ExternalIP"
    ],
    "storageBackend": "etcd3",
    "authorizationMode": "RBAC",
    "requestheaderUsernameHeaders": [
      "X-Remote-User"
    ],
    "requestheaderGroupHeaders": [
      "X-Remote-Group"
    ],
    "requestheaderExtraHeaderPrefixes": [
      "X-Remote-Extra-"
    ],
    "requestheaderAllowedNames": [
      "aggregator"
    ]
  },
  "kubeControllerManager": {
    "logLevel": 2,
    "image": "k8s.gcr.io/kube-controller-manager:v1.18.6",
    "cloudProvider": "aws",
    "clusterName": "prototype.emvaldes.name",
    "clusterCIDR": "100.96.0.0/11",
    "allocateNodeCIDRs": true,
    "configureCloudRoutes": false,
    "leaderElection": {
      "leaderElect": true
    },
    "attachDetachReconcileSyncPeriod": "1m0s",
    "useServiceAccountCredentials": true
  },
  "kubeScheduler": {
    "logLevel": 2,
    "image": "k8s.gcr.io/kube-scheduler:v1.18.6",
    "leaderElection": {
      "leaderElect": true
    }
  },
  "kubeProxy": {
    "image": "k8s.gcr.io/kube-proxy:v1.18.6",
    "cpuRequest": "100m",
    "logLevel": 2,
    "clusterCIDR": "100.96.0.0/11",
    "hostnameOverride": "@aws"
  },
  "kubelet": {
    "anonymousAuth": false,
    "kubeconfigPath": "/var/lib/kubelet/kubeconfig",
    "logLevel": 2,
    "podManifestPath": "/etc/kubernetes/manifests",
    "hostnameOverride": "@aws",
    "podInfraContainerImage": "k8s.gcr.io/pause-amd64:3.2",
    "enableDebuggingHandlers": true,
    "clusterDomain": "cluster.local",
    "clusterDNS": "100.64.0.10",
    "networkPluginName": "cni",
    "cloudProvider": "aws",
    "cgroupRoot": "/",
    "nonMasqueradeCIDR": "100.64.0.0/10",
    "evictionHard": "memory.available\u003c100Mi,nodefs.available\u003c10%,nodefs.inodesFree\u003c5%,imagefs.available\u003c10%,imagefs.inodesFree\u003c5%"
  },
  "masterKubelet": {
    "anonymousAuth": false,
    "kubeconfigPath": "/var/lib/kubelet/kubeconfig",
    "logLevel": 2,
    "podManifestPath": "/etc/kubernetes/manifests",
    "hostnameOverride": "@aws",
    "podInfraContainerImage": "k8s.gcr.io/pause-amd64:3.2",
    "enableDebuggingHandlers": true,
    "clusterDomain": "cluster.local",
    "clusterDNS": "100.64.0.10",
    "networkPluginName": "cni",
    "cloudProvider": "aws",
    "cgroupRoot": "/",
    "registerSchedulable": false,
    "nonMasqueradeCIDR": "100.64.0.0/10",
    "evictionHard": "memory.available\u003c100Mi,nodefs.available\u003c10%,nodefs.inodesFree\u003c5%,imagefs.available\u003c10%,imagefs.inodesFree\u003c5%"
  },
  "networking": {
    "weave": {
      "mtu": 8912
    }
  },
  "api": {
    "dns": {}
  },
  "authorization": {
    "rbac": {}
  },
  "iam": {
    "legacy": false,
    "allowContainerRegistry": true
  }
}
I0812 18:06:24.589982    2891 kubelet.go:137] Cloud Provider: aws
I0812 18:06:24.590290    2891 kubelet.go:137] Cloud Provider: aws
I0812 18:06:24.590573    2891 spec_builder.go:49] options: {
  "channel": "stable",
  "configBase": "s3://kubernetes-states--123456789012/prototype.emvaldes.name",
  "cloudProvider": "aws",
  "containerRuntime": "docker",
  "kubernetesVersion": "1.18.6",
  "subnets": [
    {
      "name": "us-east-1a",
      "cidr": "172.20.32.0/19",
      "zone": "us-east-1a",
      "type": "Public"
    },
    {
      "name": "us-east-1b",
      "cidr": "172.20.64.0/19",
      "zone": "us-east-1b",
      "type": "Public"
    },
    {
      "name": "us-east-1c",
      "cidr": "172.20.96.0/19",
      "zone": "us-east-1c",
      "type": "Public"
    }
  ],
  "masterPublicName": "api.prototype.emvaldes.name",
  "masterInternalName": "api.internal.prototype.emvaldes.name",
  "networkCIDR": "172.20.0.0/16",
  "topology": {
    "masters": "public",
    "nodes": "public",
    "dns": {
      "type": "Public"
    }
  },
  "secretStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/secrets",
  "keyStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/pki",
  "configStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name",
  "dnsZone": "prototype.emvaldes.name",
  "clusterDNSDomain": "cluster.local",
  "serviceClusterIPRange": "100.64.0.0/13",
  "nonMasqueradeCIDR": "100.64.0.0/10",
  "sshAccess": [
    "0.0.0.0/0"
  ],
  "kubernetesApiAccess": [
    "0.0.0.0/0"
  ],
  "etcdClusters": [
    {
      "name": "main",
      "provider": "Manager",
      "etcdMembers": [
        {
          "name": "a",
          "instanceGroup": "master-us-east-1a"
        },
        {
          "name": "b",
          "instanceGroup": "master-us-east-1b"
        },
        {
          "name": "c",
          "instanceGroup": "master-us-east-1c"
        }
      ],
      "enableEtcdTLS": true,
      "enableTLSAuth": true,
      "version": "3.4.3",
      "backups": {
        "backupStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/backups/etcd/main"
      },
      "manager": {},
      "memoryRequest": "100Mi",
      "cpuRequest": "200m"
    },
    {
      "name": "events",
      "provider": "Manager",
      "etcdMembers": [
        {
          "name": "a",
          "instanceGroup": "master-us-east-1a"
        },
        {
          "name": "b",
          "instanceGroup": "master-us-east-1b"
        },
        {
          "name": "c",
          "instanceGroup": "master-us-east-1c"
        }
      ],
      "enableEtcdTLS": true,
      "enableTLSAuth": true,
      "version": "3.4.3",
      "backups": {
        "backupStore": "s3://kubernetes-states--123456789012/prototype.emvaldes.name/backups/etcd/events"
      },
      "manager": {},
      "memoryRequest": "100Mi",
      "cpuRequest": "100m"
    }
  ],
  "containerd": {
    "configOverride": "disabled_plugins = [\"cri\"]\n",
    "logLevel": "info",
    "version": "1.2.13"
  },
  "docker": {
    "ipMasq": false,
    "ipTables": false,
    "logDriver": "json-file",
    "logLevel": "warn",
    "logOpt": [
      "max-size=10m",
      "max-file=5"
    ],
    "storage": "overlay2,overlay,aufs",
    "version": "19.03.11"
  },
  "kubeDNS": {
    "cacheMaxSize": 1000,
    "cacheMaxConcurrent": 150,
    "domain": "cluster.local",
    "replicas": 2,
    "serverIP": "100.64.0.10",
    "memoryRequest": "70Mi",
    "cpuRequest": "100m",
    "memoryLimit": "170Mi"
  },
  "kubeAPIServer": {
    "image": "k8s.gcr.io/kube-apiserver:v1.18.6",
    "logLevel": 2,
    "cloudProvider": "aws",
    "securePort": 443,
    "bindAddress": "0.0.0.0",
    "insecureBindAddress": "127.0.0.1",
    "enableAdmissionPlugins": [
      "NamespaceLifecycle",
      "LimitRanger",
      "ServiceAccount",
      "PersistentVolumeLabel",
      "DefaultStorageClass",
      "DefaultTolerationSeconds",
      "MutatingAdmissionWebhook",
      "ValidatingAdmissionWebhook",
      "NodeRestriction",
      "ResourceQuota"
    ],
    "serviceClusterIPRange": "100.64.0.0/13",
    "etcdServers": [
      "http://127.0.0.1:4001"
    ],
    "etcdServersOverrides": [
      "/events#http://127.0.0.1:4002"
    ],
    "allowPrivileged": true,
    "apiServerCount": 3,
    "anonymousAuth": false,
    "kubeletPreferredAddressTypes": [
      "InternalIP",
      "Hostname",
      "ExternalIP"
    ],
    "storageBackend": "etcd3",
    "authorizationMode": "RBAC",
    "requestheaderUsernameHeaders": [
      "X-Remote-User"
    ],
    "requestheaderGroupHeaders": [
      "X-Remote-Group"
    ],
    "requestheaderExtraHeaderPrefixes": [
      "X-Remote-Extra-"
    ],
    "requestheaderAllowedNames": [
      "aggregator"
    ]
  },
  "kubeControllerManager": {
    "logLevel": 2,
    "image": "k8s.gcr.io/kube-controller-manager:v1.18.6",
    "cloudProvider": "aws",
    "clusterName": "prototype.emvaldes.name",
    "clusterCIDR": "100.96.0.0/11",
    "allocateNodeCIDRs": true,
    "configureCloudRoutes": false,
    "leaderElection": {
      "leaderElect": true
    },
    "attachDetachReconcileSyncPeriod": "1m0s",
    "useServiceAccountCredentials": true
  },
  "kubeScheduler": {
    "logLevel": 2,
    "image": "k8s.gcr.io/kube-scheduler:v1.18.6",
    "leaderElection": {
      "leaderElect": true
    }
  },
  "kubeProxy": {
    "image": "k8s.gcr.io/kube-proxy:v1.18.6",
    "cpuRequest": "100m",
    "logLevel": 2,
    "clusterCIDR": "100.96.0.0/11",
    "hostnameOverride": "@aws"
  },
  "kubelet": {
    "anonymousAuth": false,
    "kubeconfigPath": "/var/lib/kubelet/kubeconfig",
    "logLevel": 2,
    "podManifestPath": "/etc/kubernetes/manifests",
    "hostnameOverride": "@aws",
    "podInfraContainerImage": "k8s.gcr.io/pause-amd64:3.2",
    "enableDebuggingHandlers": true,
    "clusterDomain": "cluster.local",
    "clusterDNS": "100.64.0.10",
    "networkPluginName": "cni",
    "cloudProvider": "aws",
    "cgroupRoot": "/",
    "nonMasqueradeCIDR": "100.64.0.0/10",
    "evictionHard": "memory.available\u003c100Mi,nodefs.available\u003c10%,nodefs.inodesFree\u003c5%,imagefs.available\u003c10%,imagefs.inodesFree\u003c5%"
  },
  "masterKubelet": {
    "anonymousAuth": false,
    "kubeconfigPath": "/var/lib/kubelet/kubeconfig",
    "logLevel": 2,
    "podManifestPath": "/etc/kubernetes/manifests",
    "hostnameOverride": "@aws",
    "podInfraContainerImage": "k8s.gcr.io/pause-amd64:3.2",
    "enableDebuggingHandlers": true,
    "clusterDomain": "cluster.local",
    "clusterDNS": "100.64.0.10",
    "networkPluginName": "cni",
    "cloudProvider": "aws",
    "cgroupRoot": "/",
    "registerSchedulable": false,
    "nonMasqueradeCIDR": "100.64.0.0/10",
    "evictionHard": "memory.available\u003c100Mi,nodefs.available\u003c10%,nodefs.inodesFree\u003c5%,imagefs.available\u003c10%,imagefs.inodesFree\u003c5%"
  },
  "networking": {
    "weave": {
      "mtu": 8912
    }
  },
  "api": {
    "dns": {}
  },
  "authorization": {
    "rbac": {}
  },
  "iam": {
    "legacy": false,
    "allowContainerRegistry": true
  }
}
I0812 18:06:27.738375    2891 executor.go:103] Tasks: 0 done / 101 total; 49 can run
I0812 18:06:28.424023    2891 vfs_castore.go:590] Issuing new certificate: "etcd-manager-ca-main"
I0812 18:06:28.426563    2891 vfs_castore.go:590] Issuing new certificate: "etcd-peers-ca-main"
I0812 18:06:28.466626    2891 vfs_castore.go:590] Issuing new certificate: "etcd-manager-ca-events"
I0812 18:06:28.482634    2891 vfs_castore.go:590] Issuing new certificate: "etcd-peers-ca-events"
I0812 18:06:28.562114    2891 vfs_castore.go:590] Issuing new certificate: "etcd-clients-ca"
I0812 18:06:28.589438    2891 vfs_castore.go:590] Issuing new certificate: "apiserver-aggregator-ca"
I0812 18:06:28.611615    2891 vfs_castore.go:590] Issuing new certificate: "ca"
I0812 18:06:30.418327    2891 executor.go:103] Tasks: 49 done / 101 total; 28 can run
I0812 18:06:30.955131    2891 vfs_castore.go:590] Issuing new certificate: "master"
I0812 18:06:30.988712    2891 vfs_castore.go:590] Issuing new certificate: "kubecfg"
I0812 18:06:30.991658    2891 vfs_castore.go:590] Issuing new certificate: "kube-proxy"
I0812 18:06:31.054224    2891 vfs_castore.go:590] Issuing new certificate: "apiserver-aggregator"
I0812 18:06:31.063079    2891 vfs_castore.go:590] Issuing new certificate: "kube-controller-manager"
I0812 18:06:31.133235    2891 vfs_castore.go:590] Issuing new certificate: "apiserver-proxy-client"
I0812 18:06:31.187787    2891 vfs_castore.go:590] Issuing new certificate: "kubelet-api"
I0812 18:06:31.223215    2891 vfs_castore.go:590] Issuing new certificate: "kube-scheduler"
I0812 18:06:31.338423    2891 vfs_castore.go:590] Issuing new certificate: "kubelet"
I0812 18:06:31.518427    2891 vfs_castore.go:590] Issuing new certificate: "kops"
I0812 18:06:32.480299    2891 executor.go:103] Tasks: 77 done / 101 total; 20 can run
I0812 18:06:33.517987    2891 launchconfiguration.go:375] waiting for IAM instance profile "masters.prototype.emvaldes.name" to be ready
I0812 18:06:33.531594    2891 launchconfiguration.go:375] waiting for IAM instance profile "masters.prototype.emvaldes.name" to be ready
I0812 18:06:33.736456    2891 launchconfiguration.go:375] waiting for IAM instance profile "nodes.prototype.emvaldes.name" to be ready
I0812 18:06:33.763356    2891 launchconfiguration.go:375] waiting for IAM instance profile "masters.prototype.emvaldes.name" to be ready
I0812 18:06:44.864799    2891 executor.go:103] Tasks: 97 done / 101 total; 4 can run
I0812 18:06:45.855985    2891 executor.go:103] Tasks: 101 done / 101 total; 0 can run
I0812 18:06:45.856037    2891 dns.go:156] Pre-creating DNS records
I0812 18:06:47.729012    2891 update_cluster.go:308] Exporting kubecfg for cluster
kops has set your kubectl context to prototype.emvaldes.name

Cluster is starting.  It should be ready in a few minutes.

Suggestions:
 * validate cluster: kops validate cluster --wait 10m
 * list nodes: kubectl get nodes --show-labels
 * ssh to the master: ssh -i ~/.ssh/id_rsa ubuntu@api.prototype.emvaldes.name
 * the ubuntu user is specific to Ubuntu. If not using Ubuntu please use the appropriate user based on your OS.
 * read about installing addons at: https://kops.sigs.k8s.io/operations/addons.

+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ dig api.prototype.emvaldes.name

; <<>> DiG 9.10.6 <<>> api.prototype.emvaldes.name
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 63972
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;api.prototype.emvaldes.name.	IN	A

;; AUTHORITY SECTION:
prototype.emvaldes.name. 900	IN	SOA	ns-1403.awsdns-47.org. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400

;; Query time: 11543 msec
;; SERVER: 2001:578:3f::30#53(2001:578:3f::30)
;; WHEN: Wed Aug 12 18:06:59 MST 2020
;; MSG SIZE  rcvd: 130

+ dig api.internal.prototype.emvaldes.name

; <<>> DiG 9.10.6 <<>> api.internal.prototype.emvaldes.name
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 58753
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;api.internal.prototype.emvaldes.name. IN A

;; AUTHORITY SECTION:
prototype.emvaldes.name. 900	IN	SOA	ns-1403.awsdns-47.org. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400

;; Query time: 612 msec
;; SERVER: 2001:578:3f::30#53(2001:578:3f::30)
;; WHEN: Wed Aug 12 18:07:00 MST 2020
;; MSG SIZE  rcvd: 139

+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ counter=0
+ status=1
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=1
+ [[ 1 -eq 0 ]]
+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ [[ 1 -ne 0 ]]
+ inline .
+ echo -en .
.+ (( counter++ ))
+ kops_console 'validate cluster'
+ status=0
+ [[ 0 -eq 0 ]]
+ display_message ' done! [ 18 mins. ]'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print ' done! [ 18 mins. ]'
+ inline ' done! [ 18 mins. ]\n'
+ echo -en ' done! [ 18 mins. ]\n'
 done! [ 18 mins. ]
+ break
+ unset counter
+ kubectl_console 'config use-context prototype.emvaldes.name'
+ [[ -n config use-context prototype.emvaldes.name ]]
+ local 'command_params=config use-context prototype.emvaldes.name'
+ execute_command 'kubectl config use-context prototype.emvaldes.name'
+ [[ -n kubectl config use-context prototype.emvaldes.name ]]
++ echo -e kubectl config use-context prototype.emvaldes.name
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config use-context prototype.emvaldes.name'
+ logging_process kubectl config use-context prototype.emvaldes.name
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182544
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182544 = kubectl' config use-context prototype.emvaldes.name
+ return 0
+ eval kubectl config use-context prototype.emvaldes.name
++ kubectl config use-context prototype.emvaldes.name
Switched to context "prototype.emvaldes.name".
+ install_metricsserver
+ tracking_process install_metricsserver
+ [[ -n install_metricsserver ]]
+ local func_params=install_metricsserver
+ local func_name=install_metricsserver
+ logging_process install_metricsserver
+ [[ -n install_metricsserver ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182545
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182545 = install_metricsserver'
+ return 0
+ return 0
+ package_source=kubernetes-sigs/metrics-server/archive/v0.3.6.tar.gz
+ package_file=metrics-server-0.3.6
+ config_file=/tmp/clusters/configs/metrics-server-0.3.6
+ rm -fv /tmp/clusters/configs/metrics-server-0.3.6
+ curl --silent --output /tmp/clusters/configs/metrics-server-0.3.6.tgz --location --remote-name https://github.com/kubernetes-sigs/metrics-server/archive/v0.3.6.tar.gz
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ tar -xvzf /tmp/clusters/configs/metrics-server-0.3.6.tgz
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ kubectl_console 'create       --filename metrics-server-0.3.6/deploy/1.8+/       --record=true'
+ [[ -n create       --filename metrics-server-0.3.6/deploy/1.8+/       --record=true ]]
+ local 'command_params=create       --filename metrics-server-0.3.6/deploy/1.8+/       --record=true'
+ execute_command 'kubectl create       --filename metrics-server-0.3.6/deploy/1.8+/       --record=true'
+ [[ -n kubectl create       --filename metrics-server-0.3.6/deploy/1.8+/       --record=true ]]
++ echo -e kubectl create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true'
+ logging_process kubectl create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182550
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182550 = kubectl' create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true
+ return 0
+ eval kubectl create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true
++ kubectl create --filename metrics-server-0.3.6/deploy/1.8+/ --record=true
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
serviceaccount/metrics-server created
deployment.apps/metrics-server created
service/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ rm -rf metrics-server-0.3.6
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ true == true ]]
+ enable_cloudwatch
+ tracking_process enable_cloudwatch
+ [[ -n enable_cloudwatch ]]
+ local func_params=enable_cloudwatch
+ local func_name=enable_cloudwatch
+ logging_process enable_cloudwatch
+ [[ -n enable_cloudwatch ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182555
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182555 = enable_cloudwatch'
+ return 0
+ return 0
+ cloudwatch_namespace
+ tracking_process cloudwatch_namespace
+ [[ -n cloudwatch_namespace ]]
+ local func_params=cloudwatch_namespace
+ local func_name=cloudwatch_namespace
+ logging_process cloudwatch_namespace
+ [[ -n cloudwatch_namespace ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182555
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182555 = cloudwatch_namespace'
+ return 0
+ return 0
+ local location=aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates
+ local yaml_file=cloudwatch-namespace.yaml
+ kubectl_console 'apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml'
+ [[ -n apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml ]]
+ local 'command_params=apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml'
+ execute_command 'kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml'
+ [[ -n kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml ]]
++ echo -e kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml'
+ logging_process kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182555
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182555 = kubectl' apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml
+ return 0
+ eval kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml
++ kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cloudwatch-namespace.yaml
namespace/amazon-cloudwatch created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cwagent_fluentd
+ tracking_process cwagent_fluentd
+ [[ -n cwagent_fluentd ]]
+ local func_params=cwagent_fluentd
+ local func_name=cwagent_fluentd
+ logging_process cwagent_fluentd
+ [[ -n cwagent_fluentd ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182557
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182557 = cwagent_fluentd'
+ return 0
+ return 0
+ local location=aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/quickstart
+ local yaml_file=cwagent-fluentd-quickstart.yaml
+ curl --silent --location https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/quickstart/cwagent-fluentd-quickstart.yaml
+ sed 's/{{cluster_name}}/prototype/;s/{{region_name}}/us-east-1/'
+ kubectl_console 'apply --filename -'
+ [[ -n apply --filename - ]]
+ local 'command_params=apply --filename -'
+ execute_command 'kubectl apply --filename -'
+ [[ -n kubectl apply --filename - ]]
++ echo -e kubectl apply --filename -
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename -'
+ logging_process kubectl apply --filename -
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182557
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182557 = kubectl' apply --filename -
+ return 0
+ eval kubectl apply --filename -
++ kubectl apply --filename -
namespace/amazon-cloudwatch unchanged
serviceaccount/cloudwatch-agent created
clusterrole.rbac.authorization.k8s.io/cloudwatch-agent-role created
clusterrolebinding.rbac.authorization.k8s.io/cloudwatch-agent-role-binding created
configmap/cwagentconfig created
daemonset.apps/cloudwatch-agent created
configmap/cluster-info created
serviceaccount/fluentd created
clusterrole.rbac.authorization.k8s.io/fluentd-role created
clusterrolebinding.rbac.authorization.k8s.io/fluentd-role-binding created
configmap/fluentd-config created
daemonset.apps/fluentd-cloudwatch created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_pods amazon-cloudwatch
+ tracking_process display_pods amazon-cloudwatch
+ [[ -n display_pods ]]
+ local 'func_params=display_pods amazon-cloudwatch'
+ local func_name=display_pods
+ logging_process display_pods amazon-cloudwatch
+ [[ -n display_pods ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182600
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182600 = display_pods' amazon-cloudwatch
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=amazon-cloudwatch
+ kubectl_console 'get pods       --namespace=amazon-cloudwatch       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n get pods       --namespace=amazon-cloudwatch       --output wide       --sort-by='{.spec.nodeName}' ]]
+ local 'command_params=get pods       --namespace=amazon-cloudwatch       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ execute_command 'kubectl get pods       --namespace=amazon-cloudwatch       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl get pods       --namespace=amazon-cloudwatch       --output wide       --sort-by='{.spec.nodeName}' ]]
++ echo -e kubectl get pods --namespace=amazon-cloudwatch --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace=amazon-cloudwatch --output wide --sort-by='\''{.spec.nodeName}'\'''
+ logging_process kubectl get pods --namespace=amazon-cloudwatch --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182600
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182600 = kubectl' get pods --namespace=amazon-cloudwatch --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ return 0
+ eval kubectl get pods --namespace=amazon-cloudwatch --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ kubectl get pods --namespace=amazon-cloudwatch --output wide '--sort-by={.spec.nodeName}'
NAME                       READY   STATUS              RESTARTS   AGE   IP       NODE                            NOMINATED NODE   READINESS GATES
cloudwatch-agent-2v24t     0/1     ContainerCreating   0          2s    <none>   ip-172-20-45-53.ec2.internal    <none>           <none>
fluentd-cloudwatch-s9vk9   0/1     Init:0/2            0          1s    <none>   ip-172-20-45-53.ec2.internal    <none>           <none>
cloudwatch-agent-n27ph     0/1     ContainerCreating   0          2s    <none>   ip-172-20-84-104.ec2.internal   <none>           <none>
fluentd-cloudwatch-jdxmf   0/1     Init:0/2            0          1s    <none>   ip-172-20-84-104.ec2.internal   <none>           <none>
cloudwatch-agent-9s7sg     0/1     ContainerCreating   0          2s    <none>   ip-172-20-127-92.ec2.internal   <none>           <none>
fluentd-cloudwatch-sqkzl   0/1     Init:0/2            0          1s    <none>   ip-172-20-127-92.ec2.internal   <none>           <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cwagent_serviceaccount
+ tracking_process cwagent_serviceaccount
+ [[ -n cwagent_serviceaccount ]]
+ local func_params=cwagent_serviceaccount
+ local func_name=cwagent_serviceaccount
+ logging_process cwagent_serviceaccount
+ [[ -n cwagent_serviceaccount ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182602
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182602 = cwagent_serviceaccount'
+ return 0
+ return 0
+ local location=aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring
+ local yaml_file=cwagent-serviceaccount.yaml
+ kubectl_console 'apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml'
+ [[ -n apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml ]]
+ local 'command_params=apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml'
+ execute_command 'kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml'
+ [[ -n kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml ]]
++ echo -e kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml'
+ logging_process kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182602
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182602 = kubectl' apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml
+ return 0
+ eval kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml
++ kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-serviceaccount.yaml
serviceaccount/cloudwatch-agent unchanged
clusterrole.rbac.authorization.k8s.io/cloudwatch-agent-role unchanged
clusterrolebinding.rbac.authorization.k8s.io/cloudwatch-agent-role-binding unchanged
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ configmap_cwagent
+ tracking_process configmap_cwagent
+ [[ -n configmap_cwagent ]]
+ local func_params=configmap_cwagent
+ local func_name=configmap_cwagent
+ logging_process configmap_cwagent
+ [[ -n configmap_cwagent ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182603
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182603 = configmap_cwagent'
+ return 0
+ return 0
+ local location=aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring
+ local yaml_file=cwagent-configmap.yaml
+ config_file=/tmp/clusters/configs/cwagent-configmap.yaml
+ rm -fv /tmp/clusters/configs/cwagent-configmap.yaml
/tmp/clusters/configs/cwagent-configmap.yaml
+ curl --silent --output /tmp/clusters/configs/cwagent-configmap.yaml --location --remote-name https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-configmap.yaml
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ sed -i '' -e 's|{{cluster_name}}|prototype|g' /tmp/clusters/configs/cwagent-configmap.yaml
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ kubectl_console 'apply       --filename /tmp/clusters/configs/cwagent-configmap.yaml'
+ [[ -n apply       --filename /tmp/clusters/configs/cwagent-configmap.yaml ]]
+ local 'command_params=apply       --filename /tmp/clusters/configs/cwagent-configmap.yaml'
+ execute_command 'kubectl apply       --filename /tmp/clusters/configs/cwagent-configmap.yaml'
+ [[ -n kubectl apply       --filename /tmp/clusters/configs/cwagent-configmap.yaml ]]
++ echo -e kubectl apply --filename /tmp/clusters/configs/cwagent-configmap.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename /tmp/clusters/configs/cwagent-configmap.yaml'
+ logging_process kubectl apply --filename /tmp/clusters/configs/cwagent-configmap.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182604
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182604 = kubectl' apply --filename /tmp/clusters/configs/cwagent-configmap.yaml
+ return 0
+ eval kubectl apply --filename /tmp/clusters/configs/cwagent-configmap.yaml
++ kubectl apply --filename /tmp/clusters/configs/cwagent-configmap.yaml
configmap/cwagentconfig configured
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cwagent_daemonset
+ tracking_process cwagent_daemonset
+ [[ -n cwagent_daemonset ]]
+ local func_params=cwagent_daemonset
+ local func_name=cwagent_daemonset
+ logging_process cwagent_daemonset
+ [[ -n cwagent_daemonset ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182605
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182605 = cwagent_daemonset'
+ return 0
+ return 0
+ local location=aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring
+ local yaml_file=cwagent-daemonset.yaml
+ kubectl_console 'apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml'
+ [[ -n apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml ]]
+ local 'command_params=apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml'
+ execute_command 'kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml'
+ [[ -n kubectl apply       --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml ]]
++ echo -e kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml'
+ logging_process kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182605
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182605 = kubectl' apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml
+ return 0
+ eval kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml
++ kubectl apply --filename https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/cwagent-kubernetes-monitoring/cwagent-daemonset.yaml
daemonset.apps/cloudwatch-agent unchanged
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ true == true ]]
+ cluster_podname amazon-cloudwatch cloudwatch-agent
+ tracking_process cluster_podname amazon-cloudwatch cloudwatch-agent
+ [[ -n cluster_podname ]]
+ local 'func_params=cluster_podname amazon-cloudwatch cloudwatch-agent'
+ local func_name=cluster_podname
+ logging_process cluster_podname amazon-cloudwatch cloudwatch-agent
+ [[ -n cluster_podname ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182607
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182607 = cluster_podname' amazon-cloudwatch cloudwatch-agent
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=amazon-cloudwatch
+ [[ -n '' ]]
+ application='--selector name=cloudwatch-agent'
+ [[ -n '' ]]
+ target_index=
+ target_index=
+ containers=($(
        kubectl_console "get pods           --namespace ${target_namespace}           --no-headers           ${application}"         | awk '{print $1}';
        result=${?};
      ))
++ kubectl_console 'get pods           --namespace amazon-cloudwatch           --no-headers           --selector name=cloudwatch-agent'
++ [[ -n get pods           --namespace amazon-cloudwatch           --no-headers           --selector name=cloudwatch-agent ]]
++ local 'command_params=get pods           --namespace amazon-cloudwatch           --no-headers           --selector name=cloudwatch-agent'
++ awk '{print $1}'
++ execute_command 'kubectl get pods           --namespace amazon-cloudwatch           --no-headers           --selector name=cloudwatch-agent'
++ [[ -n kubectl get pods           --namespace amazon-cloudwatch           --no-headers           --selector name=cloudwatch-agent ]]
+++ echo -e kubectl get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=kubectl get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent'
++ logging_process kubectl get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent
++ [[ -n kubectl ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812182607
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812182607 = kubectl' get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent
++ return 0
++ eval kubectl get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent
+++ kubectl get pods --namespace amazon-cloudwatch --no-headers --selector name=cloudwatch-agent
++ result=0
+ declare -a containers
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ export target_podname=cloudwatch-agent-2v24t
+ target_podname=cloudwatch-agent-2v24t
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ ! -z cloudwatch-agent-2v24t ]]
+ display_message 'Describing Pod: cloudwatch-agent-2v24t'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Describing Pod: cloudwatch-agent-2v24t'
+ inline 'Describing Pod: cloudwatch-agent-2v24t\n'
+ echo -en 'Describing Pod: cloudwatch-agent-2v24t\n'
Describing Pod: cloudwatch-agent-2v24t
+ describe_podname cloudwatch-agent-2v24t amazon-cloudwatch
+ tracking_process describe_podname cloudwatch-agent-2v24t amazon-cloudwatch
+ [[ -n describe_podname ]]
+ local 'func_params=describe_podname cloudwatch-agent-2v24t amazon-cloudwatch'
+ local func_name=describe_podname
+ logging_process describe_podname cloudwatch-agent-2v24t amazon-cloudwatch
+ [[ -n describe_podname ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182608
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182608 = describe_podname' cloudwatch-agent-2v24t amazon-cloudwatch
+ return 0
+ return 0
+ [[ -n x ]]
+ export target_podname=cloudwatch-agent-2v24t
+ target_podname=cloudwatch-agent-2v24t
+ target_namespace=amazon-cloudwatch
+ kubectl_console 'describe pod cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ [[ -n describe pod cloudwatch-agent-2v24t         --namespace amazon-cloudwatch ]]
+ local 'command_params=describe pod cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ execute_command 'kubectl describe pod cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ [[ -n kubectl describe pod cloudwatch-agent-2v24t         --namespace amazon-cloudwatch ]]
++ echo -e kubectl describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch'
+ logging_process kubectl describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182608
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182608 = kubectl' describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch
+ return 0
+ eval kubectl describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch
++ kubectl describe pod cloudwatch-agent-2v24t --namespace amazon-cloudwatch
Name:         cloudwatch-agent-2v24t
Namespace:    amazon-cloudwatch
Priority:     0
Node:         ip-172-20-45-53.ec2.internal/172.20.45.53
Start Time:   Wed, 12 Aug 2020 18:25:59 -0700
Labels:       controller-revision-hash=ccd5c6c8b
              name=cloudwatch-agent
              pod-template-generation=1
Annotations:  <none>
Status:       Running
IP:           100.116.0.2
IPs:
  IP:           100.116.0.2
Controlled By:  DaemonSet/cloudwatch-agent
Containers:
  cloudwatch-agent:
    Container ID:   docker://b7f527769bed9b214f380fda6898ecbc7104c2a03c16a6aa2a5172d0f9b675b8
    Image:          amazon/cloudwatch-agent:1.230621.0
    Image ID:       docker-pullable://amazon/cloudwatch-agent@sha256:877106acbc56e747ebe373548c88cd37274f666ca11b5c782211db4c5c7fb64b
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Wed, 12 Aug 2020 18:26:04 -0700
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     200m
      memory:  200Mi
    Requests:
      cpu:     200m
      memory:  200Mi
    Environment:
      HOST_IP:         (v1:status.hostIP)
      HOST_NAME:       (v1:spec.nodeName)
      K8S_NAMESPACE:  amazon-cloudwatch (v1:metadata.namespace)
      CI_VERSION:     k8s/1.0.1
    Mounts:
      /dev/disk from devdisk (ro)
      /etc/cwagentconfig from cwagentconfig (rw)
      /rootfs from rootfs (ro)
      /sys from sys (ro)
      /var/lib/docker from varlibdocker (ro)
      /var/run/docker.sock from dockersock (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from cloudwatch-agent-token-wf74b (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  cwagentconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      cwagentconfig
    Optional:  false
  rootfs:
    Type:          HostPath (bare host directory volume)
    Path:          /
    HostPathType:
  dockersock:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/docker.sock
    HostPathType:
  varlibdocker:
    Type:          HostPath (bare host directory volume)
    Path:          /var/lib/docker
    HostPathType:
  sys:
    Type:          HostPath (bare host directory volume)
    Path:          /sys
    HostPathType:
  devdisk:
    Type:          HostPath (bare host directory volume)
    Path:          /dev/disk/
    HostPathType:
  cloudwatch-agent-token-wf74b:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  cloudwatch-agent-token-wf74b
    Optional:    false
QoS Class:       Guaranteed
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/disk-pressure:NoSchedule
                 node.kubernetes.io/memory-pressure:NoSchedule
                 node.kubernetes.io/not-ready:NoExecute
                 node.kubernetes.io/pid-pressure:NoSchedule
                 node.kubernetes.io/unreachable:NoExecute
                 node.kubernetes.io/unschedulable:NoSchedule
Events:
  Type    Reason     Age   From                                   Message
  ----    ------     ----  ----                                   -------
  Normal  Scheduled  10s   default-scheduler                      Successfully assigned amazon-cloudwatch/cloudwatch-agent-2v24t to ip-172-20-45-53.ec2.internal
  Normal  Pulling    9s    kubelet, ip-172-20-45-53.ec2.internal  Pulling image "amazon/cloudwatch-agent:1.230621.0"
  Normal  Pulled     6s    kubelet, ip-172-20-45-53.ec2.internal  Successfully pulled image "amazon/cloudwatch-agent:1.230621.0"
  Normal  Created    5s    kubelet, ip-172-20-45-53.ec2.internal  Created container cloudwatch-agent
  Normal  Started    5s    kubelet, ip-172-20-45-53.ec2.internal  Started container cloudwatch-agent
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ display_message 'Displaying Pod'\''s Log: cloudwatch-agent-2v24t'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Displaying Pod'\''s Log: cloudwatch-agent-2v24t'
+ inline 'Displaying Pod'\''s Log: cloudwatch-agent-2v24t\n'
+ echo -en 'Displaying Pod'\''s Log: cloudwatch-agent-2v24t\n'
Displaying Pod's Log: cloudwatch-agent-2v24t
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ display_podlog cloudwatch-agent-2v24t amazon-cloudwatch
+ tracking_process display_podlog cloudwatch-agent-2v24t amazon-cloudwatch
+ [[ -n display_podlog ]]
+ local 'func_params=display_podlog cloudwatch-agent-2v24t amazon-cloudwatch'
+ local func_name=display_podlog
+ logging_process display_podlog cloudwatch-agent-2v24t amazon-cloudwatch
+ [[ -n display_podlog ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182624
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182624 = display_podlog' cloudwatch-agent-2v24t amazon-cloudwatch
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=amazon-cloudwatch
+ [[ -n x ]]
+ export target_podname=cloudwatch-agent-2v24t
+ target_podname=cloudwatch-agent-2v24t
+ kubectl_console 'logs         cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ [[ -n logs         cloudwatch-agent-2v24t         --namespace amazon-cloudwatch ]]
+ local 'command_params=logs         cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ execute_command 'kubectl logs         cloudwatch-agent-2v24t         --namespace amazon-cloudwatch'
+ [[ -n kubectl logs         cloudwatch-agent-2v24t         --namespace amazon-cloudwatch ]]
++ echo -e kubectl logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch'
+ logging_process kubectl logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182624
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182624 = kubectl' logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch
+ return 0
+ eval kubectl logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch
++ kubectl logs cloudwatch-agent-2v24t --namespace amazon-cloudwatch
2020/08/13 01:26:04 I! I! Detected the instance is EC2
2020/08/13 01:26:04 Reading json config file path: /opt/aws/amazon-cloudwatch-agent/bin/default_linux_config.json ...
/opt/aws/amazon-cloudwatch-agent/bin/default_linux_config.json does not exist or cannot read. Skipping it.
2020/08/13 01:26:04 Reading json config file path: /etc/cwagentconfig/..2020_08_13_01_25_59.770404888/cwagentconfig.json ...
2020/08/13 01:26:04 Find symbolic link /etc/cwagentconfig/..data
2020/08/13 01:26:04 Find symbolic link /etc/cwagentconfig/cwagentconfig.json
2020/08/13 01:26:04 Reading json config file path: /etc/cwagentconfig/cwagentconfig.json ...
Valid Json input schema.
No csm configuration found.
No metric configuration found.
Configuration validation first phase succeeded

2020/08/13 01:26:04 I! Config has been translated into TOML /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml
2020/08/13 01:26:05 I! AmazonCloudWatchAgent Version 1.230621.0.
2020-08-13T01:26:05Z I! Starting AmazonCloudWatchAgent (version 1.230621.0)
2020-08-13T01:26:05Z I! Loaded outputs: cloudwatchlogs
2020-08-13T01:26:05Z I! Loaded inputs: cadvisor k8sapiserver
2020-08-13T01:26:05Z I! Tags enabled:
2020-08-13T01:26:05Z I! Agent Config: Interval:1m0s, Quiet:false, Hostname:"ip-172-20-45-53.ec2.internal", Flush Interval:1s
2020-08-13T01:26:06Z E! refresh EC2 Instance Tags failed: UnauthorizedOperation: You are not authorized to perform this operation.
	status code: 403, request id: b7563053-13b4-4ffc-a556-adea7fe56483, metrics will be dropped until it got fixed
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ target_podname=
+ return 0
+ [[ true == true ]]
+ deploy_prometheus
+ tracking_process deploy_prometheus
+ [[ -n deploy_prometheus ]]
+ local func_params=deploy_prometheus
+ local func_name=deploy_prometheus
+ logging_process deploy_prometheus
+ [[ -n deploy_prometheus ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182625
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182625 = deploy_prometheus'
+ return 0
+ return 0
+ create_namespace prometheus
+ tracking_process create_namespace prometheus
+ [[ -n create_namespace ]]
+ local 'func_params=create_namespace prometheus'
+ local func_name=create_namespace
+ logging_process create_namespace prometheus
+ [[ -n create_namespace ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182625
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182625 = create_namespace' prometheus
+ return 0
+ return 0
+ target_namespace=prometheus
+ kubectl_console 'create       namespace prometheus'
+ [[ -n create       namespace prometheus ]]
+ local 'command_params=create       namespace prometheus'
+ execute_command 'kubectl create       namespace prometheus'
+ [[ -n kubectl create       namespace prometheus ]]
++ echo -e kubectl create namespace prometheus
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl create namespace prometheus'
+ logging_process kubectl create namespace prometheus
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182625
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182625 = kubectl' create namespace prometheus
+ return 0
+ eval kubectl create namespace prometheus
++ kubectl create namespace prometheus
namespace/prometheus created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ service_account tiller
+ tracking_process service_account tiller
+ [[ -n service_account ]]
+ local 'func_params=service_account tiller'
+ local func_name=service_account
+ logging_process service_account tiller
+ [[ -n service_account ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182626
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182626 = service_account' tiller
+ return 0
+ return 0
+ config_file=/tmp/clusters/configs/helm-rback.yaml
+ cat /dev/null
+ tee -a /tmp/clusters/configs/helm-rback.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'apply       --filename /tmp/clusters/configs/helm-rback.yaml'
+ [[ -n apply       --filename /tmp/clusters/configs/helm-rback.yaml ]]
+ local 'command_params=apply       --filename /tmp/clusters/configs/helm-rback.yaml'
+ execute_command 'kubectl apply       --filename /tmp/clusters/configs/helm-rback.yaml'
+ [[ -n kubectl apply       --filename /tmp/clusters/configs/helm-rback.yaml ]]
++ echo -e kubectl apply --filename /tmp/clusters/configs/helm-rback.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename /tmp/clusters/configs/helm-rback.yaml'
+ logging_process kubectl apply --filename /tmp/clusters/configs/helm-rback.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182626
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182626 = kubectl' apply --filename /tmp/clusters/configs/helm-rback.yaml
+ return 0
+ eval kubectl apply --filename /tmp/clusters/configs/helm-rback.yaml
++ kubectl apply --filename /tmp/clusters/configs/helm-rback.yaml
serviceaccount/tiller created
clusterrolebinding.rbac.authorization.k8s.io/tiller created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ helm init --service-account=tiller --history-max 300
$HELM_HOME has been configured at /Users/emvaldes/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
To prevent this, run `helm init` with the --tiller-tls-verify flag.
For more information on securing your installation see: https://v2.helm.sh/docs/securing_installation/
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ sleep_until 60 15 Countdown:
+ [[ -n 60 ]]
+ local timer=60
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ kubectl_console 'get deployment       tiller-deploy       --namespace kube-system'
+ [[ -n get deployment       tiller-deploy       --namespace kube-system ]]
+ local 'command_params=get deployment       tiller-deploy       --namespace kube-system'
+ execute_command 'kubectl get deployment       tiller-deploy       --namespace kube-system'
+ [[ -n kubectl get deployment       tiller-deploy       --namespace kube-system ]]
++ echo -e kubectl get deployment tiller-deploy --namespace kube-system
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get deployment tiller-deploy --namespace kube-system'
+ logging_process kubectl get deployment tiller-deploy --namespace kube-system
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182728
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182728 = kubectl' get deployment tiller-deploy --namespace kube-system
+ return 0
+ eval kubectl get deployment tiller-deploy --namespace kube-system
++ kubectl get deployment tiller-deploy --namespace kube-system
NAME            READY   UP-TO-DATE   AVAILABLE   AGE
tiller-deploy   1/1     1            1           61s
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'describe deployment       tiller-deploy       --namespace=kube-system'
+ [[ -n describe deployment       tiller-deploy       --namespace=kube-system ]]
+ local 'command_params=describe deployment       tiller-deploy       --namespace=kube-system'
+ execute_command 'kubectl describe deployment       tiller-deploy       --namespace=kube-system'
+ [[ -n kubectl describe deployment       tiller-deploy       --namespace=kube-system ]]
++ echo -e kubectl describe deployment tiller-deploy --namespace=kube-system
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl describe deployment tiller-deploy --namespace=kube-system'
+ logging_process kubectl describe deployment tiller-deploy --namespace=kube-system
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182729
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182729 = kubectl' describe deployment tiller-deploy --namespace=kube-system
+ return 0
+ eval kubectl describe deployment tiller-deploy --namespace=kube-system
++ kubectl describe deployment tiller-deploy --namespace=kube-system
Name:                   tiller-deploy
Namespace:              kube-system
CreationTimestamp:      Wed, 12 Aug 2020 18:26:28 -0700
Labels:                 app=helm
                        name=tiller
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=helm,name=tiller
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=helm
                    name=tiller
  Service Account:  tiller
  Containers:
   tiller:
    Image:       gcr.io/kubernetes-helm/tiller:v2.16.9
    Ports:       44134/TCP, 44135/TCP
    Host Ports:  0/TCP, 0/TCP
    Liveness:    http-get http://:44135/liveness delay=1s timeout=1s period=10s #success=1 #failure=3
    Readiness:   http-get http://:44135/readiness delay=1s timeout=1s period=10s #success=1 #failure=3
    Environment:
      TILLER_NAMESPACE:    kube-system
      TILLER_HISTORY_MAX:  300
    Mounts:                <none>
  Volumes:                 <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   tiller-deploy-5c8959c79b (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  62s   deployment-controller  Scaled up replica set tiller-deploy-5c8959c79b to 1
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ setup_monitoring prometheus prometheus
+ tracking_process setup_monitoring prometheus prometheus
+ [[ -n setup_monitoring ]]
+ local 'func_params=setup_monitoring prometheus prometheus'
+ local func_name=setup_monitoring
+ logging_process setup_monitoring prometheus prometheus
+ [[ -n setup_monitoring ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812182730
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812182730 = setup_monitoring' prometheus prometheus
+ return 0
+ return 0
+ application=prometheus
+ target_namespace=prometheus
+ helm install stable/prometheus-operator --name prometheus --namespace prometheus --set alertmanager.persistentVolume.storageClass=gp2 --set server.persistentVolume.storageClass=gp2 --set service.type=LoadBalancer
NAME:   prometheus
LAST DEPLOYED: Wed Aug 12 18:27:36 2020
NAMESPACE: prometheus
STATUS: DEPLOYED

RESOURCES:
==> v1/Alertmanager
NAME                                     AGE
prometheus-prometheus-oper-alertmanager  46s

==> v1/ClusterRole
NAME                                       CREATED AT
prometheus-grafana-clusterrole             2020-08-13T01:28:40Z
prometheus-prometheus-oper-operator        2020-08-13T01:28:40Z
prometheus-prometheus-oper-operator-psp    2020-08-13T01:28:40Z
prometheus-prometheus-oper-prometheus      2020-08-13T01:28:40Z
prometheus-prometheus-oper-prometheus-psp  2020-08-13T01:28:40Z
psp-prometheus-kube-state-metrics          2020-08-13T01:28:40Z
psp-prometheus-prometheus-node-exporter    2020-08-13T01:28:40Z

==> v1/ClusterRoleBinding
NAME                                       ROLE                                                   AGE
prometheus-grafana-clusterrolebinding      ClusterRole/prometheus-grafana-clusterrole             46s
prometheus-prometheus-oper-operator        ClusterRole/prometheus-prometheus-oper-operator        46s
prometheus-prometheus-oper-operator-psp    ClusterRole/prometheus-prometheus-oper-operator-psp    46s
prometheus-prometheus-oper-prometheus      ClusterRole/prometheus-prometheus-oper-prometheus      46s
prometheus-prometheus-oper-prometheus-psp  ClusterRole/prometheus-prometheus-oper-prometheus-psp  46s
psp-prometheus-kube-state-metrics          ClusterRole/psp-prometheus-kube-state-metrics          46s
psp-prometheus-prometheus-node-exporter    ClusterRole/psp-prometheus-prometheus-node-exporter    46s

==> v1/ConfigMap
NAME                                                          DATA  AGE
prometheus-grafana                                            1     46s
prometheus-grafana-config-dashboards                          1     46s
prometheus-grafana-test                                       1     46s
prometheus-prometheus-oper-apiserver                          1     46s
prometheus-prometheus-oper-cluster-total                      1     46s
prometheus-prometheus-oper-controller-manager                 1     46s
prometheus-prometheus-oper-etcd                               1     46s
prometheus-prometheus-oper-grafana-datasource                 1     46s
prometheus-prometheus-oper-k8s-coredns                        1     46s
prometheus-prometheus-oper-k8s-resources-cluster              1     46s
prometheus-prometheus-oper-k8s-resources-namespace            1     46s
prometheus-prometheus-oper-k8s-resources-node                 1     46s
prometheus-prometheus-oper-k8s-resources-pod                  1     46s
prometheus-prometheus-oper-k8s-resources-workload             1     46s
prometheus-prometheus-oper-k8s-resources-workloads-namespace  1     46s
prometheus-prometheus-oper-kubelet                            1     46s
prometheus-prometheus-oper-namespace-by-pod                   1     46s
prometheus-prometheus-oper-namespace-by-workload              1     46s
prometheus-prometheus-oper-node-cluster-rsrc-use              1     46s
prometheus-prometheus-oper-node-rsrc-use                      1     46s
prometheus-prometheus-oper-nodes                              1     46s
prometheus-prometheus-oper-persistentvolumesusage             1     46s
prometheus-prometheus-oper-pod-total                          1     46s
prometheus-prometheus-oper-pods                               1     46s
prometheus-prometheus-oper-prometheus                         1     46s
prometheus-prometheus-oper-proxy                              1     46s
prometheus-prometheus-oper-scheduler                          1     46s
prometheus-prometheus-oper-statefulset                        1     46s
prometheus-prometheus-oper-workload-total                     1     46s

==> v1/DaemonSet
NAME                                 DESIRED  CURRENT  READY  UP-TO-DATE  AVAILABLE  NODE SELECTOR  AGE
prometheus-prometheus-node-exporter  6        6        6      6           6          <none>         46s

==> v1/Deployment
NAME                                 READY  UP-TO-DATE  AVAILABLE  AGE
prometheus-grafana                   1/1    1           1          46s
prometheus-kube-state-metrics        1/1    1           1          46s
prometheus-prometheus-oper-operator  1/1    1           1          46s

==> v1/Pod(related)
NAME                                                  READY  STATUS   RESTARTS  AGE
prometheus-grafana-86c695c58f-n2ddg                   2/2    Running  0         47s
prometheus-kube-state-metrics-7b69c4fc7-tr2wx         1/1    Running  0         47s
prometheus-prometheus-node-exporter-57b4n             1/1    Running  0         47s
prometheus-prometheus-node-exporter-7mjr6             1/1    Running  0         47s
prometheus-prometheus-node-exporter-fchwv             1/1    Running  0         47s
prometheus-prometheus-node-exporter-kg4lk             1/1    Running  0         47s
prometheus-prometheus-node-exporter-n2dxk             1/1    Running  0         47s
prometheus-prometheus-node-exporter-sk9w9             1/1    Running  0         47s
prometheus-prometheus-oper-operator-666b58fc6c-6hltr  2/2    Running  0         47s

==> v1/Prometheus
NAME                                   AGE
prometheus-prometheus-oper-prometheus  46s

==> v1/PrometheusRule
NAME                                                             AGE
prometheus-prometheus-oper-alertmanager.rules                    45s
prometheus-prometheus-oper-etcd                                  45s
prometheus-prometheus-oper-general.rules                         45s
prometheus-prometheus-oper-k8s.rules                             45s
prometheus-prometheus-oper-kube-apiserver-error                  44s
prometheus-prometheus-oper-kube-apiserver.rules                  45s
prometheus-prometheus-oper-kube-prometheus-node-recording.rules  45s
prometheus-prometheus-oper-kube-scheduler.rules                  44s
prometheus-prometheus-oper-kubernetes-absent                     45s
prometheus-prometheus-oper-kubernetes-apps                       44s
prometheus-prometheus-oper-kubernetes-resources                  45s
prometheus-prometheus-oper-kubernetes-storage                    45s
prometheus-prometheus-oper-kubernetes-system                     44s
prometheus-prometheus-oper-kubernetes-system-apiserver           45s
prometheus-prometheus-oper-kubernetes-system-controller-manager  44s
prometheus-prometheus-oper-kubernetes-system-kubelet             44s
prometheus-prometheus-oper-kubernetes-system-scheduler           44s
prometheus-prometheus-oper-node-exporter                         45s
prometheus-prometheus-oper-node-exporter.rules                   44s
prometheus-prometheus-oper-node-network                          44s
prometheus-prometheus-oper-node-time                             45s
prometheus-prometheus-oper-node.rules                            45s
prometheus-prometheus-oper-prometheus                            45s
prometheus-prometheus-oper-prometheus-operator                   45s

==> v1/Role
NAME                                     CREATED AT
prometheus-grafana-test                  2020-08-13T01:28:40Z
prometheus-prometheus-oper-alertmanager  2020-08-13T01:28:40Z

==> v1/RoleBinding
NAME                                     ROLE                                          AGE
prometheus-grafana-test                  Role/prometheus-grafana-test                  46s
prometheus-prometheus-oper-alertmanager  Role/prometheus-prometheus-oper-alertmanager  46s

==> v1/Secret
NAME                                                  TYPE    DATA  AGE
alertmanager-prometheus-prometheus-oper-alertmanager  Opaque  1     46s
prometheus-grafana                                    Opaque  3     46s

==> v1/Service
NAME                                                TYPE       CLUSTER-IP      EXTERNAL-IP  PORT(S)           AGE
prometheus-grafana                                  ClusterIP  100.71.14.5     <none>       80/TCP            46s
prometheus-kube-state-metrics                       ClusterIP  100.70.68.114   <none>       8080/TCP          46s
prometheus-prometheus-node-exporter                 ClusterIP  100.71.102.9    <none>       9100/TCP          46s
prometheus-prometheus-oper-alertmanager             ClusterIP  100.65.253.157  <none>       9093/TCP          46s
prometheus-prometheus-oper-coredns                  ClusterIP  None            <none>       9153/TCP          46s
prometheus-prometheus-oper-kube-controller-manager  ClusterIP  None            <none>       10252/TCP         46s
prometheus-prometheus-oper-kube-etcd                ClusterIP  None            <none>       2379/TCP          46s
prometheus-prometheus-oper-kube-proxy               ClusterIP  None            <none>       10249/TCP         46s
prometheus-prometheus-oper-kube-scheduler           ClusterIP  None            <none>       10251/TCP         46s
prometheus-prometheus-oper-operator                 ClusterIP  100.66.181.134  <none>       8080/TCP,443/TCP  46s
prometheus-prometheus-oper-prometheus               ClusterIP  100.65.37.97    <none>       9090/TCP          46s

==> v1/ServiceAccount
NAME                                     SECRETS  AGE
prometheus-grafana                       1        46s
prometheus-grafana-test                  1        46s
prometheus-kube-state-metrics            1        46s
prometheus-prometheus-node-exporter      1        46s
prometheus-prometheus-oper-alertmanager  1        46s
prometheus-prometheus-oper-operator      1        46s
prometheus-prometheus-oper-prometheus    1        46s

==> v1/ServiceMonitor
NAME                                                AGE
prometheus-prometheus-oper-alertmanager             44s
prometheus-prometheus-oper-apiserver                44s
prometheus-prometheus-oper-coredns                  44s
prometheus-prometheus-oper-grafana                  44s
prometheus-prometheus-oper-kube-controller-manager  44s
prometheus-prometheus-oper-kube-etcd                44s
prometheus-prometheus-oper-kube-proxy               44s
prometheus-prometheus-oper-kube-scheduler           44s
prometheus-prometheus-oper-kube-state-metrics       44s
prometheus-prometheus-oper-kubelet                  44s
prometheus-prometheus-oper-node-exporter            44s
prometheus-prometheus-oper-operator                 45s
prometheus-prometheus-oper-prometheus               44s

==> v1beta1/ClusterRole
NAME                           CREATED AT
prometheus-kube-state-metrics  2020-08-13T01:28:40Z

==> v1beta1/ClusterRoleBinding
NAME                           ROLE                                       AGE
prometheus-kube-state-metrics  ClusterRole/prometheus-kube-state-metrics  46s

==> v1beta1/MutatingWebhookConfiguration
NAME                                  WEBHOOKS  AGE
prometheus-prometheus-oper-admission  1         46s

==> v1beta1/PodSecurityPolicy
NAME                                     PRIV   CAPS      SELINUX           RUNASUSER  FSGROUP    SUPGROUP  READONLYROOTFS  VOLUMES
prometheus-grafana                       false  RunAsAny  RunAsAny          RunAsAny   RunAsAny   false     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim
prometheus-grafana-test                  false  RunAsAny  RunAsAny          RunAsAny   RunAsAny   false     configMap,downwardAPI,emptyDir,projected,secret
prometheus-kube-state-metrics            false  RunAsAny  MustRunAsNonRoot  MustRunAs  MustRunAs  false     secret
prometheus-prometheus-node-exporter      false  RunAsAny  RunAsAny          MustRunAs  MustRunAs  false     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim,hostPath
prometheus-prometheus-oper-alertmanager  false  RunAsAny  RunAsAny          MustRunAs  MustRunAs  false     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim
prometheus-prometheus-oper-operator      false  RunAsAny  RunAsAny          MustRunAs  MustRunAs  false     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim
prometheus-prometheus-oper-prometheus    false  RunAsAny  RunAsAny          MustRunAs  MustRunAs  false     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim

==> v1beta1/Role
NAME                CREATED AT
prometheus-grafana  2020-08-13T01:28:40Z

==> v1beta1/RoleBinding
NAME                ROLE                     AGE
prometheus-grafana  Role/prometheus-grafana  46s

==> v1beta1/ValidatingWebhookConfiguration
NAME                                  WEBHOOKS  AGE
prometheus-prometheus-oper-admission  1         45s


NOTES:
The Prometheus Operator has been installed. Check its status by running:
  kubectl --namespace prometheus get pods -l "release=prometheus"

Visit https://github.com/coreos/prometheus-operator for instructions on how
to create & configure Alertmanager and Prometheus instances using the Operator.
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ sleep_until 120 15 Countdown:
+ [[ -n 120 ]]
+ local timer=120
+ [[ -n 15 ]]
+ local paused=15
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 120 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 120
Countdown: 120+ sleep 15
+ timer=105
+ [[ 105 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 105
Countdown: 105+ sleep 15
+ timer=90
+ [[ 90 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 90
Countdown: 90+ sleep 15
+ timer=75
+ [[ 75 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 75
Countdown: 75+ sleep 15
+ timer=60
+ [[ 60 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 60
Countdown: 60+ sleep 15
+ timer=45
+ [[ 45 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 45
Countdown: 45+ sleep 15
+ timer=30
+ [[ 30 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 30
Countdown: 30+ sleep 15
+ timer=15
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 15
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'get pods       --namespace prometheus       --selector '\''release=prometheus'\'''
+ [[ -n get pods       --namespace prometheus       --selector 'release=prometheus' ]]
+ local 'command_params=get pods       --namespace prometheus       --selector '\''release=prometheus'\'''
+ execute_command 'kubectl get pods       --namespace prometheus       --selector '\''release=prometheus'\'''
+ [[ -n kubectl get pods       --namespace prometheus       --selector 'release=prometheus' ]]
++ echo -e kubectl get pods --namespace prometheus --selector ''\''release=prometheus'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace prometheus --selector '\''release=prometheus'\'''
+ logging_process kubectl get pods --namespace prometheus --selector ''\''release=prometheus'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183128
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183128 = kubectl' get pods --namespace prometheus --selector ''\''release=prometheus'\'''
+ return 0
+ eval kubectl get pods --namespace prometheus --selector ''\''release=prometheus'\'''
++ kubectl get pods --namespace prometheus --selector release=prometheus
NAME                                                   READY   STATUS    RESTARTS   AGE
prometheus-grafana-86c695c58f-n2ddg                    2/2     Running   0          2m49s
prometheus-prometheus-node-exporter-57b4n              1/1     Running   0          2m49s
prometheus-prometheus-node-exporter-7mjr6              1/1     Running   0          2m49s
prometheus-prometheus-node-exporter-fchwv              1/1     Running   0          2m49s
prometheus-prometheus-node-exporter-kg4lk              1/1     Running   0          2m49s
prometheus-prometheus-node-exporter-n2dxk              1/1     Running   0          2m49s
prometheus-prometheus-node-exporter-sk9w9              1/1     Running   0          2m49s
prometheus-prometheus-oper-operator-666b58fc6c-6hltr   2/2     Running   0          2m49s
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ true == true ]]
+ monitoring_services
+ tracking_process monitoring_services
+ [[ -n monitoring_services ]]
+ local func_params=monitoring_services
+ local func_name=monitoring_services
+ logging_process monitoring_services
+ [[ -n monitoring_services ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183129
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183129 = monitoring_services'
+ return 0
+ return 0
+ kubectl_console 'get svc       --namespace prometheus       --output json'
+ [[ -n get svc       --namespace prometheus       --output json ]]
+ local 'command_params=get svc       --namespace prometheus       --output json'
+ execute_command 'kubectl get svc       --namespace prometheus       --output json'
+ [[ -n kubectl get svc       --namespace prometheus       --output json ]]
++ echo -e kubectl get svc --namespace prometheus --output json
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get svc --namespace prometheus --output json'
+ logging_process kubectl get svc --namespace prometheus --output json
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183129
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183129 = kubectl' get svc --namespace prometheus --output json
+ return 0
+ eval kubectl get svc --namespace prometheus --output json
++ kubectl get svc --namespace prometheus --output json
{
    "apiVersion": "v1",
    "items": [
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:48Z",
                "labels": {
                    "operated-alertmanager": "true"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:operated-alertmanager": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"5a0ec835-4cb0-4f49-ba82-497db1d8f444\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":9093,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":9094,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":9094,\"protocol\":\"UDP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "operator",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:48Z"
                    }
                ],
                "name": "alertmanager-operated",
                "namespace": "prometheus",
                "ownerReferences": [
                    {
                        "apiVersion": "monitoring.coreos.com/v1",
                        "kind": "Alertmanager",
                        "name": "prometheus-prometheus-oper-alertmanager",
                        "uid": "5a0ec835-4cb0-4f49-ba82-497db1d8f444"
                    }
                ],
                "resourceVersion": "4737",
                "selfLink": "/api/v1/namespaces/prometheus/services/alertmanager-operated",
                "uid": "f0f99b1b-a075-4cf7-94b5-773cdf755447"
            },
            "spec": {
                "clusterIP": "None",
                "ports": [
                    {
                        "name": "web",
                        "port": 9093,
                        "protocol": "TCP",
                        "targetPort": 9093
                    },
                    {
                        "name": "mesh-tcp",
                        "port": 9094,
                        "protocol": "TCP",
                        "targetPort": 9094
                    },
                    {
                        "name": "mesh-udp",
                        "port": 9094,
                        "protocol": "UDP",
                        "targetPort": 9094
                    }
                ],
                "selector": {
                    "app": "alertmanager"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app": "grafana",
                    "chart": "grafana-4.3.2",
                    "heritage": "Tiller",
                    "release": "prometheus"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:chart": {},
                                    "f:heritage": {},
                                    "f:release": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":80,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {},
                                    "f:release": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-grafana",
                "namespace": "prometheus",
                "resourceVersion": "4530",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-grafana",
                "uid": "e3a423b4-1ea6-404a-9ae4-a3e52c64823c"
            },
            "spec": {
                "clusterIP": "100.71.14.5",
                "ports": [
                    {
                        "name": "service",
                        "port": 80,
                        "protocol": "TCP",
                        "targetPort": 3000
                    }
                ],
                "selector": {
                    "app": "grafana",
                    "release": "prometheus"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "prometheus.io/scrape": "true"
                },
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app.kubernetes.io/instance": "prometheus",
                    "app.kubernetes.io/managed-by": "Tiller",
                    "app.kubernetes.io/name": "kube-state-metrics",
                    "helm.sh/chart": "kube-state-metrics-2.6.2"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:prometheus.io/scrape": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/managed-by": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:helm.sh/chart": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":8080,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-kube-state-metrics",
                "namespace": "prometheus",
                "resourceVersion": "4548",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-kube-state-metrics",
                "uid": "e569c687-bf71-4003-9046-f93873bbb279"
            },
            "spec": {
                "clusterIP": "100.70.68.114",
                "ports": [
                    {
                        "name": "http",
                        "port": 8080,
                        "protocol": "TCP",
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "app.kubernetes.io/instance": "prometheus",
                    "app.kubernetes.io/name": "kube-state-metrics"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:58Z",
                "labels": {
                    "operated-prometheus": "true"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:operated-prometheus": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"ea13c249-9266-4e5b-a9b4-ba63c20fb249\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":9090,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "operator",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:58Z"
                    }
                ],
                "name": "prometheus-operated",
                "namespace": "prometheus",
                "ownerReferences": [
                    {
                        "apiVersion": "monitoring.coreos.com/v1",
                        "kind": "Prometheus",
                        "name": "prometheus-prometheus-oper-prometheus",
                        "uid": "ea13c249-9266-4e5b-a9b4-ba63c20fb249"
                    }
                ],
                "resourceVersion": "4831",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-operated",
                "uid": "7960ff98-e4af-4818-858e-b26e581f9f70"
            },
            "spec": {
                "clusterIP": "None",
                "ports": [
                    {
                        "name": "web",
                        "port": 9090,
                        "protocol": "TCP",
                        "targetPort": "web"
                    }
                ],
                "selector": {
                    "app": "prometheus"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "prometheus.io/scrape": "true"
                },
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app": "prometheus-node-exporter",
                    "chart": "prometheus-node-exporter-1.8.1",
                    "heritage": "Tiller",
                    "jobLabel": "node-exporter",
                    "release": "prometheus"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:prometheus.io/scrape": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:chart": {},
                                    "f:heritage": {},
                                    "f:jobLabel": {},
                                    "f:release": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":9100,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {},
                                    "f:release": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-prometheus-node-exporter",
                "namespace": "prometheus",
                "resourceVersion": "4554",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-prometheus-node-exporter",
                "uid": "8d966020-7fcc-4102-a23a-b48ec4916728"
            },
            "spec": {
                "clusterIP": "100.71.102.9",
                "ports": [
                    {
                        "name": "metrics",
                        "port": 9100,
                        "protocol": "TCP",
                        "targetPort": 9100
                    }
                ],
                "selector": {
                    "app": "prometheus-node-exporter",
                    "release": "prometheus"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app": "prometheus-operator-alertmanager",
                    "chart": "prometheus-operator-8.5.14",
                    "heritage": "Tiller",
                    "release": "prometheus"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:chart": {},
                                    "f:heritage": {},
                                    "f:release": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":9093,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:alertmanager": {},
                                    "f:app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-prometheus-oper-alertmanager",
                "namespace": "prometheus",
                "resourceVersion": "4559",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-prometheus-oper-alertmanager",
                "uid": "667d8764-58fd-461a-bccb-656228df7592"
            },
            "spec": {
                "clusterIP": "100.65.253.157",
                "ports": [
                    {
                        "name": "web",
                        "port": 9093,
                        "protocol": "TCP",
                        "targetPort": 9093
                    }
                ],
                "selector": {
                    "alertmanager": "prometheus-prometheus-oper-alertmanager",
                    "app": "alertmanager"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app": "prometheus-operator-operator",
                    "chart": "prometheus-operator-8.5.14",
                    "heritage": "Tiller",
                    "release": "prometheus"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:chart": {},
                                    "f:heritage": {},
                                    "f:release": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":8080,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {},
                                    "f:release": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-prometheus-oper-operator",
                "namespace": "prometheus",
                "resourceVersion": "4563",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-prometheus-oper-operator",
                "uid": "2061ed31-35a3-426c-a570-1683b9b89b21"
            },
            "spec": {
                "clusterIP": "100.66.181.134",
                "ports": [
                    {
                        "name": "http",
                        "port": 8080,
                        "protocol": "TCP",
                        "targetPort": "http"
                    },
                    {
                        "name": "https",
                        "port": 443,
                        "protocol": "TCP",
                        "targetPort": "https"
                    }
                ],
                "selector": {
                    "app": "prometheus-operator-operator",
                    "release": "prometheus"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "creationTimestamp": "2020-08-13T01:28:40Z",
                "labels": {
                    "app": "prometheus-operator-prometheus",
                    "chart": "prometheus-operator-8.5.14",
                    "heritage": "Tiller",
                    "release": "prometheus",
                    "self-monitor": "true"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:chart": {},
                                    "f:heritage": {},
                                    "f:release": {},
                                    "f:self-monitor": {}
                                }
                            },
                            "f:spec": {
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":9090,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:app": {},
                                    "f:prometheus": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        },
                        "manager": "Go-http-client",
                        "operation": "Update",
                        "time": "2020-08-13T01:28:40Z"
                    }
                ],
                "name": "prometheus-prometheus-oper-prometheus",
                "namespace": "prometheus",
                "resourceVersion": "4542",
                "selfLink": "/api/v1/namespaces/prometheus/services/prometheus-prometheus-oper-prometheus",
                "uid": "2b15a005-6631-4240-af96-ec6117cf9e7e"
            },
            "spec": {
                "clusterIP": "100.65.37.97",
                "ports": [
                    {
                        "name": "web",
                        "port": 9090,
                        "protocol": "TCP",
                        "targetPort": 9090
                    }
                ],
                "selector": {
                    "app": "prometheus",
                    "prometheus": "prometheus-prometheus-oper-prometheus"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ],
    "kind": "List",
    "metadata": {
        "resourceVersion": "",
        "selfLink": ""
    }
}
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_pods prometheus
+ tracking_process display_pods prometheus
+ [[ -n display_pods ]]
+ local 'func_params=display_pods prometheus'
+ local func_name=display_pods
+ logging_process display_pods prometheus
+ [[ -n display_pods ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183130
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183130 = display_pods' prometheus
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=prometheus
+ kubectl_console 'get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n get pods       --namespace=prometheus       --output wide       --sort-by='{.spec.nodeName}' ]]
+ local 'command_params=get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ execute_command 'kubectl get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl get pods       --namespace=prometheus       --output wide       --sort-by='{.spec.nodeName}' ]]
++ echo -e kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace=prometheus --output wide --sort-by='\''{.spec.nodeName}'\'''
+ logging_process kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183130
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183130 = kubectl' get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ return 0
+ eval kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ kubectl get pods --namespace=prometheus --output wide '--sort-by={.spec.nodeName}'
NAME                                                     READY   STATUS    RESTARTS   AGE     IP              NODE                            NOMINATED NODE   READINESS GATES
alertmanager-prometheus-prometheus-oper-alertmanager-0   2/2     Running   0          2m43s   100.116.0.5     ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-node-exporter-sk9w9                1/1     Running   0          2m51s   172.20.45.53    ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-oper-operator-666b58fc6c-6hltr     2/2     Running   0          2m51s   100.116.0.4     ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-node-exporter-kg4lk                1/1     Running   0          2m51s   172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-57b4n                1/1     Running   0          2m51s   172.20.84.104   ip-172-20-84-104.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-n2dxk                1/1     Running   0          2m51s   172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-7mjr6                1/1     Running   0          2m51s   172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-fchwv                1/1     Running   0          2m51s   172.20.127.92   ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-grafana-86c695c58f-n2ddg                      2/2     Running   0          2m51s   100.100.0.5     ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-kube-state-metrics-7b69c4fc7-tr2wx            1/1     Running   0          2m51s   100.100.0.4     ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-prometheus-prometheus-oper-prometheus-0       3/3     Running   1          2m33s   100.100.0.6     ip-172-20-127-92.ec2.internal   <none>           <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ return 0
+ [[ true == true ]]
+ deploy_dashboard prototype.emvaldes.name
+ tracking_process deploy_dashboard prototype.emvaldes.name
+ [[ -n deploy_dashboard ]]
+ local 'func_params=deploy_dashboard prototype.emvaldes.name'
+ local func_name=deploy_dashboard
+ logging_process deploy_dashboard prototype.emvaldes.name
+ [[ -n deploy_dashboard ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183131
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183131 = deploy_dashboard' prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n x ]]
+ cluster_name=prototype.emvaldes.name
+ dashboard_console='api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login'
+ display_message 'Creating Kubernetes Dashboard ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Creating Kubernetes Dashboard ...'
+ inline 'Creating Kubernetes Dashboard ...\n'
+ echo -en 'Creating Kubernetes Dashboard ...\n'
Creating Kubernetes Dashboard ...
+ kubectl_console 'apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml'
+ [[ -n apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml ]]
+ local 'command_params=apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml'
+ execute_command 'kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml'
+ [[ -n kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml ]]
++ echo -e kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml'
+ logging_process kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183131
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183131 = kubectl' apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
+ return 0
+ eval kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
++ kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
secret/kubernetes-dashboard-certs created
serviceaccount/kubernetes-dashboard created
role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
deployment.apps/kubernetes-dashboard created
service/kubernetes-dashboard created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Generating console-user and credentials ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Generating console-user and credentials ...'
+ inline 'Generating console-user and credentials ...\n'
+ echo -en 'Generating console-user and credentials ...\n'
Generating console-user and credentials ...
+ kubectl_console 'create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true'
+ [[ -n create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true ]]
+ local 'command_params=create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true'
+ execute_command 'kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true'
+ [[ -n kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true ]]
++ echo -e kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true'
+ logging_process kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183134
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183134 = kubectl' create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true
+ return 0
+ eval kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true
++ kubectl create --filename /Users/emvaldes/etc/configs/dashboard/sample-user.yaml --record=true
serviceaccount/admin-user created
clusterrolebinding.rbac.authorization.k8s.io/admin-user created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Displaying console-user configuration ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Displaying console-user configuration ...'
+ inline 'Displaying console-user configuration ...\n'
+ echo -en 'Displaying console-user configuration ...\n'
Displaying console-user configuration ...
++ kubectl_console '--namespace kube-system get secret'
++ [[ -n --namespace kube-system get secret ]]
++ local 'command_params=--namespace kube-system get secret'
++ grep admin-user
++ execute_command 'kubectl --namespace kube-system get secret'
++ [[ -n kubectl --namespace kube-system get secret ]]
++ awk '{print $1}'
+++ echo -e kubectl --namespace kube-system get secret
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=kubectl --namespace kube-system get secret'
++ logging_process kubectl --namespace kube-system get secret
++ [[ -n kubectl ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183135
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183135 = kubectl' --namespace kube-system get secret
++ return 0
++ eval kubectl --namespace kube-system get secret
+++ kubectl --namespace kube-system get secret
+ kubectl_console '--namespace kube-system describe secret admin-user-token-68rhk'
+ [[ -n --namespace kube-system describe secret admin-user-token-68rhk ]]
+ local 'command_params=--namespace kube-system describe secret admin-user-token-68rhk'
+ execute_command 'kubectl --namespace kube-system describe secret admin-user-token-68rhk'
+ [[ -n kubectl --namespace kube-system describe secret admin-user-token-68rhk ]]
++ echo -e kubectl --namespace kube-system describe secret admin-user-token-68rhk
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl --namespace kube-system describe secret admin-user-token-68rhk'
+ logging_process kubectl --namespace kube-system describe secret admin-user-token-68rhk
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183136
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183136 = kubectl' --namespace kube-system describe secret admin-user-token-68rhk
+ return 0
+ eval kubectl --namespace kube-system describe secret admin-user-token-68rhk
++ kubectl --namespace kube-system describe secret admin-user-token-68rhk
Name:         admin-user-token-68rhk
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: 42cd21bf-c96d-48f5-bc46-5f324edef570

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1042 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Ik1OczllclV5b2xkOEdzOXdEWjd5MVdZWVN5NzJ3VjlicW9zMHFXYkhlbkEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTY4cmhrIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0MmNkMjFiZi1jOTZkLTQ4ZjUtYmM0Ni01ZjMyNGVkZWY1NzAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.LsZACwwkpKmEVYNT5COqyqlIIWgkpIlcrkA8j6i42UvNGlsOR7PxH7h9u0HtPN7MmGKV92DTUFmGaXGA-eiXYML0SIC2j_M1ZNdGMYkdig71Sjh7SlIPYuX_HhtZGESJJb8YkKTMgOmZLjbP-m5TkeYAlcX8EC0PQ-y-RLdoK4nMWGCcj4cC_PdoH889RWf12TMHsGWcKHvQf-6jskHYONODTP05Inbv1yVdIpQsDN785AnAN4tX4VzcJXMXrqLy_cnDnvYMErRuZoeeLzRDsOV3HJjDjfEFASVQaYzlofh8ggGUH_nUSBb2fts24jnZNsuBEDlO76EjrgbfiR5pPg
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ [[ k8s-ec2 == \k\8\s\-\e\c\2 ]]
+ display_message 'Dashboard Console-Admin = https://api.prototype.emvaldes.name'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Dashboard Console-Admin = https://api.prototype.emvaldes.name'
+ inline 'Dashboard Console-Admin = https://api.prototype.emvaldes.name\n'
+ echo -en 'Dashboard Console-Admin = https://api.prototype.emvaldes.name\n'
Dashboard Console-Admin = https://api.prototype.emvaldes.name
+ display_message 'Dashboard User-Credentials:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Dashboard User-Credentials:'
+ inline 'Dashboard User-Credentials:\n'
+ echo -en 'Dashboard User-Credentials:\n'
Dashboard User-Credentials:
+ kubectl_console 'config view'
+ egrep -A3 '\- name: prototype.emvaldes.name-basic-auth'
+ [[ -n config view ]]
+ local 'command_params=config view'
+ execute_command 'kubectl config view'
+ [[ -n kubectl config view ]]
++ echo -e kubectl config view
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config view'
+ logging_process kubectl config view
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183137
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183137 = kubectl' config view
+ return 0
+ eval kubectl config view
++ kubectl config view
+ debugging_process 1
+ [[ 3 == true ]]
+ return 0
+ display_message 'Dashboard Web-Console = https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Dashboard Web-Console = https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login'
+ inline 'Dashboard Web-Console = https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\n'
+ echo -en 'Dashboard Web-Console = https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\n'
Dashboard Web-Console = https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login
+ display_message 'Console User-Token:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Console User-Token:'
+ inline 'Console User-Token:\n'
+ echo -en 'Console User-Token:\n'
Console User-Token:
+ egrep '^token.*$'
+ awk '{print $2}'
++ kubectl_console '--namespace kube-system get secret'
++ [[ -n --namespace kube-system get secret ]]
++ local 'command_params=--namespace kube-system get secret'
++ grep admin-user
++ execute_command 'kubectl --namespace kube-system get secret'
++ [[ -n kubectl --namespace kube-system get secret ]]
++ awk '{print $1}'
+++ echo -e kubectl --namespace kube-system get secret
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=kubectl --namespace kube-system get secret'
++ logging_process kubectl --namespace kube-system get secret
++ [[ -n kubectl ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183137
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183137 = kubectl' --namespace kube-system get secret
++ return 0
++ eval kubectl --namespace kube-system get secret
+++ kubectl --namespace kube-system get secret
+ kubectl_console '--namespace kube-system describe secret admin-user-token-68rhk'
+ [[ -n --namespace kube-system describe secret admin-user-token-68rhk ]]
+ local 'command_params=--namespace kube-system describe secret admin-user-token-68rhk'
+ execute_command 'kubectl --namespace kube-system describe secret admin-user-token-68rhk'
+ [[ -n kubectl --namespace kube-system describe secret admin-user-token-68rhk ]]
++ echo -e kubectl --namespace kube-system describe secret admin-user-token-68rhk
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl --namespace kube-system describe secret admin-user-token-68rhk'
+ logging_process kubectl --namespace kube-system describe secret admin-user-token-68rhk
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183138
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183138 = kubectl' --namespace kube-system describe secret admin-user-token-68rhk
+ return 0
+ eval kubectl --namespace kube-system describe secret admin-user-token-68rhk
++ kubectl --namespace kube-system describe secret admin-user-token-68rhk
eyJhbGciOiJSUzI1NiIsImtpZCI6Ik1OczllclV5b2xkOEdzOXdEWjd5MVdZWVN5NzJ3VjlicW9zMHFXYkhlbkEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTY4cmhrIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0MmNkMjFiZi1jOTZkLTQ4ZjUtYmM0Ni01ZjMyNGVkZWY1NzAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.LsZACwwkpKmEVYNT5COqyqlIIWgkpIlcrkA8j6i42UvNGlsOR7PxH7h9u0HtPN7MmGKV92DTUFmGaXGA-eiXYML0SIC2j_M1ZNdGMYkdig71Sjh7SlIPYuX_HhtZGESJJb8YkKTMgOmZLjbP-m5TkeYAlcX8EC0PQ-y-RLdoK4nMWGCcj4cC_PdoH889RWf12TMHsGWcKHvQf-6jskHYONODTP05Inbv1yVdIpQsDN785AnAN4tX4VzcJXMXrqLy_cnDnvYMErRuZoeeLzRDsOV3HJjDjfEFASVQaYzlofh8ggGUH_nUSBb2fts24jnZNsuBEDlO76EjrgbfiR5pPg
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ true == true ]]
+ [[ -d /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype ]]
+ cluster_application helloworld prototype.emvaldes.name
+ tracking_process cluster_application helloworld prototype.emvaldes.name
+ [[ -n cluster_application ]]
+ local 'func_params=cluster_application helloworld prototype.emvaldes.name'
+ local func_name=cluster_application
+ logging_process cluster_application helloworld prototype.emvaldes.name
+ [[ -n cluster_application ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183139
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183139 = cluster_application' helloworld prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n helloworld ]]
+ local target_application=helloworld
+ [[ -n prototype.emvaldes.name ]]
+ target_version=prototype.emvaldes.name
+ display_message 'Generating Application Container (Pod: helloworld) ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Generating Application Container (Pod: helloworld) ...'
+ inline 'Generating Application Container (Pod: helloworld) ...\n'
+ echo -en 'Generating Application Container (Pod: helloworld) ...\n'
Generating Application Container (Pod: helloworld) ...
+ create_ecrrepo helloworld
+ tracking_process create_ecrrepo helloworld
+ [[ -n create_ecrrepo ]]
+ local 'func_params=create_ecrrepo helloworld'
+ local func_name=create_ecrrepo
+ logging_process create_ecrrepo helloworld
+ [[ -n create_ecrrepo ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183139
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183139 = create_ecrrepo' helloworld
+ return 0
+ return 0
+ [[ -n helloworld ]]
+ local docker_application=helloworld
++ services_console '--profile default                     --region us-east-1                     ecr describe-repositories                     --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''                     --output text'
++ [[ -n --profile default                     --region us-east-1                     ecr describe-repositories                     --query 'repositories[?repositoryName==`helloworld`].repositoryName'                     --output text ]]
++ local 'command_params=--profile default                     --region us-east-1                     ecr describe-repositories                     --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''                     --output text'
++ execute_command 'aws --profile default                     --region us-east-1                     ecr describe-repositories                     --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''                     --output text'
++ [[ -n aws --profile default                     --region us-east-1                     ecr describe-repositories                     --query 'repositories[?repositoryName==`helloworld`].repositoryName'                     --output text ]]
+++ echo -e aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile default --region us-east-1 ecr describe-repositories --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\'' --output text'
++ logging_process aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183139
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183139 = aws' --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ return 0
++ eval aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
+++ aws --profile default --region us-east-1 ecr describe-repositories --query 'repositories[?repositoryName==`helloworld`].repositoryName' --output text
+ local repo_exists=helloworld
+ case "${#repo_exists}" in
+ print 'Warning: AWS ECR '\''helloworld'\'' already exists! '
+ inline 'Warning: AWS ECR '\''helloworld'\'' already exists! \n'
+ echo -en 'Warning: AWS ECR '\''helloworld'\'' already exists! \n'
Warning: AWS ECR 'helloworld' already exists!
+ services_console '--profile default                       --region us-east-1                       ecr describe-repositories                       --query '\''repositories[?repositoryName==`helloworld`]'\'''
+ [[ -n --profile default                       --region us-east-1                       ecr describe-repositories                       --query 'repositories[?repositoryName==`helloworld`]' ]]
+ local 'command_params=--profile default                       --region us-east-1                       ecr describe-repositories                       --query '\''repositories[?repositoryName==`helloworld`]'\'''
+ execute_command 'aws --profile default                       --region us-east-1                       ecr describe-repositories                       --query '\''repositories[?repositoryName==`helloworld`]'\'''
+ [[ -n aws --profile default                       --region us-east-1                       ecr describe-repositories                       --query 'repositories[?repositoryName==`helloworld`]' ]]
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ echo -e aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`]'\'''
+ local 'command_params=aws --profile default --region us-east-1 ecr describe-repositories --query '\''repositories[?repositoryName==`helloworld`]'\'''
+ logging_process aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`]'\'''
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183141
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183141 = aws' --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`]'\'''
+ return 0
+ eval aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`]'\'''
++ aws --profile default --region us-east-1 ecr describe-repositories --query 'repositories[?repositoryName==`helloworld`]'
[
    {
        "repositoryArn": "arn:aws:ecr:us-east-1:123456789012:repository/helloworld",
        "registryId": "123456789012",
        "repositoryName": "helloworld",
        "repositoryUri": "123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld",
        "createdAt": "2020-08-12T17:56:27-07:00",
        "imageTagMutability": "MUTABLE",
        "imageScanningConfiguration": {
            "scanOnPush": false
        }
    }
]
+ return 0
+ publish_container default helloworld prototype.emvaldes.name
+ tracking_process publish_container default helloworld prototype.emvaldes.name
+ [[ -n publish_container ]]
+ local 'func_params=publish_container default helloworld prototype.emvaldes.name'
+ local func_name=publish_container
+ logging_process publish_container default helloworld prototype.emvaldes.name
+ [[ -n publish_container ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183142
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183142 = publish_container' default helloworld prototype.emvaldes.name
+ return 0
+ return 0
+ mkdir -p /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ -n default ]]
+ local source_dockerfile=default
+ [[ default == \d\e\f\a\u\l\t ]]
+ source_dockerfile=/Users/emvaldes/etc/configs/docker
+ [[ -n helloworld ]]
+ docker_application=helloworld
+ [[ -n prototype.emvaldes.name ]]
+ local repo_version=prototype.emvaldes.name
+ [[ -f /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile ]]
+ cp -v /Users/emvaldes/etc/configs/docker/Dockerfile /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/
/Users/emvaldes/etc/configs/docker/Dockerfile -> /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile
++ services_console '--profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ [[ -n --profile default             --region us-east-1             ecr describe-repositories             --query 'repositories[?repositoryName==`helloworld`].repositoryName'             --output text ]]
++ local 'command_params=--profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ execute_command 'aws --profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ [[ -n aws --profile default             --region us-east-1             ecr describe-repositories             --query 'repositories[?repositoryName==`helloworld`].repositoryName'             --output text ]]
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+++ echo -e aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ local 'command_params=aws --profile default --region us-east-1 ecr describe-repositories --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\'' --output text'
++ logging_process aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183142
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183142 = aws' --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ return 0
++ eval aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
+++ aws --profile default --region us-east-1 ecr describe-repositories --query 'repositories[?repositoryName==`helloworld`].repositoryName' --output text
+ local repo_exists=helloworld
+ case "${#repo_exists}" in
+ [[ -d /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype ]]
+ cd /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ 12 -eq 0 ]]
+ local fetched=1
+ print 'Fetched: 1'
+ inline 'Fetched: 1\n'
+ echo -en 'Fetched: 1\n'
Fetched: 1
+ [[ 12 -eq 12 ]]
+ local ecr_location=123456789012.dkr.ecr.us-east-1.amazonaws.com
+ local target_ecrrepo=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED             SIZE
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
<none>                                                    <none>                                           2315368900da        34 minutes ago      218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago         64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago        41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago        36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago        279MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago        82.7MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago        159MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago        83.5MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago        151MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago        35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago        50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago        42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago       247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago       44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago         742kB
+ docker build . --tag helloworld:prototype.emvaldes.name
Sending build context to Docker daemon   2.56kB
Step 1/11 : FROM ubuntu:18.04
 ---> 2eb2d388e1a2
Step 2/11 : ARG TERM=xterm
 ---> Using cache
 ---> d525fe78fbf6
Step 3/11 : ARG LC_ALL=C.UTF-8
 ---> Using cache
 ---> a2aa7522b346
Step 4/11 : ARG DEBIAN_FRONTEND=noninteractive
 ---> Using cache
 ---> 805fac10da8f
Step 5/11 : RUN apt-get update -y &&     apt-get install -y --no-install-recommends apt-utils
 ---> Using cache
 ---> bd3953d2ce97
Step 6/11 : RUN apt-get update -y &&     apt-get upgrade -y &&     apt-get install -y lsb-release
 ---> Using cache
 ---> f2e86da4a470
Step 7/11 : RUN apt-get -y install apache2
 ---> Using cache
 ---> 51c2aef59a1c
Step 8/11 : RUN echo 'Hello DevOps Engineers! (latest: 00000000000000)' > /var/www/html/index.html
 ---> Using cache
 ---> 9a4a99954ae4
Step 9/11 : RUN echo '. /etc/apache2/envvars' > /root/run_apache.sh &&  echo 'mkdir -p /var/run/apache2' >> /root/run_apache.sh &&  echo 'mkdir -p /var/lock/apache2' >> /root/run_apache.sh &&  echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh &&  chmod 755 /root/run_apache.sh
 ---> Using cache
 ---> d40fca1bf929
Step 10/11 : EXPOSE 80
 ---> Using cache
 ---> c248b9901b72
Step 11/11 : CMD /root/run_apache.sh
 ---> Using cache
 ---> 2315368900da
Successfully built 2315368900da
Successfully tagged helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED             SIZE
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
helloworld                                                prototype.emvaldes.name                          2315368900da        34 minutes ago      218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago         64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago        41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago        36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago        279MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago        151MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago        159MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago        82.7MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago        83.5MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago        35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago        50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago        42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago       247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago       44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago         742kB
+ docker tag helloworld:prototype.emvaldes.name 123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED             SIZE
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   prototype.emvaldes.name                          2315368900da        34 minutes ago      218MB
helloworld                                                prototype.emvaldes.name                          2315368900da        34 minutes ago      218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago         64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago        41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago        36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago        279MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago        82.7MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago        83.5MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago        151MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago        159MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago        35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago        50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago        42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago       247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago       44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago         742kB
+ return 0
+ local published=0
+ print 'Published: 0'
+ inline 'Published: 0\n'
+ echo -en 'Published: 0\n'
Published: 0
+ [[ 0 -gt 0 ]]
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ export container_content=/var/www/html/index.html
+ container_content=/var/www/html/index.html
+ repo_version=k8s-cluster
++ date +%Y%m%d%H%M%S
+ sed -i -e 's|^\(RUN echo '\''Hello.*\)\((\)\(.*\)\()\)\(.*\)$|\1\2k8s-cluster.prototype.emvaldes.name: 20200812183144\4\5|g' /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile
+ rm /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile-e
+ rollout_deployment /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ tracking_process rollout_deployment /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ [[ -n rollout_deployment ]]
+ local 'func_params=rollout_deployment /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name'
+ local func_name=rollout_deployment
+ logging_process rollout_deployment /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ [[ -n rollout_deployment ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183144
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183144 = rollout_deployment' /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ return 0
+ return 0
+ mkdir -p /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ -n /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype ]]
+ local source_dockerfile=/tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype == \d\e\f\a\u\l\t ]]
+ [[ -n helloworld ]]
+ target_application=helloworld
+ [[ -n prototype.emvaldes.name ]]
+ local target_version=prototype.emvaldes.name
+ [[ -f /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile ]]
+ print 'Modifying Prototype [helloworld:prototype.emvaldes.name] ...'
+ inline 'Modifying Prototype [helloworld:prototype.emvaldes.name] ...\n'
+ echo -en 'Modifying Prototype [helloworld:prototype.emvaldes.name] ...\n'
Modifying Prototype [helloworld:prototype.emvaldes.name] ...
+ publish_container /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ tracking_process publish_container /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ [[ -n publish_container ]]
+ local 'func_params=publish_container /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name'
+ local func_name=publish_container
+ logging_process publish_container /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ [[ -n publish_container ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183144
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183144 = publish_container' /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype helloworld prototype.emvaldes.name
+ return 0
+ return 0
+ mkdir -p /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ -n /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype ]]
+ local source_dockerfile=/tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype == \d\e\f\a\u\l\t ]]
+ [[ -n helloworld ]]
+ docker_application=helloworld
+ [[ -n prototype.emvaldes.name ]]
+ local repo_version=prototype.emvaldes.name
+ [[ -f /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype/Dockerfile ]]
++ services_console '--profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ [[ -n --profile default             --region us-east-1             ecr describe-repositories             --query 'repositories[?repositoryName==`helloworld`].repositoryName'             --output text ]]
++ local 'command_params=--profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ execute_command 'aws --profile default             --region us-east-1             ecr describe-repositories             --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\''             --output text'
++ [[ -n aws --profile default             --region us-east-1             ecr describe-repositories             --query 'repositories[?repositoryName==`helloworld`].repositoryName'             --output text ]]
+++ echo -e aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile default --region us-east-1 ecr describe-repositories --query '\''repositories[?repositoryName==`helloworld`].repositoryName'\'' --output text'
++ logging_process aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183144
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183144 = aws' --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
++ return 0
++ eval aws --profile default --region us-east-1 ecr describe-repositories --query ''\''repositories[?repositoryName==`helloworld`].repositoryName'\''' --output text
+++ aws --profile default --region us-east-1 ecr describe-repositories --query 'repositories[?repositoryName==`helloworld`].repositoryName' --output text
+ local repo_exists=helloworld
+ case "${#repo_exists}" in
+ [[ -d /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype ]]
+ cd /tmp/clusters/k8s-cluster/docker/emvaldes.name/prototype
+ [[ 12 -eq 0 ]]
+ local fetched=1
+ print 'Fetched: 1'
+ inline 'Fetched: 1\n'
+ echo -en 'Fetched: 1\n'
Fetched: 1
+ [[ 12 -eq 12 ]]
+ local ecr_location=123456789012.dkr.ecr.us-east-1.amazonaws.com
+ local target_ecrrepo=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED             SIZE
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago      218MB
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   prototype.emvaldes.name                          2315368900da        34 minutes ago      218MB
helloworld                                                prototype.emvaldes.name                          2315368900da        34 minutes ago      218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago         64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago        41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago        36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago        279MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago        82.7MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago        159MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago        83.5MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago        151MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago        35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago        50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago        42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago       247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago       44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago         742kB
+ docker build . --tag helloworld:prototype.emvaldes.name
Sending build context to Docker daemon   2.56kB
Step 1/11 : FROM ubuntu:18.04
 ---> 2eb2d388e1a2
Step 2/11 : ARG TERM=xterm
 ---> Using cache
 ---> d525fe78fbf6
Step 3/11 : ARG LC_ALL=C.UTF-8
 ---> Using cache
 ---> a2aa7522b346
Step 4/11 : ARG DEBIAN_FRONTEND=noninteractive
 ---> Using cache
 ---> 805fac10da8f
Step 5/11 : RUN apt-get update -y &&     apt-get install -y --no-install-recommends apt-utils
 ---> Using cache
 ---> bd3953d2ce97
Step 6/11 : RUN apt-get update -y &&     apt-get upgrade -y &&     apt-get install -y lsb-release
 ---> Using cache
 ---> f2e86da4a470
Step 7/11 : RUN apt-get -y install apache2
 ---> Using cache
 ---> 51c2aef59a1c
Step 8/11 : RUN echo 'Hello DevOps Engineers! (k8s-cluster.prototype.emvaldes.name: 20200812183144)' > /var/www/html/index.html
 ---> Running in a1a1e8214389
Removing intermediate container a1a1e8214389
 ---> 9bac16fbc022
Step 9/11 : RUN echo '. /etc/apache2/envvars' > /root/run_apache.sh &&  echo 'mkdir -p /var/run/apache2' >> /root/run_apache.sh &&  echo 'mkdir -p /var/lock/apache2' >> /root/run_apache.sh &&  echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh &&  chmod 755 /root/run_apache.sh
 ---> Running in b8a3a6858e27
Removing intermediate container b8a3a6858e27
 ---> 7790047d6fe7
Step 10/11 : EXPOSE 80
 ---> Running in e0ae2550ba80
Removing intermediate container e0ae2550ba80
 ---> dfad841db45e
Step 11/11 : CMD /root/run_apache.sh
 ---> Running in f0d7eea355c8
Removing intermediate container f0d7eea355c8
 ---> c07ad120ad56
Successfully built c07ad120ad56
Successfully tagged helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED                  SIZE
helloworld                                                prototype.emvaldes.name                          c07ad120ad56        Less than a second ago   218MB
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago           218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago           218MB
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   prototype.emvaldes.name                          2315368900da        34 minutes ago           218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago              64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago             41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago             36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago             279MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago             83.5MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago             159MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago             82.7MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago             151MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago             35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago             50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago             42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago            247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago            44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago              742kB
+ docker tag helloworld:prototype.emvaldes.name 123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ docker images
REPOSITORY                                                TAG                                              IMAGE ID            CREATED                  SIZE
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   prototype.emvaldes.name                          c07ad120ad56        Less than a second ago   218MB
helloworld                                                prototype.emvaldes.name                          c07ad120ad56        Less than a second ago   218MB
123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld   kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago           218MB
helloworld                                                kubernetes.emvaldes.name                         5934dc695f26        34 minutes ago           218MB
<none>                                                    <none>                                           2315368900da        34 minutes ago           218MB
ubuntu                                                    18.04                                            2eb2d388e1a2        2 weeks ago              64.2MB
docker/desktop-storage-provisioner                        v1.1                                             e704287ce753        4 months ago             41.8MB
docker/desktop-vpnkit-controller                          v1.0                                             79da37e5a3aa        5 months ago             36.6MB
docker/desktop-kubernetes                                 kubernetes-v1.16.5-cni-v0.7.5-critools-v1.15.0   a86647f0b376        6 months ago             279MB
k8s.gcr.io/kube-apiserver                                 v1.16.5                                          fc838b21afbb        7 months ago             159MB
k8s.gcr.io/kube-scheduler                                 v1.16.5                                          b4d073a9efda        7 months ago             83.5MB
k8s.gcr.io/kube-controller-manager                        v1.16.5                                          441835dd2301        7 months ago             151MB
k8s.gcr.io/kube-proxy                                     v1.16.5                                          0ee1b8a3ebe0        7 months ago             82.7MB
docker/kube-compose-controller                            v0.4.25-alpha1                                   129151cdf35f        9 months ago             35.6MB
docker/kube-compose-api-server                            v0.4.25-alpha1                                   989749268895        9 months ago             50.7MB
docker/kube-compose-installer                             v0.4.25-alpha1                                   2a71ac5a1359        9 months ago             42.3MB
k8s.gcr.io/etcd                                           3.3.15-0                                         b2756210eeab        11 months ago            247MB
k8s.gcr.io/coredns                                        1.6.2                                            bf261d157914        12 months ago            44.1MB
k8s.gcr.io/pause                                          3.1                                              da86e6ba6ca1        2 years ago              742kB
+ return 0
+ [[ 12 -eq 0 ]]
+ local fetched=1
+ print 'Fetched: 1'
+ inline 'Fetched: 1\n'
+ echo -en 'Fetched: 1\n'
Fetched: 1
+ [[ 12 -eq 12 ]]
+ local ecr_location=123456789012.dkr.ecr.us-east-1.amazonaws.com
+ local target_ecrrepo=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
The push refers to repository [123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld]
b089a4848f86: Pushed
741b02ce4929: Pushed
6b6cc979c6ee: Layer already exists
5e1b77c7e62e: Layer already exists
de18eb459291: Layer already exists
8682f9a74649: Layer already exists
d3a6da143c91: Layer already exists
83f4287e1f04: Layer already exists
7ef368776582: Layer already exists
prototype.emvaldes.name: digest: sha256:caff7b4907fd122b60b05b936b6bcd4592bdfe33e4044e4b28af8ea7fd9503ee size: 2202
+ local pushed=0
+ print 'Pushed: 0'
+ inline 'Pushed: 0\n'
+ echo -en 'Pushed: 0\n'
Pushed: 0
+ services_console '--profile default                         --region us-east-1                         ecr describe-repositories                         --repository-name helloworld'
+ [[ -n --profile default                         --region us-east-1                         ecr describe-repositories                         --repository-name helloworld ]]
+ local 'command_params=--profile default                         --region us-east-1                         ecr describe-repositories                         --repository-name helloworld'
+ execute_command 'aws --profile default                         --region us-east-1                         ecr describe-repositories                         --repository-name helloworld'
+ [[ -n aws --profile default                         --region us-east-1                         ecr describe-repositories                         --repository-name helloworld ]]
++ echo -e aws --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=aws --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld'
+ logging_process aws --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld
+ [[ -n aws ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183151
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183151 = aws' --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld
+ return 0
+ eval aws --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld
++ aws --profile default --region us-east-1 ecr describe-repositories --repository-name helloworld
{
    "repositories": [
        {
            "repositoryArn": "arn:aws:ecr:us-east-1:123456789012:repository/helloworld",
            "registryId": "123456789012",
            "repositoryName": "helloworld",
            "repositoryUri": "123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld",
            "createdAt": "2020-08-12T17:56:27-07:00",
            "imageTagMutability": "MUTABLE",
            "imageScanningConfiguration": {
                "scanOnPush": false
            }
        }
    ]
}
++ services_console '--profile default                             --region us-east-1                             ecr get-authorization-token                             --output text                             --query '\''authorizationData[].authorizationToken'\'''
++ [[ -n --profile default                             --region us-east-1                             ecr get-authorization-token                             --output text                             --query 'authorizationData[].authorizationToken' ]]
++ local 'command_params=--profile default                             --region us-east-1                             ecr get-authorization-token                             --output text                             --query '\''authorizationData[].authorizationToken'\'''
++ execute_command 'aws --profile default                             --region us-east-1                             ecr get-authorization-token                             --output text                             --query '\''authorizationData[].authorizationToken'\'''
++ [[ -n aws --profile default                             --region us-east-1                             ecr get-authorization-token                             --output text                             --query 'authorizationData[].authorizationToken' ]]
+++ echo -e aws --profile default --region us-east-1 ecr get-authorization-token --output text --query ''\''authorizationData[].authorizationToken'\'''
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=aws --profile default --region us-east-1 ecr get-authorization-token --output text --query '\''authorizationData[].authorizationToken'\'''
++ logging_process aws --profile default --region us-east-1 ecr get-authorization-token --output text --query ''\''authorizationData[].authorizationToken'\'''
++ [[ -n aws ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183153
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183153 = aws' --profile default --region us-east-1 ecr get-authorization-token --output text --query ''\''authorizationData[].authorizationToken'\'''
++ return 0
++ eval aws --profile default --region us-east-1 ecr get-authorization-token --output text --query ''\''authorizationData[].authorizationToken'\'''
+++ aws --profile default --region us-east-1 ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken'
+ local ECR_TOKEN=QVdTOmV5SndZWGxzYjJGa0lqb2lZWFZGVFRsMVEyVmxTV2MzSzB0eGFUUXlXRVZ5U25ST2FWaFFTRFJCVjFsdFYzZzVXa2xLYW1WWWIwMUxPWFZHZWpGNmMxRkpWbVozYW5OemIwdHJlWE5QUnpCTk9GSk1hR2hpWjBKQ1pEQmhhRWR0WTBWVWIwMXhUSG8zUjBSR1duVkxLMHAxYjFGcEwwOHlRbkl3WVZKa2NVMWFlbUlyT0ZCNVJVWXlWalpFZVZCTVRWcEpPSFZXVkhaSFpuZ3JibEU1VmpJelpEUk5RVVZQYlZwQ1RFeHJSVWxKVW1sSlRrOVVTR3hGV0hrMlRWcEpXbTlHTkhSV1JXTnNaSFZFYVRaeWRGTllWR28yVlhjMFRrZGxkU3R6U1VKRlpGSlRRMnR1UVUxWlQyb3diblF3UzI5aVNHMXpPR2wzY3l0VmNsbGhNVTlpUWtSS2MzVjZiVVkxZW1obGFFWnJlR0l5VmtGWGNVb3dNRFZMTVVKYVYyUkxRWGRITVRWcVFXczJUMEp2TWpsQmRuRnFRbnA0VmtOUmIybFdPVEl4YUVGdk1qQnhaM1I1ZUVWWE5rRTBMMHMwUW1ZM2JrVjRiSEpZVlZkRVJWVlhRMDgyTkVKU05IWXhhMjltUTI1c1ZXTkVTbWhrUmpOdU9FeFplakYzU1hoS1ZscHNTVzEzUWxSdGNUVndXbEo2UlZWRVFtOU1RVGhRY1RoT1JXY3ZVbkUxY2tSS1kzSnlVbWRCZDBadlRVUlRPRW80VEZnNFNFMVhTRTlYWTJJNVNXYzRWRlJwVDNoa1lYQkJZa1UzU0UxTU9XZHJNbFZtYldKNVF6bE1hbWx4Tldwc01qUlRVbGRyVjBOSFVURXdiR3BFTlZJekszcDJibEpzZUVnMEswMXRTeTl3WjB4RkswVkhWR3RQTTA1d1p6VnRiMWxUUVcwdkwxRnpZbFY1U3pNM2JXaEVURnB0UVdKSFNVcE9ZbWx1VmxOUlFuSlRkR05uVjI5SWNuVXpiR2xFUTBsNU16ZDRkM0JKVkROeFltUlBhR2R5Tm5OWFp6Sk1TVkUzYjB0eU1rZEZSRWRyVDNOcmJHMU5XR1pMZERaQ2FuSnBlSE5FUTA5b1RUTlVjbFZrWVdOd1dWY3ZlREkwVEZaRlUyd3dOelI1VTBWM2VXOU9TM3BqYlZnM09GcEZZbGhHTlVGRlZEY3ZkSEJOWjNkR1VFOUJWVFl3VEZKcFRFNVRVVnBMTkVsbFIzSk9UamxSY2psNVFrc3laVk15V1U1SGFYZG5WRTlIVkhadGQwVnNSVll3YjFoTGNVbGlWeXMyU201aEx6ZDNSMFl5ZUZkU09FZFJWMjg0Y25ScVZWZG9TVlpaWkZjd2FHbG9TemhhVEhkc2R6Qk5VRnAwZG0xck1sZzRSSFJQY0U1SlRIbFBUR3gxUkVoWVV6ZG9TSGxPU1dNMlJ5dEJWM3BOVHpCT1ZsY3lWVlEwY0hONlZEZHBTR3RFTlhWNE9GZElPV1YzWlRGalNYb3lNMU53T1hOc1JVSnpXREExYjNFeWRtdERhR1ZUYWtoTmNqSndhaXMzZUVzMlN6UnRaVTlUUWtoamVIQmFjV2RHT1ZocFlYQkVhMjB5T0ZvNVMxRXlaVEYyTjNkTlNWSm1iRzkzVFRNMVVXd3pZVlIzWjI1RFdYVkxXVGhHVGpSSlZsbGlNa1I2ZVdOWWNWaFdSbVJUZFdaamNuSlJWbUZ5UlZCMFVYSjVUa2xtZEZkNWFWUnNXWHBMWlVKSVlqUTRTM2htYURsclJtaEZVRXh1WWpBeWNFeERXRXRXYlVGUVNHcDNkWEJCVUc1eFNtRm5NRlZCVUV0TE0zb3dhV0puZGxCeFZYQjNNRGwxY21wSGVWUk9jSFl6UXpSSVZWQndVQ3RtS3pRMmIyWnRNV0puYzNFeVdWRkliakZvVUN0TlVITnRlbFF3TVZWdVZFaFpNRXRpWlU5d2JFbE5SR1JoYlU5a01YaElXV1puYnpKQ1FWVnNibnBMY2pWWFlVMXhWbTlDYjAxbU0zQktXVGxpVGxsT2RXY3ZaMUUzVGtSRVVWSjJXR0Y0TVRVdmMwZFNSR0pXUTFaWlVVUTJNbVI0UkNJc0ltUmhkR0ZyWlhraU9pSkJVVVZDUVVob2QyMHdXV0ZKVTBwbFVuUktiVFZ1TVVjMmRYRmxaV3RZZFc5WVdGQmxOVlZHWTJVNVVuRTRMekUwZDBGQlFVZzBkMlpCV1VwTGIxcEphSFpqVGtGUlkwZHZSemgzWWxGSlFrRkVRbTlDWjJ0eGFHdHBSemwzTUVKQ2QwVjNTR2RaU2xsSldrbEJWMVZFUWtGRmRVMUNSVVZFUTJKRFEycHJabE5vZDNKRWFtWXljMEZKUWtWSlFUZHhaM0ZTT0UxSWVpOWhlVUZGVlc4MVRIaFNZM2hrTWsxQ1dFTlhjVmRrYXpseGRYaG1SalJzUnl0WVNrMVNVbmcyTlhneVltNUZWbWxpUVhwbGNrZ3ZZbGcwTDNkT1UzbFZlalUxY0ZnNFBTSXNJblpsY25OcGIyNGlPaUl5SWl3aWRIbHdaU0k2SWtSQlZFRmZTMFZaSWl3aVpYaHdhWEpoZEdsdmJpSTZNVFU1TnpNeU5UVXhOWDA9
+ curl -i -H 'Authorization: Basic QVdTOmV5SndZWGxzYjJGa0lqb2lZWFZGVFRsMVEyVmxTV2MzSzB0eGFUUXlXRVZ5U25ST2FWaFFTRFJCVjFsdFYzZzVXa2xLYW1WWWIwMUxPWFZHZWpGNmMxRkpWbVozYW5OemIwdHJlWE5QUnpCTk9GSk1hR2hpWjBKQ1pEQmhhRWR0WTBWVWIwMXhUSG8zUjBSR1duVkxLMHAxYjFGcEwwOHlRbkl3WVZKa2NVMWFlbUlyT0ZCNVJVWXlWalpFZVZCTVRWcEpPSFZXVkhaSFpuZ3JibEU1VmpJelpEUk5RVVZQYlZwQ1RFeHJSVWxKVW1sSlRrOVVTR3hGV0hrMlRWcEpXbTlHTkhSV1JXTnNaSFZFYVRaeWRGTllWR28yVlhjMFRrZGxkU3R6U1VKRlpGSlRRMnR1UVUxWlQyb3diblF3UzI5aVNHMXpPR2wzY3l0VmNsbGhNVTlpUWtSS2MzVjZiVVkxZW1obGFFWnJlR0l5VmtGWGNVb3dNRFZMTVVKYVYyUkxRWGRITVRWcVFXczJUMEp2TWpsQmRuRnFRbnA0VmtOUmIybFdPVEl4YUVGdk1qQnhaM1I1ZUVWWE5rRTBMMHMwUW1ZM2JrVjRiSEpZVlZkRVJWVlhRMDgyTkVKU05IWXhhMjltUTI1c1ZXTkVTbWhrUmpOdU9FeFplakYzU1hoS1ZscHNTVzEzUWxSdGNUVndXbEo2UlZWRVFtOU1RVGhRY1RoT1JXY3ZVbkUxY2tSS1kzSnlVbWRCZDBadlRVUlRPRW80VEZnNFNFMVhTRTlYWTJJNVNXYzRWRlJwVDNoa1lYQkJZa1UzU0UxTU9XZHJNbFZtYldKNVF6bE1hbWx4Tldwc01qUlRVbGRyVjBOSFVURXdiR3BFTlZJekszcDJibEpzZUVnMEswMXRTeTl3WjB4RkswVkhWR3RQTTA1d1p6VnRiMWxUUVcwdkwxRnpZbFY1U3pNM2JXaEVURnB0UVdKSFNVcE9ZbWx1VmxOUlFuSlRkR05uVjI5SWNuVXpiR2xFUTBsNU16ZDRkM0JKVkROeFltUlBhR2R5Tm5OWFp6Sk1TVkUzYjB0eU1rZEZSRWRyVDNOcmJHMU5XR1pMZERaQ2FuSnBlSE5FUTA5b1RUTlVjbFZrWVdOd1dWY3ZlREkwVEZaRlUyd3dOelI1VTBWM2VXOU9TM3BqYlZnM09GcEZZbGhHTlVGRlZEY3ZkSEJOWjNkR1VFOUJWVFl3VEZKcFRFNVRVVnBMTkVsbFIzSk9UamxSY2psNVFrc3laVk15V1U1SGFYZG5WRTlIVkhadGQwVnNSVll3YjFoTGNVbGlWeXMyU201aEx6ZDNSMFl5ZUZkU09FZFJWMjg0Y25ScVZWZG9TVlpaWkZjd2FHbG9TemhhVEhkc2R6Qk5VRnAwZG0xck1sZzRSSFJQY0U1SlRIbFBUR3gxUkVoWVV6ZG9TSGxPU1dNMlJ5dEJWM3BOVHpCT1ZsY3lWVlEwY0hONlZEZHBTR3RFTlhWNE9GZElPV1YzWlRGalNYb3lNMU53T1hOc1JVSnpXREExYjNFeWRtdERhR1ZUYWtoTmNqSndhaXMzZUVzMlN6UnRaVTlUUWtoamVIQmFjV2RHT1ZocFlYQkVhMjB5T0ZvNVMxRXlaVEYyTjNkTlNWSm1iRzkzVFRNMVVXd3pZVlIzWjI1RFdYVkxXVGhHVGpSSlZsbGlNa1I2ZVdOWWNWaFdSbVJUZFdaamNuSlJWbUZ5UlZCMFVYSjVUa2xtZEZkNWFWUnNXWHBMWlVKSVlqUTRTM2htYURsclJtaEZVRXh1WWpBeWNFeERXRXRXYlVGUVNHcDNkWEJCVUc1eFNtRm5NRlZCVUV0TE0zb3dhV0puZGxCeFZYQjNNRGwxY21wSGVWUk9jSFl6UXpSSVZWQndVQ3RtS3pRMmIyWnRNV0puYzNFeVdWRkliakZvVUN0TlVITnRlbFF3TVZWdVZFaFpNRXRpWlU5d2JFbE5SR1JoYlU5a01YaElXV1puYnpKQ1FWVnNibnBMY2pWWFlVMXhWbTlDYjAxbU0zQktXVGxpVGxsT2RXY3ZaMUUzVGtSRVVWSjJXR0Y0TVRVdmMwZFNSR0pXUTFaWlVVUTJNbVI0UkNJc0ltUmhkR0ZyWlhraU9pSkJVVVZDUVVob2QyMHdXV0ZKVTBwbFVuUktiVFZ1TVVjMmRYRmxaV3RZZFc5WVdGQmxOVlZHWTJVNVVuRTRMekUwZDBGQlFVZzBkMlpCV1VwTGIxcEphSFpqVGtGUlkwZHZSemgzWWxGSlFrRkVRbTlDWjJ0eGFHdHBSemwzTUVKQ2QwVjNTR2RaU2xsSldrbEJWMVZFUWtGRmRVMUNSVVZFUTJKRFEycHJabE5vZDNKRWFtWXljMEZKUWtWSlFUZHhaM0ZTT0UxSWVpOWhlVUZGVlc4MVRIaFNZM2hrTWsxQ1dFTlhjVmRrYXpseGRYaG1SalJzUnl0WVNrMVNVbmcyTlhneVltNUZWbWxpUVhwbGNrZ3ZZbGcwTDNkT1UzbFZlalUxY0ZnNFBTSXNJblpsY25OcGIyNGlPaUl5SWl3aWRIbHdaU0k2SWtSQlZFRmZTMFZaSWl3aVpYaHdhWEpoZEdsdmJpSTZNVFU1TnpNeU5UVXhOWDA9' https://123456789012.dkr.ecr.us-east-1.amazonaws.com/v2/helloworld/tags/list
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Thu, 13 Aug 2020 01:31:59 GMT
Docker-Distribution-Api-Version: registry/2.0
Content-Length: 83
Connection: keep-alive

{"name":"helloworld","tags":["prototype.emvaldes.name","kubernetes.emvaldes.name"]}+ return 0
+ deploy_prototype
+ tracking_process deploy_prototype
+ [[ -n deploy_prototype ]]
+ local func_params=deploy_prototype
+ local func_name=deploy_prototype
+ logging_process deploy_prototype
+ [[ -n deploy_prototype ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183159
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183159 = deploy_prototype'
+ return 0
+ return 0
+ [[ -n '' ]]
+ continue_process 'Deploy Prototype-Application [helloworld] (Y/n) ?: '
+ [[ 51 -eq 0 ]]
+ message='Deploy Prototype-Application [helloworld] (Y/n) ?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ [[ true == true ]]
+ configure_k8spod default helloworld prototype.emvaldes.name
+ tracking_process configure_k8spod default helloworld prototype.emvaldes.name
+ [[ -n configure_k8spod ]]
+ local 'func_params=configure_k8spod default helloworld prototype.emvaldes.name'
+ local func_name=configure_k8spod
+ logging_process configure_k8spod default helloworld prototype.emvaldes.name
+ [[ -n configure_k8spod ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183159
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183159 = configure_k8spod' default helloworld prototype.emvaldes.name
+ return 0
+ return 0
+ [[ -n default ]]
+ local target_application=default
+ [[ default == \d\e\f\a\u\l\t ]]
+ target_application=/Users/emvaldes/etc/configs/deployments/helloworld.yaml
+ [[ -n helloworld ]]
+ local docker_application=helloworld
+ [[ -n prototype.emvaldes.name ]]
+ repo_version=prototype.emvaldes.name
+ [[ 12 -eq 0 ]]
+ local fetched=1
+ print 'Fetched: 1'
+ inline 'Fetched: 1\n'
+ echo -en 'Fetched: 1\n'
Fetched: 1
+ [[ 12 -eq 12 ]]
+ local target_path=/tmp/clusters/k8s-apps/helloworld
+ mkdir -p /tmp/clusters/k8s-apps/helloworld
+ local k8s_app=/tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml
+ cat /Users/emvaldes/etc/configs/deployments/helloworld.yaml
+ sed -e 's|{{AWS_ACCOUNT}}|123456789012|g' -e 's|{{AWS_REGION}}|us-east-1|g' -e 's|{{DOCKER_APP}}|helloworld|g' -e 's|{{REPO_VERSION}}|prototype.emvaldes.name|g'
+ [[ -s /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml ]]
+ local result=0
+ [[ 0 -eq 0 ]]
+ cat /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml
apiVersion:              apps/v1
kind:                    Deployment
metadata:
  name:                  helloworld-deployment
spec:
  replicas:              3
  revisionHistoryLimit:  100
  selector:
    matchLabels:
      app:               helloworld
  template:
    metadata:
      labels:
        app:             helloworld
    spec:
      containers:
      - name:            helloworld
        image:           123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
        ports:
        - name:          http-port
          containerPort: 80
+ return 0
+ local k8s_app=/tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml
+ kubectl_console 'create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true'
+ [[ -n create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true ]]
+ local 'command_params=create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true'
+ execute_command 'kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true'
+ [[ -n kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true ]]
++ echo -e kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true'
+ logging_process kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183159
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183159 = kubectl' create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true
+ return 0
+ eval kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true
++ kubectl create --filename /tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true
deployment.apps/helloworld-deployment created
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Exposing Deployment Object (Load-Balancer) ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Exposing Deployment Object (Load-Balancer) ...'
+ inline 'Exposing Deployment Object (Load-Balancer) ...\n'
+ echo -en 'Exposing Deployment Object (Load-Balancer) ...\n'
Exposing Deployment Object (Load-Balancer) ...
+ kubectl_console 'expose deployment helloworld-deployment --type=LoadBalancer'
+ [[ -n expose deployment helloworld-deployment --type=LoadBalancer ]]
+ local 'command_params=expose deployment helloworld-deployment --type=LoadBalancer'
+ execute_command 'kubectl expose deployment helloworld-deployment --type=LoadBalancer'
+ [[ -n kubectl expose deployment helloworld-deployment --type=LoadBalancer ]]
++ echo -e kubectl expose deployment helloworld-deployment --type=LoadBalancer
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl expose deployment helloworld-deployment --type=LoadBalancer'
+ logging_process kubectl expose deployment helloworld-deployment --type=LoadBalancer
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183203
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183203 = kubectl' expose deployment helloworld-deployment --type=LoadBalancer
+ return 0
+ eval kubectl expose deployment helloworld-deployment --type=LoadBalancer
++ kubectl expose deployment helloworld-deployment --type=LoadBalancer
service/helloworld-deployment exposed
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ cluster_replicationsets
+ tracking_process cluster_replicationsets
+ [[ -n cluster_replicationsets ]]
+ local func_params=cluster_replicationsets
+ local func_name=cluster_replicationsets
+ logging_process cluster_replicationsets
+ [[ -n cluster_replicationsets ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183204
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183204 = cluster_replicationsets'
+ return 0
+ return 0
+ display_message 'Listing Replication Sets:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Replication Sets:'
+ inline 'Listing Replication Sets:\n'
+ echo -en 'Listing Replication Sets:\n'
Listing Replication Sets:
+ kubectl_console 'get rs'
+ [[ -n get rs ]]
+ local 'command_params=get rs'
+ execute_command 'kubectl get rs'
+ [[ -n kubectl get rs ]]
++ echo -e kubectl get rs
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get rs'
+ logging_process kubectl get rs
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183204
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183204 = kubectl' get rs
+ return 0
+ eval kubectl get rs
++ kubectl get rs
NAME                               DESIRED   CURRENT   READY   AGE
helloworld-deployment-5889c975c4   3         3         0       1s
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cluster_deployments default
+ tracking_process cluster_deployments default
+ [[ -n cluster_deployments ]]
+ local 'func_params=cluster_deployments default'
+ local func_name=cluster_deployments
+ logging_process cluster_deployments default
+ [[ -n cluster_deployments ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183204
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183204 = cluster_deployments' default
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=default
+ [[ default == \e\v\e\r\y\t\h\i\n\g ]]
+ listing_namespace='--namespace default'
+ display_message 'Listing Deployment Objects [default]:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Deployment Objects [default]:'
+ inline 'Listing Deployment Objects [default]:\n'
+ echo -en 'Listing Deployment Objects [default]:\n'
Listing Deployment Objects [default]:
+ kubectl_console 'get deployments --namespace default'
+ [[ -n get deployments --namespace default ]]
+ local 'command_params=get deployments --namespace default'
+ execute_command 'kubectl get deployments --namespace default'
+ [[ -n kubectl get deployments --namespace default ]]
++ echo -e kubectl get deployments --namespace default
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get deployments --namespace default'
+ logging_process kubectl get deployments --namespace default
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183204
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183204 = kubectl' get deployments --namespace default
+ return 0
+ eval kubectl get deployments --namespace default
++ kubectl get deployments --namespace default
NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
helloworld-deployment   0/3     3            0           2s
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ true == true ]]
+ extract_deployment helloworld-deployment default
+ tracking_process extract_deployment helloworld-deployment default
+ [[ -n extract_deployment ]]
+ local 'func_params=extract_deployment helloworld-deployment default'
+ local func_name=extract_deployment
+ logging_process extract_deployment helloworld-deployment default
+ [[ -n extract_deployment ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183205
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183205 = extract_deployment' helloworld-deployment default
+ return 0
+ return 0
+ target_deployment=helloworld-deployment
+ [[ -n '' ]]
+ target_namespace=default
++ kubectl_console 'describe pods           --namespace default           helloworld-deployment'
++ [[ -n describe pods           --namespace default           helloworld-deployment ]]
++ egrep '^Name\:.*helloworld-deployment.*$'
++ local 'command_params=describe pods           --namespace default           helloworld-deployment'
++ execute_command 'kubectl describe pods           --namespace default           helloworld-deployment'
++ [[ -n kubectl describe pods           --namespace default           helloworld-deployment ]]
++ head -n1
++ awk '{print $2}'
+++ echo -e kubectl describe pods --namespace default helloworld-deployment
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=kubectl describe pods --namespace default helloworld-deployment'
++ logging_process kubectl describe pods --namespace default helloworld-deployment
++ [[ -n kubectl ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183205
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183205 = kubectl' describe pods --namespace default helloworld-deployment
++ return 0
++ eval kubectl describe pods --namespace default helloworld-deployment
+++ kubectl describe pods --namespace default helloworld-deployment
++ result=0
+ export target_podname=helloworld-deployment-5889c975c4-f64jd
+ target_podname=helloworld-deployment-5889c975c4-f64jd
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ print 'Cluster Deployment: helloworld-deployment-5889c975c4-f64jd'
+ inline 'Cluster Deployment: helloworld-deployment-5889c975c4-f64jd\n'
+ echo -en 'Cluster Deployment: helloworld-deployment-5889c975c4-f64jd\n'
Cluster Deployment: helloworld-deployment-5889c975c4-f64jd
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ [[ ! -z helloworld-deployment-5889c975c4-f64jd ]]
+ display_message 'Describing Deployment: helloworld-deployment-5889c975c4-f64jd'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Describing Deployment: helloworld-deployment-5889c975c4-f64jd'
+ inline 'Describing Deployment: helloworld-deployment-5889c975c4-f64jd\n'
+ echo -en 'Describing Deployment: helloworld-deployment-5889c975c4-f64jd\n'
Describing Deployment: helloworld-deployment-5889c975c4-f64jd
+ describe_podname helloworld-deployment-5889c975c4-f64jd default
+ tracking_process describe_podname helloworld-deployment-5889c975c4-f64jd default
+ [[ -n describe_podname ]]
+ local 'func_params=describe_podname helloworld-deployment-5889c975c4-f64jd default'
+ local func_name=describe_podname
+ logging_process describe_podname helloworld-deployment-5889c975c4-f64jd default
+ [[ -n describe_podname ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183207
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183207 = describe_podname' helloworld-deployment-5889c975c4-f64jd default
+ return 0
+ return 0
+ [[ -n x ]]
+ export target_podname=helloworld-deployment-5889c975c4-f64jd
+ target_podname=helloworld-deployment-5889c975c4-f64jd
+ target_namespace=default
+ kubectl_console 'describe pod helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ [[ -n describe pod helloworld-deployment-5889c975c4-f64jd         --namespace default ]]
+ local 'command_params=describe pod helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ execute_command 'kubectl describe pod helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ [[ -n kubectl describe pod helloworld-deployment-5889c975c4-f64jd         --namespace default ]]
++ echo -e kubectl describe pod helloworld-deployment-5889c975c4-f64jd --namespace default
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl describe pod helloworld-deployment-5889c975c4-f64jd --namespace default'
+ logging_process kubectl describe pod helloworld-deployment-5889c975c4-f64jd --namespace default
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183207
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183207 = kubectl' describe pod helloworld-deployment-5889c975c4-f64jd --namespace default
+ return 0
+ eval kubectl describe pod helloworld-deployment-5889c975c4-f64jd --namespace default
++ kubectl describe pod helloworld-deployment-5889c975c4-f64jd --namespace default
Name:           helloworld-deployment-5889c975c4-f64jd
Namespace:      default
Priority:       0
Node:           ip-172-20-45-53.ec2.internal/172.20.45.53
Start Time:     Wed, 12 Aug 2020 18:32:03 -0700
Labels:         app=helloworld
                pod-template-hash=5889c975c4
Annotations:    kubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container helloworld
Status:         Pending
IP:
IPs:            <none>
Controlled By:  ReplicaSet/helloworld-deployment-5889c975c4
Containers:
  helloworld:
    Container ID:
    Image:          123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
    Image ID:
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Requests:
      cpu:        100m
    Environment:  <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-pmbm5 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             False
  ContainersReady   False
  PodScheduled      True
Volumes:
  default-token-pmbm5:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-pmbm5
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From                                   Message
  ----    ------     ----  ----                                   -------
  Normal  Scheduled  5s    default-scheduler                      Successfully assigned default/helloworld-deployment-5889c975c4-f64jd to ip-172-20-45-53.ec2.internal
  Normal  Pulling    4s    kubelet, ip-172-20-45-53.ec2.internal  Pulling image "123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name"
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ display_message 'Displaying Deployment'\''s Log: helloworld-deployment-5889c975c4-f64jd'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Displaying Deployment'\''s Log: helloworld-deployment-5889c975c4-f64jd'
+ inline 'Displaying Deployment'\''s Log: helloworld-deployment-5889c975c4-f64jd\n'
+ echo -en 'Displaying Deployment'\''s Log: helloworld-deployment-5889c975c4-f64jd\n'
Displaying Deployment's Log: helloworld-deployment-5889c975c4-f64jd
+ display_podlog helloworld-deployment-5889c975c4-f64jd default
+ tracking_process display_podlog helloworld-deployment-5889c975c4-f64jd default
+ [[ -n display_podlog ]]
+ local 'func_params=display_podlog helloworld-deployment-5889c975c4-f64jd default'
+ local func_name=display_podlog
+ logging_process display_podlog helloworld-deployment-5889c975c4-f64jd default
+ [[ -n display_podlog ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183223
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183223 = display_podlog' helloworld-deployment-5889c975c4-f64jd default
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=default
+ [[ -n x ]]
+ export target_podname=helloworld-deployment-5889c975c4-f64jd
+ target_podname=helloworld-deployment-5889c975c4-f64jd
+ kubectl_console 'logs         helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ [[ -n logs         helloworld-deployment-5889c975c4-f64jd         --namespace default ]]
+ local 'command_params=logs         helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ execute_command 'kubectl logs         helloworld-deployment-5889c975c4-f64jd         --namespace default'
+ [[ -n kubectl logs         helloworld-deployment-5889c975c4-f64jd         --namespace default ]]
++ echo -e kubectl logs helloworld-deployment-5889c975c4-f64jd --namespace default
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl logs helloworld-deployment-5889c975c4-f64jd --namespace default'
+ logging_process kubectl logs helloworld-deployment-5889c975c4-f64jd --namespace default
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183223
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183223 = kubectl' logs helloworld-deployment-5889c975c4-f64jd --namespace default
+ return 0
+ eval kubectl logs helloworld-deployment-5889c975c4-f64jd --namespace default
++ kubectl logs helloworld-deployment-5889c975c4-f64jd --namespace default
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 100.116.0.7. Set the 'ServerName' directive globally to suppress this message
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ target_podname=
+ return 0
+ update_deployment
+ [[ 12 -eq 0 ]]
+ local fetched=1
+ print 'Fetched: 1'
+ inline 'Fetched: 1\n'
+ echo -en 'Fetched: 1\n'
Fetched: 1
+ [[ 12 -eq 12 ]]
+ local ecr_location=123456789012.dkr.ecr.us-east-1.amazonaws.com
+ local target_ecrrepo=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ kubectl_console 'set image               deployment/helloworld-deployment               helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name'
+ [[ -n set image               deployment/helloworld-deployment               helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name ]]
+ local 'command_params=set image               deployment/helloworld-deployment               helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name'
+ execute_command 'kubectl set image               deployment/helloworld-deployment               helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name'
+ [[ -n kubectl set image               deployment/helloworld-deployment               helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name ]]
++ echo -e kubectl set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name'
+ logging_process kubectl set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183224
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183224 = kubectl' set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ return 0
+ eval kubectl set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
++ kubectl set image deployment/helloworld-deployment helloworld=123456789012.dkr.ecr.us-east-1.amazonaws.com/helloworld:prototype.emvaldes.name
+ kubectl_console 'rollout status               deployment/helloworld-deployment'
+ [[ -n rollout status               deployment/helloworld-deployment ]]
+ local 'command_params=rollout status               deployment/helloworld-deployment'
+ execute_command 'kubectl rollout status               deployment/helloworld-deployment'
+ [[ -n kubectl rollout status               deployment/helloworld-deployment ]]
++ echo -e kubectl rollout status deployment/helloworld-deployment
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl rollout status deployment/helloworld-deployment'
+ logging_process kubectl rollout status deployment/helloworld-deployment
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183225
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183225 = kubectl' rollout status deployment/helloworld-deployment
+ return 0
+ eval kubectl rollout status deployment/helloworld-deployment
++ kubectl rollout status deployment/helloworld-deployment
deployment "helloworld-deployment" successfully rolled out
+ kubectl_console 'rollout history               deployment/helloworld-deployment'
+ [[ -n rollout history               deployment/helloworld-deployment ]]
+ local 'command_params=rollout history               deployment/helloworld-deployment'
+ execute_command 'kubectl rollout history               deployment/helloworld-deployment'
+ [[ -n kubectl rollout history               deployment/helloworld-deployment ]]
++ echo -e kubectl rollout history deployment/helloworld-deployment
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl rollout history deployment/helloworld-deployment'
+ logging_process kubectl rollout history deployment/helloworld-deployment
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183225
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183225 = kubectl' rollout history deployment/helloworld-deployment
+ return 0
+ eval kubectl rollout history deployment/helloworld-deployment
++ kubectl rollout history deployment/helloworld-deployment
deployment.apps/helloworld-deployment
REVISION  CHANGE-CAUSE
1         kubectl create --filename=/tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true

+ kubectl_console 'get pods'
+ [[ -n get pods ]]
+ local 'command_params=get pods'
+ execute_command 'kubectl get pods'
+ [[ -n kubectl get pods ]]
++ echo -e kubectl get pods
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods'
+ logging_process kubectl get pods
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183226
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183226 = kubectl' get pods
+ return 0
+ eval kubectl get pods
++ kubectl get pods
NAME                                     READY   STATUS    RESTARTS   AGE
helloworld-deployment-5889c975c4-f64jd   1/1     Running   0          24s
helloworld-deployment-5889c975c4-nq89j   1/1     Running   0          24s
helloworld-deployment-5889c975c4-wwp82   1/1     Running   0          24s
+ loadbalancer=($(
                kubectl_console "get services ${docker_application}-deployment --no-headers"
              ))
++ kubectl_console 'get services helloworld-deployment --no-headers'
++ [[ -n get services helloworld-deployment --no-headers ]]
++ local 'command_params=get services helloworld-deployment --no-headers'
++ execute_command 'kubectl get services helloworld-deployment --no-headers'
++ [[ -n kubectl get services helloworld-deployment --no-headers ]]
+++ echo -e kubectl get services helloworld-deployment --no-headers
+++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
++ local 'command_params=kubectl get services helloworld-deployment --no-headers'
++ logging_process kubectl get services helloworld-deployment --no-headers
++ [[ -n kubectl ]]
++ content=("${@}")
++ local content
+++ date +%Y%m%d%H%M%S
++ local timestamp=20200812183227
++ [[ 68 -eq 0 ]]
++ [[ true == true ]]
++ [[ 68 -gt 0 ]]
++ echo -e '20200812183227 = kubectl' get services helloworld-deployment --no-headers
++ return 0
++ eval kubectl get services helloworld-deployment --no-headers
+++ kubectl get services helloworld-deployment --no-headers
+ declare -a loadbalancer
+ sleep_until 15 5 Countdown:
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n Countdown: ]]
+ local message=Countdown:
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 15
Countdown: 15+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 10
Countdown: 10+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 10 -gt 0 ]]
+ printf 'Countdown: %s' 5
Countdown: 5+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf Countdown: 0
Countdown:+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
+ curl aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com:80
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="refresh" content="0;url=http://finder.cox.net/main?ParticipantID=96e687opkbv4scrood8k84drs6gw5duf&FailedURI=http%3A%2F%2Faed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com%2F&FailureMode=1&Implementation=&AddInType=4&Version=pywr1.0&ClientLocation=us"/><script type="text/javascript">url="http://finder.cox.net/main?ParticipantID=96e687opkbv4scrood8k84drs6gw5duf&FailedURI=http%3A%2F%2Faed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com%2F&FailureMode=1&Implementation=&AddInType=4&Version=pywr1.0&ClientLocation=us";if(top.location!=location){var w=window,d=document,e=d.documentElement,b=d.body,x=w.innerWidth||e.clientWidth||b.clientWidth,y=w.innerHeight||e.clientHeight||b.clientHeight;url+="&w="+x+"&h="+y;}window.location.replace(url);</script></head><body></body></html>+ return 0
+ [[ true == true ]]
+ cluster_contexts
+ tracking_process cluster_contexts
+ [[ -n cluster_contexts ]]
+ local func_params=cluster_contexts
+ local func_name=cluster_contexts
+ logging_process cluster_contexts
+ [[ -n cluster_contexts ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183244
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183244 = cluster_contexts'
+ return 0
+ return 0
+ display_message 'Configuring Cluster Context (prototype.emvaldes.name) ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Configuring Cluster Context (prototype.emvaldes.name) ...'
+ inline 'Configuring Cluster Context (prototype.emvaldes.name) ...\n'
+ echo -en 'Configuring Cluster Context (prototype.emvaldes.name) ...\n'
Configuring Cluster Context (prototype.emvaldes.name) ...
+ kubectl_console 'config use-context prototype.emvaldes.name'
+ [[ -n config use-context prototype.emvaldes.name ]]
+ local 'command_params=config use-context prototype.emvaldes.name'
+ execute_command 'kubectl config use-context prototype.emvaldes.name'
+ [[ -n kubectl config use-context prototype.emvaldes.name ]]
++ echo -e kubectl config use-context prototype.emvaldes.name
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config use-context prototype.emvaldes.name'
+ logging_process kubectl config use-context prototype.emvaldes.name
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183244
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183244 = kubectl' config use-context prototype.emvaldes.name
+ return 0
+ eval kubectl config use-context prototype.emvaldes.name
++ kubectl config use-context prototype.emvaldes.name
Switched to context "prototype.emvaldes.name".
+ local result=0
+ [[ 0 -gt 0 ]]
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Listing Cluster Contexts ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Cluster Contexts ...'
+ inline 'Listing Cluster Contexts ...\n'
+ echo -en 'Listing Cluster Contexts ...\n'
Listing Cluster Contexts ...
+ kubectl_console 'config get-contexts'
+ [[ -n config get-contexts ]]
+ local 'command_params=config get-contexts'
+ execute_command 'kubectl config get-contexts'
+ [[ -n kubectl config get-contexts ]]
++ echo -e kubectl config get-contexts
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config get-contexts'
+ logging_process kubectl config get-contexts
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183244
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183244 = kubectl' config get-contexts
+ return 0
+ eval kubectl config get-contexts
++ kubectl config get-contexts
CURRENT   NAME                      CLUSTER                   AUTHINFO                  NAMESPACE
*         prototype.emvaldes.name   prototype.emvaldes.name   prototype.emvaldes.name
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ describe_cluster
+ tracking_process describe_cluster
+ [[ -n describe_cluster ]]
+ local func_params=describe_cluster
+ local func_name=describe_cluster
+ logging_process describe_cluster
+ [[ -n describe_cluster ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = describe_cluster'
+ return 0
+ return 0
+ continue_process 'Describe Kubernetes Cluster (Y/n) ?: '
+ [[ 37 -eq 0 ]]
+ message='Describe Kubernetes Cluster (Y/n) ?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ [[ true == true ]]
+ cluster_configuration
+ tracking_process cluster_configuration
+ [[ -n cluster_configuration ]]
+ local func_params=cluster_configuration
+ local func_name=cluster_configuration
+ logging_process cluster_configuration
+ [[ -n cluster_configuration ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = cluster_configuration'
+ return 0
+ return 0
+ display_message 'Listing Infrastructure Clusters ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Infrastructure Clusters ...'
+ inline 'Listing Infrastructure Clusters ...\n'
+ echo -en 'Listing Infrastructure Clusters ...\n'
Listing Infrastructure Clusters ...
+ kubectl_console 'config get-clusters'
+ [[ -n config get-clusters ]]
+ local 'command_params=config get-clusters'
+ execute_command 'kubectl config get-clusters'
+ [[ -n kubectl config get-clusters ]]
++ echo -e kubectl config get-clusters
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config get-clusters'
+ logging_process kubectl config get-clusters
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = kubectl' config get-clusters
+ return 0
+ eval kubectl config get-clusters
++ kubectl config get-clusters
NAME
prototype.emvaldes.name
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Listing Kubernetes Configuration ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Kubernetes Configuration ...'
+ inline 'Listing Kubernetes Configuration ...\n'
+ echo -en 'Listing Kubernetes Configuration ...\n'
Listing Kubernetes Configuration ...
+ kubectl_console 'config view'
+ [[ -n config view ]]
+ local 'command_params=config view'
+ execute_command 'kubectl config view'
+ [[ -n kubectl config view ]]
++ echo -e kubectl config view
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl config view'
+ logging_process kubectl config view
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = kubectl' config view
+ return 0
+ eval kubectl config view
++ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://api.prototype.emvaldes.name
  name: prototype.emvaldes.name
contexts:
- context:
    cluster: prototype.emvaldes.name
    user: prototype.emvaldes.name
  name: prototype.emvaldes.name
current-context: prototype.emvaldes.name
kind: Config
preferences: {}
users:
- name: prototype.emvaldes.name
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cluster_validation
+ tracking_process cluster_validation
+ [[ -n cluster_validation ]]
+ local func_params=cluster_validation
+ local func_name=cluster_validation
+ logging_process cluster_validation
+ [[ -n cluster_validation ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = cluster_validation'
+ return 0
+ return 0
+ display_message 'Validating Kubernetes Cluster: prototype.emvaldes.name ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Validating Kubernetes Cluster: prototype.emvaldes.name ...'
+ inline 'Validating Kubernetes Cluster: prototype.emvaldes.name ...\n'
+ echo -en 'Validating Kubernetes Cluster: prototype.emvaldes.name ...\n'
Validating Kubernetes Cluster: prototype.emvaldes.name ...
+ kops_console 'validate cluster'
+ [[ -n validate cluster ]]
+ local 'command_params=validate cluster'
+ execute_command 'kops validate cluster'
+ [[ -n kops validate cluster ]]
++ echo -e kops validate cluster
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kops validate cluster'
+ logging_process kops validate cluster
+ [[ -n kops ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183245
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183245 = kops' validate cluster
+ return 0
+ eval kops validate cluster
++ kops validate cluster
I0812 18:32:46.825530    4237 featureflag.go:154] FeatureFlag "SpecOverrideFlag"=true
Validating cluster prototype.emvaldes.name

INSTANCE GROUPS
NAME			ROLE	MACHINETYPE	MIN	MAX	SUBNETS
master-us-east-1a	Master	t3a.xlarge	1	1	us-east-1a
master-us-east-1b	Master	t3a.xlarge	1	1	us-east-1b
master-us-east-1c	Master	t3a.xlarge	1	1	us-east-1c
nodes			Node	t3a.large	3	3	us-east-1a,us-east-1b,us-east-1c

NODE STATUS
NAME				ROLE	READY
ip-172-20-127-92.ec2.internal	node	True
ip-172-20-45-53.ec2.internal	node	True
ip-172-20-53-172.ec2.internal	master	True
ip-172-20-84-104.ec2.internal	node	True
ip-172-20-87-159.ec2.internal	master	True
ip-172-20-99-239.ec2.internal	master	True

Your cluster prototype.emvaldes.name is ready
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ cluster_deployments everything
+ tracking_process cluster_deployments everything
+ [[ -n cluster_deployments ]]
+ local 'func_params=cluster_deployments everything'
+ local func_name=cluster_deployments
+ logging_process cluster_deployments everything
+ [[ -n cluster_deployments ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183251
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183251 = cluster_deployments' everything
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=everything
+ [[ everything == \e\v\e\r\y\t\h\i\n\g ]]
+ listing_namespace=--all-namespaces
+ display_message 'Listing Deployment Objects [everything]:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Deployment Objects [everything]:'
+ inline 'Listing Deployment Objects [everything]:\n'
+ echo -en 'Listing Deployment Objects [everything]:\n'
Listing Deployment Objects [everything]:
+ kubectl_console 'get deployments --all-namespaces'
+ [[ -n get deployments --all-namespaces ]]
+ local 'command_params=get deployments --all-namespaces'
+ execute_command 'kubectl get deployments --all-namespaces'
+ [[ -n kubectl get deployments --all-namespaces ]]
++ echo -e kubectl get deployments --all-namespaces
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get deployments --all-namespaces'
+ logging_process kubectl get deployments --all-namespaces
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183251
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183251 = kubectl' get deployments --all-namespaces
+ return 0
+ eval kubectl get deployments --all-namespaces
++ kubectl get deployments --all-namespaces
NAMESPACE     NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE
default       helloworld-deployment                 3/3     3            3           48s
kube-system   dns-controller                        1/1     1            1           22m
kube-system   kube-dns                              2/2     2            2           22m
kube-system   kube-dns-autoscaler                   1/1     1            1           22m
kube-system   kubernetes-dashboard                  1/1     1            1           77s
kube-system   metrics-server                        1/1     1            1           6m57s
kube-system   tiller-deploy                         1/1     1            1           6m23s
prometheus    prometheus-grafana                    1/1     1            1           4m11s
prometheus    prometheus-kube-state-metrics         1/1     1            1           4m11s
prometheus    prometheus-prometheus-oper-operator   1/1     1            1           4m11s
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_apiservice
+ tracking_process display_apiservice
+ [[ -n display_apiservice ]]
+ local func_params=display_apiservice
+ local func_name=display_apiservice
+ logging_process display_apiservice
+ [[ -n display_apiservice ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183252
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183252 = display_apiservice'
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'get apiservice'
+ [[ -n get apiservice ]]
+ local 'command_params=get apiservice'
+ execute_command 'kubectl get apiservice'
+ [[ -n kubectl get apiservice ]]
++ echo -e kubectl get apiservice
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get apiservice'
+ logging_process kubectl get apiservice
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183252
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183252 = kubectl' get apiservice
+ return 0
+ eval kubectl get apiservice
++ kubectl get apiservice
NAME                                   SERVICE                      AVAILABLE   AGE
v1.                                    Local                        True        22m
v1.admissionregistration.k8s.io        Local                        True        22m
v1.apiextensions.k8s.io                Local                        True        22m
v1.apps                                Local                        True        22m
v1.authentication.k8s.io               Local                        True        22m
v1.authorization.k8s.io                Local                        True        22m
v1.autoscaling                         Local                        True        22m
v1.batch                               Local                        True        22m
v1.coordination.k8s.io                 Local                        True        22m
v1.monitoring.coreos.com               Local                        True        5m16s
v1.networking.k8s.io                   Local                        True        22m
v1.rbac.authorization.k8s.io           Local                        True        22m
v1.scheduling.k8s.io                   Local                        True        22m
v1.storage.k8s.io                      Local                        True        22m
v1beta1.admissionregistration.k8s.io   Local                        True        22m
v1beta1.apiextensions.k8s.io           Local                        True        22m
v1beta1.authentication.k8s.io          Local                        True        22m
v1beta1.authorization.k8s.io           Local                        True        22m
v1beta1.batch                          Local                        True        22m
v1beta1.certificates.k8s.io            Local                        True        22m
v1beta1.coordination.k8s.io            Local                        True        22m
v1beta1.discovery.k8s.io               Local                        True        22m
v1beta1.events.k8s.io                  Local                        True        22m
v1beta1.extensions                     Local                        True        22m
v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        6m58s
v1beta1.networking.k8s.io              Local                        True        22m
v1beta1.node.k8s.io                    Local                        True        22m
v1beta1.policy                         Local                        True        22m
v1beta1.rbac.authorization.k8s.io      Local                        True        22m
v1beta1.scheduling.k8s.io              Local                        True        22m
v1beta1.storage.k8s.io                 Local                        True        22m
v2beta1.autoscaling                    Local                        True        22m
v2beta2.autoscaling                    Local                        True        22m
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_namespaces
+ tracking_process display_namespaces
+ [[ -n display_namespaces ]]
+ local func_params=display_namespaces
+ local func_name=display_namespaces
+ logging_process display_namespaces
+ [[ -n display_namespaces ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183252
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183252 = display_namespaces'
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'get crd       --all-namespaces'
+ [[ -n get crd       --all-namespaces ]]
+ local 'command_params=get crd       --all-namespaces'
+ execute_command 'kubectl get crd       --all-namespaces'
+ [[ -n kubectl get crd       --all-namespaces ]]
++ echo -e kubectl get crd --all-namespaces
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get crd --all-namespaces'
+ logging_process kubectl get crd --all-namespaces
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183252
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183252 = kubectl' get crd --all-namespaces
+ return 0
+ eval kubectl get crd --all-namespaces
++ kubectl get crd --all-namespaces
NAME                                    CREATED AT
alertmanagers.monitoring.coreos.com     2020-08-13T01:27:36Z
podmonitors.monitoring.coreos.com       2020-08-13T01:27:43Z
prometheuses.monitoring.coreos.com      2020-08-13T01:27:48Z
prometheusrules.monitoring.coreos.com   2020-08-13T01:27:54Z
servicemonitors.monitoring.coreos.com   2020-08-13T01:28:00Z
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_nodes
+ tracking_process display_nodes
+ [[ -n display_nodes ]]
+ local func_params=display_nodes
+ local func_name=display_nodes
+ logging_process display_nodes
+ [[ -n display_nodes ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183253
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183253 = display_nodes'
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console 'get nodes       --output wide'
+ [[ -n get nodes       --output wide ]]
+ local 'command_params=get nodes       --output wide'
+ execute_command 'kubectl get nodes       --output wide'
+ [[ -n kubectl get nodes       --output wide ]]
++ echo -e kubectl get nodes --output wide
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get nodes --output wide'
+ logging_process kubectl get nodes --output wide
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183253
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183253 = kubectl' get nodes --output wide
+ return 0
+ eval kubectl get nodes --output wide
++ kubectl get nodes --output wide
NAME                            STATUS   ROLES    AGE   VERSION   INTERNAL-IP     EXTERNAL-IP      OS-IMAGE           KERNEL-VERSION   CONTAINER-RUNTIME
ip-172-20-127-92.ec2.internal   Ready    node     20m   v1.18.6   172.20.127.92   54.158.25.41     Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
ip-172-20-45-53.ec2.internal    Ready    node     20m   v1.18.6   172.20.45.53    3.91.170.120     Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
ip-172-20-53-172.ec2.internal   Ready    master   22m   v1.18.6   172.20.53.172   3.232.133.158    Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
ip-172-20-84-104.ec2.internal   Ready    node     20m   v1.18.6   172.20.84.104   54.174.33.222    Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
ip-172-20-87-159.ec2.internal   Ready    master   21m   v1.18.6   172.20.87.159   54.86.70.49      Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
ip-172-20-99-239.ec2.internal   Ready    master   22m   v1.18.6   172.20.99.239   52.200.253.211   Ubuntu 20.04 LTS   5.4.0-1018-aws   docker://19.3.11
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_labels
+ tracking_process display_labels
+ [[ -n display_labels ]]
+ local func_params=display_labels
+ local func_name=display_labels
+ logging_process display_labels
+ [[ -n display_labels ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183254
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183254 = display_labels'
+ return 0
+ return 0
+ display_message 'Listing Kubernetes Nodes:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Kubernetes Nodes:'
+ inline 'Listing Kubernetes Nodes:\n'
+ echo -en 'Listing Kubernetes Nodes:\n'
Listing Kubernetes Nodes:
+ kubectl_console 'get nodes --show-labels'
+ [[ -n get nodes --show-labels ]]
+ local 'command_params=get nodes --show-labels'
+ execute_command 'kubectl get nodes --show-labels'
+ [[ -n kubectl get nodes --show-labels ]]
++ echo -e kubectl get nodes --show-labels
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get nodes --show-labels'
+ logging_process kubectl get nodes --show-labels
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183254
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183254 = kubectl' get nodes --show-labels
+ return 0
+ eval kubectl get nodes --show-labels
++ kubectl get nodes --show-labels
NAME                            STATUS   ROLES    AGE   VERSION   LABELS
ip-172-20-127-92.ec2.internal   Ready    node     20m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.large,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1c,kops.k8s.io/instancegroup=nodes,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-127-92.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=node,node-role.kubernetes.io/node=,node.kubernetes.io/instance-type=t3a.large,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1c
ip-172-20-45-53.ec2.internal    Ready    node     20m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.large,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1a,kops.k8s.io/instancegroup=nodes,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-45-53.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=node,node-role.kubernetes.io/node=,node.kubernetes.io/instance-type=t3a.large,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1a
ip-172-20-53-172.ec2.internal   Ready    master   22m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.xlarge,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1a,kops.k8s.io/instancegroup=master-us-east-1a,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-53-172.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=master,node-role.kubernetes.io/master=,node.kubernetes.io/instance-type=t3a.xlarge,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1a
ip-172-20-84-104.ec2.internal   Ready    node     20m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.large,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1b,kops.k8s.io/instancegroup=nodes,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-84-104.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=node,node-role.kubernetes.io/node=,node.kubernetes.io/instance-type=t3a.large,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1b
ip-172-20-87-159.ec2.internal   Ready    master   21m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.xlarge,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1b,kops.k8s.io/instancegroup=master-us-east-1b,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-87-159.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=master,node-role.kubernetes.io/master=,node.kubernetes.io/instance-type=t3a.xlarge,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1b
ip-172-20-99-239.ec2.internal   Ready    master   22m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=t3a.xlarge,beta.kubernetes.io/os=linux,failure-domain.beta.kubernetes.io/region=us-east-1,failure-domain.beta.kubernetes.io/zone=us-east-1c,kops.k8s.io/instancegroup=master-us-east-1c,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-172-20-99-239.ec2.internal,kubernetes.io/os=linux,kubernetes.io/role=master,node-role.kubernetes.io/master=,node.kubernetes.io/instance-type=t3a.xlarge,topology.kubernetes.io/region=us-east-1,topology.kubernetes.io/zone=us-east-1c
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_pods default
+ tracking_process display_pods default
+ [[ -n display_pods ]]
+ local 'func_params=display_pods default'
+ local func_name=display_pods
+ logging_process display_pods default
+ [[ -n display_pods ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183255
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183255 = display_pods' default
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=default
+ kubectl_console 'get pods       --namespace=default       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n get pods       --namespace=default       --output wide       --sort-by='{.spec.nodeName}' ]]
+ local 'command_params=get pods       --namespace=default       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ execute_command 'kubectl get pods       --namespace=default       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl get pods       --namespace=default       --output wide       --sort-by='{.spec.nodeName}' ]]
++ echo -e kubectl get pods --namespace=default --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace=default --output wide --sort-by='\''{.spec.nodeName}'\'''
+ logging_process kubectl get pods --namespace=default --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183255
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183255 = kubectl' get pods --namespace=default --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ return 0
+ eval kubectl get pods --namespace=default --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ kubectl get pods --namespace=default --output wide '--sort-by={.spec.nodeName}'
NAME                                     READY   STATUS    RESTARTS   AGE   IP            NODE                            NOMINATED NODE   READINESS GATES
helloworld-deployment-5889c975c4-f64jd   1/1     Running   0          53s   100.116.0.7   ip-172-20-45-53.ec2.internal    <none>           <none>
helloworld-deployment-5889c975c4-wwp82   1/1     Running   0          53s   100.116.0.6   ip-172-20-45-53.ec2.internal    <none>           <none>
helloworld-deployment-5889c975c4-nq89j   1/1     Running   0          53s   100.124.0.6   ip-172-20-84-104.ec2.internal   <none>           <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_pods kube-system
+ tracking_process display_pods kube-system
+ [[ -n display_pods ]]
+ local 'func_params=display_pods kube-system'
+ local func_name=display_pods
+ logging_process display_pods kube-system
+ [[ -n display_pods ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183256
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183256 = display_pods' kube-system
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=kube-system
+ kubectl_console 'get pods       --namespace=kube-system       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n get pods       --namespace=kube-system       --output wide       --sort-by='{.spec.nodeName}' ]]
+ local 'command_params=get pods       --namespace=kube-system       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ execute_command 'kubectl get pods       --namespace=kube-system       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl get pods       --namespace=kube-system       --output wide       --sort-by='{.spec.nodeName}' ]]
++ echo -e kubectl get pods --namespace=kube-system --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace=kube-system --output wide --sort-by='\''{.spec.nodeName}'\'''
+ logging_process kubectl get pods --namespace=kube-system --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183256
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183256 = kubectl' get pods --namespace=kube-system --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ return 0
+ eval kubectl get pods --namespace=kube-system --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ kubectl get pods --namespace=kube-system --output wide '--sort-by={.spec.nodeName}'
NAME                                                    READY   STATUS    RESTARTS   AGE     IP              NODE                            NOMINATED NODE   READINESS GATES
kube-proxy-ip-172-20-45-53.ec2.internal                 1/1     Running   0          19m     172.20.45.53    ip-172-20-45-53.ec2.internal    <none>           <none>
weave-net-gbqtp                                         2/2     Running   1          20m     172.20.45.53    ip-172-20-45-53.ec2.internal    <none>           <none>
metrics-server-d5bccf9f7-9zzlc                          1/1     Running   0          7m3s    100.116.0.1     ip-172-20-45-53.ec2.internal    <none>           <none>
etcd-manager-events-ip-172-20-53-172.ec2.internal       1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
weave-net-mm269                                         2/2     Running   4          22m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
etcd-manager-main-ip-172-20-53-172.ec2.internal         1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kube-scheduler-ip-172-20-53-172.ec2.internal            1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kops-controller-lxst6                                   1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kube-controller-manager-ip-172-20-53-172.ec2.internal   1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kube-proxy-ip-172-20-53-172.ec2.internal                1/1     Running   0          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kube-apiserver-ip-172-20-53-172.ec2.internal            2/2     Running   1          21m     172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
kube-dns-64f86fb8dd-gzmmw                               3/3     Running   0          22m     100.124.0.1     ip-172-20-84-104.ec2.internal   <none>           <none>
kube-dns-autoscaler-cd7778b7b-5nd88                     1/1     Running   0          22m     100.124.0.2     ip-172-20-84-104.ec2.internal   <none>           <none>
kube-proxy-ip-172-20-84-104.ec2.internal                1/1     Running   0          20m     172.20.84.104   ip-172-20-84-104.ec2.internal   <none>           <none>
kube-dns-64f86fb8dd-j9vdd                               3/3     Running   0          20m     100.124.0.3     ip-172-20-84-104.ec2.internal   <none>           <none>
weave-net-tvzg7                                         2/2     Running   1          20m     172.20.84.104   ip-172-20-84-104.ec2.internal   <none>           <none>
kube-scheduler-ip-172-20-87-159.ec2.internal            1/1     Running   0          20m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
kube-controller-manager-ip-172-20-87-159.ec2.internal   1/1     Running   0          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
weave-net-9mv9s                                         2/2     Running   0          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
etcd-manager-events-ip-172-20-87-159.ec2.internal       1/1     Running   0          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
kube-apiserver-ip-172-20-87-159.ec2.internal            2/2     Running   2          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
kops-controller-vd9cl                                   1/1     Running   0          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
etcd-manager-main-ip-172-20-87-159.ec2.internal         1/1     Running   0          20m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
kube-proxy-ip-172-20-87-159.ec2.internal                1/1     Running   0          21m     172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
kubernetes-dashboard-975499656-j7h9c                    1/1     Running   0          83s     100.108.0.1     ip-172-20-87-159.ec2.internal   <none>           <none>
kube-controller-manager-ip-172-20-99-239.ec2.internal   1/1     Running   0          21m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
etcd-manager-main-ip-172-20-99-239.ec2.internal         1/1     Running   0          21m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
kube-scheduler-ip-172-20-99-239.ec2.internal            1/1     Running   0          21m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
kube-proxy-ip-172-20-99-239.ec2.internal                1/1     Running   0          22m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
kops-controller-rcnlw                                   1/1     Running   0          21m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
weave-net-p4lhp                                         2/2     Running   4          22m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
kube-apiserver-ip-172-20-99-239.ec2.internal            2/2     Running   2          21m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
etcd-manager-events-ip-172-20-99-239.ec2.internal       1/1     Running   0          22m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
dns-controller-798bf8df89-z6ttg                         1/1     Running   0          22m     172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
weave-net-k7hvt                                         2/2     Running   0          20m     172.20.127.92   ip-172-20-127-92.ec2.internal   <none>           <none>
tiller-deploy-5c8959c79b-8wwcg                          1/1     Running   0          6m29s   100.100.0.3     ip-172-20-127-92.ec2.internal   <none>           <none>
kube-proxy-ip-172-20-127-92.ec2.internal                1/1     Running   0          19m     172.20.127.92   ip-172-20-127-92.ec2.internal   <none>           <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ display_pods prometheus
+ tracking_process display_pods prometheus
+ [[ -n display_pods ]]
+ local 'func_params=display_pods prometheus'
+ local func_name=display_pods
+ logging_process display_pods prometheus
+ [[ -n display_pods ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183257
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183257 = display_pods' prometheus
+ return 0
+ return 0
+ [[ -n '' ]]
+ target_namespace=prometheus
+ kubectl_console 'get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n get pods       --namespace=prometheus       --output wide       --sort-by='{.spec.nodeName}' ]]
+ local 'command_params=get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ execute_command 'kubectl get pods       --namespace=prometheus       --output wide       --sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl get pods       --namespace=prometheus       --output wide       --sort-by='{.spec.nodeName}' ]]
++ echo -e kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get pods --namespace=prometheus --output wide --sort-by='\''{.spec.nodeName}'\'''
+ logging_process kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183257
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183257 = kubectl' get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
+ return 0
+ eval kubectl get pods --namespace=prometheus --output wide '--sort-by='\''{.spec.nodeName}'\'''
++ kubectl get pods --namespace=prometheus --output wide '--sort-by={.spec.nodeName}'
NAME                                                     READY   STATUS    RESTARTS   AGE     IP              NODE                            NOMINATED NODE   READINESS GATES
alertmanager-prometheus-prometheus-oper-alertmanager-0   2/2     Running   0          4m10s   100.116.0.5     ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-node-exporter-sk9w9                1/1     Running   0          4m18s   172.20.45.53    ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-oper-operator-666b58fc6c-6hltr     2/2     Running   0          4m18s   100.116.0.4     ip-172-20-45-53.ec2.internal    <none>           <none>
prometheus-prometheus-node-exporter-kg4lk                1/1     Running   0          4m18s   172.20.53.172   ip-172-20-53-172.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-57b4n                1/1     Running   0          4m18s   172.20.84.104   ip-172-20-84-104.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-n2dxk                1/1     Running   0          4m18s   172.20.87.159   ip-172-20-87-159.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-7mjr6                1/1     Running   0          4m18s   172.20.99.239   ip-172-20-99-239.ec2.internal   <none>           <none>
prometheus-prometheus-node-exporter-fchwv                1/1     Running   0          4m18s   172.20.127.92   ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-grafana-86c695c58f-n2ddg                      2/2     Running   0          4m18s   100.100.0.5     ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-kube-state-metrics-7b69c4fc7-tr2wx            1/1     Running   0          4m18s   100.100.0.4     ip-172-20-127-92.ec2.internal   <none>           <none>
prometheus-prometheus-prometheus-oper-prometheus-0       3/3     Running   1          4m      100.100.0.6     ip-172-20-127-92.ec2.internal   <none>           <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ kubectl_console cluster-info
+ [[ -n cluster-info ]]
+ local command_params=cluster-info
+ execute_command 'kubectl cluster-info'
+ [[ -n kubectl cluster-info ]]
++ echo -e kubectl cluster-info
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl cluster-info'
+ logging_process kubectl cluster-info
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183258
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183258 = kubectl' cluster-info
+ return 0
+ eval kubectl cluster-info
++ kubectl cluster-info
Kubernetes master is running at https://api.prototype.emvaldes.name
KubeDNS is running at https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://api.prototype.emvaldes.name/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
+ return 0
+ console_targets=(status history)
+ declare -a console_targets
+ display_message 'Identifying Deployment Status ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Identifying Deployment Status ...'
+ inline 'Identifying Deployment Status ...\n'
+ echo -en 'Identifying Deployment Status ...\n'
Identifying Deployment Status ...
+ for target in ${console_targets[@]}
+ kubectl_console 'rollout status deployment/helloworld-deployment'
+ [[ -n rollout status deployment/helloworld-deployment ]]
+ local 'command_params=rollout status deployment/helloworld-deployment'
+ execute_command 'kubectl rollout status deployment/helloworld-deployment'
+ [[ -n kubectl rollout status deployment/helloworld-deployment ]]
++ echo -e kubectl rollout status deployment/helloworld-deployment
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl rollout status deployment/helloworld-deployment'
+ logging_process kubectl rollout status deployment/helloworld-deployment
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183259
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183259 = kubectl' rollout status deployment/helloworld-deployment
+ return 0
+ eval kubectl rollout status deployment/helloworld-deployment
++ kubectl rollout status deployment/helloworld-deployment
deployment "helloworld-deployment" successfully rolled out
+ for target in ${console_targets[@]}
+ kubectl_console 'rollout history deployment/helloworld-deployment'
+ [[ -n rollout history deployment/helloworld-deployment ]]
+ local 'command_params=rollout history deployment/helloworld-deployment'
+ execute_command 'kubectl rollout history deployment/helloworld-deployment'
+ [[ -n kubectl rollout history deployment/helloworld-deployment ]]
++ echo -e kubectl rollout history deployment/helloworld-deployment
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl rollout history deployment/helloworld-deployment'
+ logging_process kubectl rollout history deployment/helloworld-deployment
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183300
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183300 = kubectl' rollout history deployment/helloworld-deployment
+ return 0
+ eval kubectl rollout history deployment/helloworld-deployment
++ kubectl rollout history deployment/helloworld-deployment
deployment.apps/helloworld-deployment
REVISION  CHANGE-CAUSE
1         kubectl create --filename=/tmp/clusters/k8s-apps/helloworld/prototype.emvaldes.name.yaml --record=true

+ cluster_services
+ tracking_process cluster_services
+ [[ -n cluster_services ]]
+ local func_params=cluster_services
+ local func_name=cluster_services
+ logging_process cluster_services
+ [[ -n cluster_services ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183301
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183301 = cluster_services'
+ return 0
+ return 0
+ display_message 'Listing Kubernetes Services:'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Listing Kubernetes Services:'
+ inline 'Listing Kubernetes Services:\n'
+ echo -en 'Listing Kubernetes Services:\n'
Listing Kubernetes Services:
+ kubectl_console 'get services'
+ [[ -n get services ]]
+ local 'command_params=get services'
+ execute_command 'kubectl get services'
+ [[ -n kubectl get services ]]
++ echo -e kubectl get services
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl get services'
+ logging_process kubectl get services
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183301
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183301 = kubectl' get services
+ return 0
+ eval kubectl get services
++ kubectl get services
NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)        AGE
helloworld-deployment   LoadBalancer   100.71.217.237   aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com   80:31949/TCP   58s
kubernetes              ClusterIP      100.64.0.1       <none>                                                                   443/TCP        22m
+ services_loadbalancers=($(
        kubectl get services | egrep "^(.*)( LoadBalancer )(.*)$" | awk '{print $4"~"$5}' | cut -d':' -f1
      ))
++ kubectl get services
++ egrep '^(.*)( LoadBalancer )(.*)$'
++ awk '{print $4"~"$5}'
++ cut -d: -f1
+ declare -a services_loadbalancers
+ for loadbalancer in ${services_loadbalancers[@]}
+ target_endpoint=aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com
+ target_svcport=80
+ display_message 'Scanning Service Ports ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Scanning Service Ports ...'
+ inline 'Scanning Service Ports ...\n'
+ echo -en 'Scanning Service Ports ...\n'
Scanning Service Ports ...
+ nmap -Pn -p 80 -sT aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com
Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-12 18:33 MST
Nmap scan report for aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com (92.242.140.2)
Host is up (0.11s latency).
rDNS record for 92.242.140.2: unallocated.barefruit.co.uk

PORT   STATE SERVICE
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 0.62 seconds
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ Instance registration is still in progress.	i-0142ccff75fc6f21e	ELB	OutOfService
Instance registration is still in progress.	i-04b21d4331bd02f4f	ELB	OutOfService
Instance registration is still in progress.	i-0a76fb97b7a3966e6	ELB	OutOfService != '' ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 ''
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n '' ]]
+ message=
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf '' 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ Instance registration is still in progress.	i-0142ccff75fc6f21e	ELB	OutOfService
Instance registration is still in progress.	i-04b21d4331bd02f4f	ELB	OutOfService
Instance registration is still in progress.	i-0a76fb97b7a3966e6	ELB	OutOfService != '' ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 ''
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n '' ]]
+ message=
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf '' 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ Instance registration is still in progress.	i-0142ccff75fc6f21e	ELB	OutOfService
Instance registration is still in progress.	i-04b21d4331bd02f4f	ELB	OutOfService
Instance registration is still in progress.	i-0a76fb97b7a3966e6	ELB	OutOfService != '' ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 ''
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n '' ]]
+ message=
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf '' 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ Instance registration is still in progress.	i-0142ccff75fc6f21e	ELB	OutOfService
Instance registration is still in progress.	i-04b21d4331bd02f4f	ELB	OutOfService
Instance registration is still in progress.	i-0a76fb97b7a3966e6	ELB	OutOfService != '' ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 ''
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n '' ]]
+ message=
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf '' 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ Instance registration is still in progress.	i-04b21d4331bd02f4f	ELB	OutOfService
Instance registration is still in progress.	i-0a76fb97b7a3966e6	ELB	OutOfService != '' ]]
+ inline .
+ echo -en .
.+ sleep_until 15 5 ''
+ [[ -n 15 ]]
+ local timer=15
+ [[ -n 5 ]]
+ local paused=5
+ [[ -n '' ]]
+ message=
+ tput sc
+ [[ 15 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=10
+ [[ 10 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=5
+ [[ 5 -gt 0 ]]
+ tput rc
+ tput el
+ [[ 0 -gt 0 ]]
+ sleep 5
+ timer=0
+ [[ 0 -gt 0 ]]
+ tput rc
+ tput ed
+ printf '' 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ return 0
++ aws --profile kubernetes --region us-east-1 elb describe-instance-health --load-balancer-name aed58aacd08184e589ca43ab9ba89a37 --query 'InstanceStates[?State!=`InService`]' --output text
+ [[ '' != '' ]]
+ display_message 'Retrieving Service Status ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Retrieving Service Status ...'
+ inline 'Retrieving Service Status ...\n'
+ echo -en 'Retrieving Service Status ...\n'
Retrieving Service Status ...
+ curl --silent -I aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com:80
HTTP/1.1 200 OK
Date: Thu, 13 Aug 2020 01:34:40 GMT
Server: Apache/2.4.29 (Ubuntu)
Last-Modified: Thu, 13 Aug 2020 01:31:45 GMT
ETag: "4e-5acb844654240"
Accept-Ranges: bytes
Content-Length: 78
Vary: Accept-Encoding
Content-Type: text/html

+ display_message 'Displaying Service Content ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Displaying Service Content ...'
+ inline 'Displaying Service Content ...\n'
+ echo -en 'Displaying Service Content ...\n'
Displaying Service Content ...
+ curl --silent aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com:80
Hello DevOps Engineers! (k8s-cluster.prototype.emvaldes.name: 20200812183144)
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ display_message 'Describing Application Service ...'
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ print 'Describing Application Service ...'
+ inline 'Describing Application Service ...\n'
+ echo -en 'Describing Application Service ...\n'
Describing Application Service ...
+ kubectl_console 'describe services'
+ [[ -n describe services ]]
+ local 'command_params=describe services'
+ execute_command 'kubectl describe services'
+ [[ -n kubectl describe services ]]
++ echo -e kubectl describe services
++ sed -e 's|\([[:blank:]]\)\{1,\}| |g'
+ local 'command_params=kubectl describe services'
+ logging_process kubectl describe services
+ [[ -n kubectl ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183440
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183440 = kubectl' describe services
+ return 0
+ eval kubectl describe services
++ kubectl describe services
Name:                     helloworld-deployment
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=helloworld
Type:                     LoadBalancer
IP:                       100.71.217.237
LoadBalancer Ingress:     aed58aacd08184e589ca43ab9ba89a37-235008530.us-east-1.elb.amazonaws.com
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  31949/TCP
Endpoints:                100.116.0.6:80,100.116.0.7:80,100.124.0.6:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:
  Type    Reason                Age    From                Message
  ----    ------                ----   ----                -------
  Normal  EnsuringLoadBalancer  2m38s  service-controller  Ensuring load balancer
  Normal  EnsuredLoadBalancer   2m36s  service-controller  Ensured load balancer


Name:              kubernetes
Namespace:         default
Labels:            component=apiserver
                   provider=kubernetes
Annotations:       <none>
Selector:          <none>
Type:              ClusterIP
IP:                100.64.0.1
Port:              https  443/TCP
TargetPort:        443/TCP
Endpoints:         172.20.53.172:443,172.20.87.159:443,172.20.99.239:443
Session Affinity:  None
Events:            <none>
+ debugging_process 0
+ [[ 3 == true ]]
+ return 0
+ continue_process
+ [[ 0 -eq 0 ]]
+ message='Continue [Y/n]?: '
+ continue_response=false
+ [[ false == true ]]
+ continue_response=true
+ return 0
+ return 0
+ newline
+ print
+ inline '\n'
+ echo -en '\n'

+ logging_process 'KubeConfig: export KUBECONFIG='\''/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config'\'';'
+ [[ -n KubeConfig: export KUBECONFIG='/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config'; ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183442
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183442 = KubeConfig: export KUBECONFIG='\''/Users/emvaldes/.kube/k8sctl/clusters/emvaldes.name/prototype/config'\'';'
+ return 0
+ logging_process 'Completed! '
+ [[ -n Completed!  ]]
+ content=("${@}")
+ local content
++ date +%Y%m%d%H%M%S
+ local timestamp=20200812183442
+ [[ 68 -eq 0 ]]
+ [[ true == true ]]
+ [[ 68 -gt 0 ]]
+ echo -e '20200812183442 = Completed! '
+ return 0
+ return 0

real	30m52.556s
user	0m36.276s
sys	0m47.909s
